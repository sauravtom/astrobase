"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@neynar";
exports.ids = ["vendor-chunks/@neynar"];
exports.modules = {

/***/ "(ssr)/./node_modules/@neynar/react/dist/bundle.es.js":
/*!******************************************************!*\
  !*** ./node_modules/@neynar/react/dist/bundle.es.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CastCard: () => (/* binding */ Rs),\n/* harmony export */   MiniAppContext: () => (/* binding */ Xp),\n/* harmony export */   MiniAppProvider: () => (/* binding */ sy),\n/* harmony export */   NeynarAuthButton: () => (/* binding */ fm),\n/* harmony export */   NeynarAutoCompleteUser: () => (/* binding */ fy),\n/* harmony export */   NeynarCastCard: () => (/* binding */ _m),\n/* harmony export */   NeynarContextProvider: () => (/* binding */ oy),\n/* harmony export */   NeynarConversationList: () => (/* binding */ ay),\n/* harmony export */   NeynarFeedList: () => (/* binding */ uy),\n/* harmony export */   NeynarFrameCard: () => (/* binding */ ng),\n/* harmony export */   NeynarProfileCard: () => (/* binding */ cy),\n/* harmony export */   NeynarUserDropdown: () => (/* binding */ ly),\n/* harmony export */   SIWN_variant: () => (/* binding */ wr),\n/* harmony export */   Theme: () => (/* binding */ Sl),\n/* harmony export */   useLocalStorage: () => (/* binding */ _a),\n/* harmony export */   useMiniApp: () => (/* binding */ Qp),\n/* harmony export */   useNeynarContext: () => (/* binding */ lr)\n/* harmony export */ });\n/* harmony import */ var _pigment_css_react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @pigment-css/react */ \"(ssr)/./node_modules/@pigment-css/react/build/chunk-AFZBAV6Q.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var hls_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! hls.js */ \"(ssr)/./node_modules/hls.js/dist/hls.mjs\");\nvar Jl = Object.defineProperty;\nvar Xl = (t, e, r) => e in t ? Jl(t, e, { enumerable: !0, configurable: !0, writable: !0, value: r }) : t[e] = r;\nvar br = (t, e, r) => Xl(t, typeof e != \"symbol\" ? e + \"\" : e, r);\n\n\n\nconst rr = {\n  vars: {\n    colors: {\n      primary: \"var(--colors-primary)\"\n    },\n    typography: {\n      fonts: {\n        base: \"var(--typography-fonts-base)\"\n      },\n      fontWeights: {\n        regular: \"var(--typography-fontWeights-regular)\",\n        bold: \"var(--typography-fontWeights-bold)\"\n      },\n      fontSizes: {\n        large: \"var(--typography-fontSizes-large)\",\n        medium: \"var(--typography-fontSizes-medium)\",\n        small: \"var(--typography-fontSizes-small)\"\n      }\n    },\n    palette: {\n      background: \"var(--palette-background)\",\n      border: \"var(--palette-border)\",\n      text: \"var(--palette-text)\",\n      textMuted: \"var(--palette-textMuted)\"\n    }\n  }\n};\nfunction Qo(t) {\n  return t && t.__esModule && Object.prototype.hasOwnProperty.call(t, \"default\") ? t.default : t;\n}\nfunction ea(t) {\n  if (Object.prototype.hasOwnProperty.call(t, \"__esModule\")) return t;\n  var e = t.default;\n  if (typeof e == \"function\") {\n    var r = function n() {\n      return this instanceof n ? Reflect.construct(e, arguments, this.constructor) : e.apply(this, arguments);\n    };\n    r.prototype = e.prototype;\n  } else r = {};\n  return Object.defineProperty(r, \"__esModule\", {\n    value: !0\n  }), Object.keys(t).forEach(function(n) {\n    var o = Object.getOwnPropertyDescriptor(t, n);\n    Object.defineProperty(r, n, o.get ? o : {\n      enumerable: !0,\n      get: function() {\n        return t[n];\n      }\n    });\n  }), r;\n}\nvar Vs = { exports: {} }, Qn = {};\n/**\n * @license React\n * react-jsx-runtime.production.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nvar Ca;\nfunction tf() {\n  if (Ca) return Qn;\n  Ca = 1;\n  var t = Symbol.for(\"react.transitional.element\"), e = Symbol.for(\"react.fragment\");\n  function r(n, o, i) {\n    var c = null;\n    if (i !== void 0 && (c = \"\" + i), o.key !== void 0 && (c = \"\" + o.key), \"key\" in o) {\n      i = {};\n      for (var f in o)\n        f !== \"key\" && (i[f] = o[f]);\n    } else i = o;\n    return o = i.ref, {\n      $$typeof: t,\n      type: n,\n      key: c,\n      ref: o !== void 0 ? o : null,\n      props: i\n    };\n  }\n  return Qn.Fragment = e, Qn.jsx = r, Qn.jsxs = r, Qn;\n}\nvar Sa;\nfunction rf() {\n  return Sa || (Sa = 1, Vs.exports = tf()), Vs.exports;\n}\nvar U = rf();\nlet ta = class extends Error {\n  constructor(r, n = {}) {\n    super(r, n.cause ? { cause: n.cause } : void 0);\n    br(this, \"name\", \"BaseError\");\n    br(this, \"cause\");\n    this.cause = n.cause;\n  }\n};\nclass nf extends ta {\n  constructor() {\n    super(\"Invalid domain manifest\");\n    br(this, \"name\", \"AddMiniApp.InvalidDomainManifest\");\n  }\n}\nlet sf = class extends ta {\n  constructor() {\n    super(\"Add frame rejected by user\");\n    br(this, \"name\", \"AddMiniApp.RejectedByUser\");\n  }\n};\nclass Hu extends ta {\n  constructor() {\n    super(\"Sign in rejected by user\");\n    br(this, \"name\", \"SignIn.RejectedByUser\");\n  }\n}\nconst Aa = [\n  \"wallet.getEthereumProvider\",\n  \"wallet.getSolanaProvider\",\n  \"actions.ready\",\n  \"actions.openUrl\",\n  \"actions.close\",\n  \"actions.setPrimaryButton\",\n  \"actions.addMiniApp\",\n  \"actions.signIn\",\n  \"actions.viewCast\",\n  \"actions.viewProfile\",\n  \"actions.composeCast\",\n  \"actions.viewToken\",\n  \"actions.sendToken\",\n  \"actions.swapToken\",\n  \"haptics.impactOccurred\",\n  \"haptics.notificationOccurred\",\n  \"haptics.selectionChanged\",\n  \"back\"\n];\nvar nt;\n(function(t) {\n  t.assertEqual = (o) => o;\n  function e(o) {\n  }\n  t.assertIs = e;\n  function r(o) {\n    throw new Error();\n  }\n  t.assertNever = r, t.arrayToEnum = (o) => {\n    const i = {};\n    for (const c of o)\n      i[c] = c;\n    return i;\n  }, t.getValidEnumValues = (o) => {\n    const i = t.objectKeys(o).filter((f) => typeof o[o[f]] != \"number\"), c = {};\n    for (const f of i)\n      c[f] = o[f];\n    return t.objectValues(c);\n  }, t.objectValues = (o) => t.objectKeys(o).map(function(i) {\n    return o[i];\n  }), t.objectKeys = typeof Object.keys == \"function\" ? (o) => Object.keys(o) : (o) => {\n    const i = [];\n    for (const c in o)\n      Object.prototype.hasOwnProperty.call(o, c) && i.push(c);\n    return i;\n  }, t.find = (o, i) => {\n    for (const c of o)\n      if (i(c))\n        return c;\n  }, t.isInteger = typeof Number.isInteger == \"function\" ? (o) => Number.isInteger(o) : (o) => typeof o == \"number\" && isFinite(o) && Math.floor(o) === o;\n  function n(o, i = \" | \") {\n    return o.map((c) => typeof c == \"string\" ? `'${c}'` : c).join(i);\n  }\n  t.joinValues = n, t.jsonStringifyReplacer = (o, i) => typeof i == \"bigint\" ? i.toString() : i;\n})(nt || (nt = {}));\nvar ko;\n(function(t) {\n  t.mergeShapes = (e, r) => ({\n    ...e,\n    ...r\n    // second overwrites first\n  });\n})(ko || (ko = {}));\nconst le = nt.arrayToEnum([\n  \"string\",\n  \"nan\",\n  \"number\",\n  \"integer\",\n  \"float\",\n  \"boolean\",\n  \"date\",\n  \"bigint\",\n  \"symbol\",\n  \"function\",\n  \"undefined\",\n  \"null\",\n  \"array\",\n  \"object\",\n  \"unknown\",\n  \"promise\",\n  \"void\",\n  \"never\",\n  \"map\",\n  \"set\"\n]), pr = (t) => {\n  switch (typeof t) {\n    case \"undefined\":\n      return le.undefined;\n    case \"string\":\n      return le.string;\n    case \"number\":\n      return isNaN(t) ? le.nan : le.number;\n    case \"boolean\":\n      return le.boolean;\n    case \"function\":\n      return le.function;\n    case \"bigint\":\n      return le.bigint;\n    case \"symbol\":\n      return le.symbol;\n    case \"object\":\n      return Array.isArray(t) ? le.array : t === null ? le.null : t.then && typeof t.then == \"function\" && t.catch && typeof t.catch == \"function\" ? le.promise : typeof Map < \"u\" && t instanceof Map ? le.map : typeof Set < \"u\" && t instanceof Set ? le.set : typeof Date < \"u\" && t instanceof Date ? le.date : le.object;\n    default:\n      return le.unknown;\n  }\n}, ne = nt.arrayToEnum([\n  \"invalid_type\",\n  \"invalid_literal\",\n  \"custom\",\n  \"invalid_union\",\n  \"invalid_union_discriminator\",\n  \"invalid_enum_value\",\n  \"unrecognized_keys\",\n  \"invalid_arguments\",\n  \"invalid_return_type\",\n  \"invalid_date\",\n  \"invalid_string\",\n  \"too_small\",\n  \"too_big\",\n  \"invalid_intersection_types\",\n  \"not_multiple_of\",\n  \"not_finite\"\n]), of = (t) => JSON.stringify(t, null, 2).replace(/\"([^\"]+)\":/g, \"$1:\");\nclass Zt extends Error {\n  get errors() {\n    return this.issues;\n  }\n  constructor(e) {\n    super(), this.issues = [], this.addIssue = (n) => {\n      this.issues = [...this.issues, n];\n    }, this.addIssues = (n = []) => {\n      this.issues = [...this.issues, ...n];\n    };\n    const r = new.target.prototype;\n    Object.setPrototypeOf ? Object.setPrototypeOf(this, r) : this.__proto__ = r, this.name = \"ZodError\", this.issues = e;\n  }\n  format(e) {\n    const r = e || function(i) {\n      return i.message;\n    }, n = { _errors: [] }, o = (i) => {\n      for (const c of i.issues)\n        if (c.code === \"invalid_union\")\n          c.unionErrors.map(o);\n        else if (c.code === \"invalid_return_type\")\n          o(c.returnTypeError);\n        else if (c.code === \"invalid_arguments\")\n          o(c.argumentsError);\n        else if (c.path.length === 0)\n          n._errors.push(r(c));\n        else {\n          let f = n, v = 0;\n          for (; v < c.path.length; ) {\n            const x = c.path[v];\n            v === c.path.length - 1 ? (f[x] = f[x] || { _errors: [] }, f[x]._errors.push(r(c))) : f[x] = f[x] || { _errors: [] }, f = f[x], v++;\n          }\n        }\n    };\n    return o(this), n;\n  }\n  static assert(e) {\n    if (!(e instanceof Zt))\n      throw new Error(`Not a ZodError: ${e}`);\n  }\n  toString() {\n    return this.message;\n  }\n  get message() {\n    return JSON.stringify(this.issues, nt.jsonStringifyReplacer, 2);\n  }\n  get isEmpty() {\n    return this.issues.length === 0;\n  }\n  flatten(e = (r) => r.message) {\n    const r = {}, n = [];\n    for (const o of this.issues)\n      o.path.length > 0 ? (r[o.path[0]] = r[o.path[0]] || [], r[o.path[0]].push(e(o))) : n.push(e(o));\n    return { formErrors: n, fieldErrors: r };\n  }\n  get formErrors() {\n    return this.flatten();\n  }\n}\nZt.create = (t) => new Zt(t);\nconst Rn = (t, e) => {\n  let r;\n  switch (t.code) {\n    case ne.invalid_type:\n      t.received === le.undefined ? r = \"Required\" : r = `Expected ${t.expected}, received ${t.received}`;\n      break;\n    case ne.invalid_literal:\n      r = `Invalid literal value, expected ${JSON.stringify(t.expected, nt.jsonStringifyReplacer)}`;\n      break;\n    case ne.unrecognized_keys:\n      r = `Unrecognized key(s) in object: ${nt.joinValues(t.keys, \", \")}`;\n      break;\n    case ne.invalid_union:\n      r = \"Invalid input\";\n      break;\n    case ne.invalid_union_discriminator:\n      r = `Invalid discriminator value. Expected ${nt.joinValues(t.options)}`;\n      break;\n    case ne.invalid_enum_value:\n      r = `Invalid enum value. Expected ${nt.joinValues(t.options)}, received '${t.received}'`;\n      break;\n    case ne.invalid_arguments:\n      r = \"Invalid function arguments\";\n      break;\n    case ne.invalid_return_type:\n      r = \"Invalid function return type\";\n      break;\n    case ne.invalid_date:\n      r = \"Invalid date\";\n      break;\n    case ne.invalid_string:\n      typeof t.validation == \"object\" ? \"includes\" in t.validation ? (r = `Invalid input: must include \"${t.validation.includes}\"`, typeof t.validation.position == \"number\" && (r = `${r} at one or more positions greater than or equal to ${t.validation.position}`)) : \"startsWith\" in t.validation ? r = `Invalid input: must start with \"${t.validation.startsWith}\"` : \"endsWith\" in t.validation ? r = `Invalid input: must end with \"${t.validation.endsWith}\"` : nt.assertNever(t.validation) : t.validation !== \"regex\" ? r = `Invalid ${t.validation}` : r = \"Invalid\";\n      break;\n    case ne.too_small:\n      t.type === \"array\" ? r = `Array must contain ${t.exact ? \"exactly\" : t.inclusive ? \"at least\" : \"more than\"} ${t.minimum} element(s)` : t.type === \"string\" ? r = `String must contain ${t.exact ? \"exactly\" : t.inclusive ? \"at least\" : \"over\"} ${t.minimum} character(s)` : t.type === \"number\" ? r = `Number must be ${t.exact ? \"exactly equal to \" : t.inclusive ? \"greater than or equal to \" : \"greater than \"}${t.minimum}` : t.type === \"date\" ? r = `Date must be ${t.exact ? \"exactly equal to \" : t.inclusive ? \"greater than or equal to \" : \"greater than \"}${new Date(Number(t.minimum))}` : r = \"Invalid input\";\n      break;\n    case ne.too_big:\n      t.type === \"array\" ? r = `Array must contain ${t.exact ? \"exactly\" : t.inclusive ? \"at most\" : \"less than\"} ${t.maximum} element(s)` : t.type === \"string\" ? r = `String must contain ${t.exact ? \"exactly\" : t.inclusive ? \"at most\" : \"under\"} ${t.maximum} character(s)` : t.type === \"number\" ? r = `Number must be ${t.exact ? \"exactly\" : t.inclusive ? \"less than or equal to\" : \"less than\"} ${t.maximum}` : t.type === \"bigint\" ? r = `BigInt must be ${t.exact ? \"exactly\" : t.inclusive ? \"less than or equal to\" : \"less than\"} ${t.maximum}` : t.type === \"date\" ? r = `Date must be ${t.exact ? \"exactly\" : t.inclusive ? \"smaller than or equal to\" : \"smaller than\"} ${new Date(Number(t.maximum))}` : r = \"Invalid input\";\n      break;\n    case ne.custom:\n      r = \"Invalid input\";\n      break;\n    case ne.invalid_intersection_types:\n      r = \"Intersection results could not be merged\";\n      break;\n    case ne.not_multiple_of:\n      r = `Number must be a multiple of ${t.multipleOf}`;\n      break;\n    case ne.not_finite:\n      r = \"Number must be finite\";\n      break;\n    default:\n      r = e.defaultError, nt.assertNever(t);\n  }\n  return { message: r };\n};\nlet Ku = Rn;\nfunction af(t) {\n  Ku = t;\n}\nfunction as() {\n  return Ku;\n}\nconst us = (t) => {\n  const { data: e, path: r, errorMaps: n, issueData: o } = t, i = [...r, ...o.path || []], c = {\n    ...o,\n    path: i\n  };\n  if (o.message !== void 0)\n    return {\n      ...o,\n      path: i,\n      message: o.message\n    };\n  let f = \"\";\n  const v = n.filter((x) => !!x).slice().reverse();\n  for (const x of v)\n    f = x(c, { data: e, defaultError: f }).message;\n  return {\n    ...o,\n    path: i,\n    message: f\n  };\n}, uf = [];\nfunction oe(t, e) {\n  const r = as(), n = us({\n    issueData: e,\n    data: t.data,\n    path: t.path,\n    errorMaps: [\n      t.common.contextualErrorMap,\n      // contextual error map is first priority\n      t.schemaErrorMap,\n      // then schema-bound map if available\n      r,\n      // then global override map\n      r === Rn ? void 0 : Rn\n      // then global default map\n    ].filter((o) => !!o)\n  });\n  t.common.issues.push(n);\n}\nclass Lt {\n  constructor() {\n    this.value = \"valid\";\n  }\n  dirty() {\n    this.value === \"valid\" && (this.value = \"dirty\");\n  }\n  abort() {\n    this.value !== \"aborted\" && (this.value = \"aborted\");\n  }\n  static mergeArray(e, r) {\n    const n = [];\n    for (const o of r) {\n      if (o.status === \"aborted\")\n        return Ae;\n      o.status === \"dirty\" && e.dirty(), n.push(o.value);\n    }\n    return { status: e.value, value: n };\n  }\n  static async mergeObjectAsync(e, r) {\n    const n = [];\n    for (const o of r) {\n      const i = await o.key, c = await o.value;\n      n.push({\n        key: i,\n        value: c\n      });\n    }\n    return Lt.mergeObjectSync(e, n);\n  }\n  static mergeObjectSync(e, r) {\n    const n = {};\n    for (const o of r) {\n      const { key: i, value: c } = o;\n      if (i.status === \"aborted\" || c.status === \"aborted\")\n        return Ae;\n      i.status === \"dirty\" && e.dirty(), c.status === \"dirty\" && e.dirty(), i.value !== \"__proto__\" && (typeof c.value < \"u\" || o.alwaysSet) && (n[i.value] = c.value);\n    }\n    return { status: e.value, value: n };\n  }\n}\nconst Ae = Object.freeze({\n  status: \"aborted\"\n}), Cn = (t) => ({ status: \"dirty\", value: t }), jt = (t) => ({ status: \"valid\", value: t }), Io = (t) => t.status === \"aborted\", Bo = (t) => t.status === \"dirty\", un = (t) => t.status === \"valid\", oi = (t) => typeof Promise < \"u\" && t instanceof Promise;\nfunction cs(t, e, r, n) {\n  if (typeof e == \"function\" ? t !== e || !0 : !e.has(t)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return e.get(t);\n}\nfunction Wu(t, e, r, n, o) {\n  if (typeof e == \"function\" ? t !== e || !0 : !e.has(t)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return e.set(t, r), r;\n}\nvar ve;\n(function(t) {\n  t.errToObj = (e) => typeof e == \"string\" ? { message: e } : e || {}, t.toString = (e) => typeof e == \"string\" ? e : e == null ? void 0 : e.message;\n})(ve || (ve = {}));\nvar ti, ri;\nclass sr {\n  constructor(e, r, n, o) {\n    this._cachedPath = [], this.parent = e, this.data = r, this._path = n, this._key = o;\n  }\n  get path() {\n    return this._cachedPath.length || (this._key instanceof Array ? this._cachedPath.push(...this._path, ...this._key) : this._cachedPath.push(...this._path, this._key)), this._cachedPath;\n  }\n}\nconst ka = (t, e) => {\n  if (un(e))\n    return { success: !0, data: e.value };\n  if (!t.common.issues.length)\n    throw new Error(\"Validation failed but no issues detected.\");\n  return {\n    success: !1,\n    get error() {\n      if (this._error)\n        return this._error;\n      const r = new Zt(t.common.issues);\n      return this._error = r, this._error;\n    }\n  };\n};\nfunction Te(t) {\n  if (!t)\n    return {};\n  const { errorMap: e, invalid_type_error: r, required_error: n, description: o } = t;\n  if (e && (r || n))\n    throw new Error(`Can't use \"invalid_type_error\" or \"required_error\" in conjunction with custom error map.`);\n  return e ? { errorMap: e, description: o } : { errorMap: (c, f) => {\n    var v, x;\n    const { message: b } = t;\n    return c.code === \"invalid_enum_value\" ? { message: b ?? f.defaultError } : typeof f.data > \"u\" ? { message: (v = b ?? n) !== null && v !== void 0 ? v : f.defaultError } : c.code !== \"invalid_type\" ? { message: f.defaultError } : { message: (x = b ?? r) !== null && x !== void 0 ? x : f.defaultError };\n  }, description: o };\n}\nclass Je {\n  get description() {\n    return this._def.description;\n  }\n  _getType(e) {\n    return pr(e.data);\n  }\n  _getOrReturnCtx(e, r) {\n    return r || {\n      common: e.parent.common,\n      data: e.data,\n      parsedType: pr(e.data),\n      schemaErrorMap: this._def.errorMap,\n      path: e.path,\n      parent: e.parent\n    };\n  }\n  _processInputParams(e) {\n    return {\n      status: new Lt(),\n      ctx: {\n        common: e.parent.common,\n        data: e.data,\n        parsedType: pr(e.data),\n        schemaErrorMap: this._def.errorMap,\n        path: e.path,\n        parent: e.parent\n      }\n    };\n  }\n  _parseSync(e) {\n    const r = this._parse(e);\n    if (oi(r))\n      throw new Error(\"Synchronous parse encountered promise.\");\n    return r;\n  }\n  _parseAsync(e) {\n    const r = this._parse(e);\n    return Promise.resolve(r);\n  }\n  parse(e, r) {\n    const n = this.safeParse(e, r);\n    if (n.success)\n      return n.data;\n    throw n.error;\n  }\n  safeParse(e, r) {\n    var n;\n    const o = {\n      common: {\n        issues: [],\n        async: (n = r == null ? void 0 : r.async) !== null && n !== void 0 ? n : !1,\n        contextualErrorMap: r == null ? void 0 : r.errorMap\n      },\n      path: (r == null ? void 0 : r.path) || [],\n      schemaErrorMap: this._def.errorMap,\n      parent: null,\n      data: e,\n      parsedType: pr(e)\n    }, i = this._parseSync({ data: e, path: o.path, parent: o });\n    return ka(o, i);\n  }\n  \"~validate\"(e) {\n    var r, n;\n    const o = {\n      common: {\n        issues: [],\n        async: !!this[\"~standard\"].async\n      },\n      path: [],\n      schemaErrorMap: this._def.errorMap,\n      parent: null,\n      data: e,\n      parsedType: pr(e)\n    };\n    if (!this[\"~standard\"].async)\n      try {\n        const i = this._parseSync({ data: e, path: [], parent: o });\n        return un(i) ? {\n          value: i.value\n        } : {\n          issues: o.common.issues\n        };\n      } catch (i) {\n        !((n = (r = i == null ? void 0 : i.message) === null || r === void 0 ? void 0 : r.toLowerCase()) === null || n === void 0) && n.includes(\"encountered\") && (this[\"~standard\"].async = !0), o.common = {\n          issues: [],\n          async: !0\n        };\n      }\n    return this._parseAsync({ data: e, path: [], parent: o }).then((i) => un(i) ? {\n      value: i.value\n    } : {\n      issues: o.common.issues\n    });\n  }\n  async parseAsync(e, r) {\n    const n = await this.safeParseAsync(e, r);\n    if (n.success)\n      return n.data;\n    throw n.error;\n  }\n  async safeParseAsync(e, r) {\n    const n = {\n      common: {\n        issues: [],\n        contextualErrorMap: r == null ? void 0 : r.errorMap,\n        async: !0\n      },\n      path: (r == null ? void 0 : r.path) || [],\n      schemaErrorMap: this._def.errorMap,\n      parent: null,\n      data: e,\n      parsedType: pr(e)\n    }, o = this._parse({ data: e, path: n.path, parent: n }), i = await (oi(o) ? o : Promise.resolve(o));\n    return ka(n, i);\n  }\n  refine(e, r) {\n    const n = (o) => typeof r == \"string\" || typeof r > \"u\" ? { message: r } : typeof r == \"function\" ? r(o) : r;\n    return this._refinement((o, i) => {\n      const c = e(o), f = () => i.addIssue({\n        code: ne.custom,\n        ...n(o)\n      });\n      return typeof Promise < \"u\" && c instanceof Promise ? c.then((v) => v ? !0 : (f(), !1)) : c ? !0 : (f(), !1);\n    });\n  }\n  refinement(e, r) {\n    return this._refinement((n, o) => e(n) ? !0 : (o.addIssue(typeof r == \"function\" ? r(n, o) : r), !1));\n  }\n  _refinement(e) {\n    return new Yt({\n      schema: this,\n      typeName: Ce.ZodEffects,\n      effect: { type: \"refinement\", refinement: e }\n    });\n  }\n  superRefine(e) {\n    return this._refinement(e);\n  }\n  constructor(e) {\n    this.spa = this.safeParseAsync, this._def = e, this.parse = this.parse.bind(this), this.safeParse = this.safeParse.bind(this), this.parseAsync = this.parseAsync.bind(this), this.safeParseAsync = this.safeParseAsync.bind(this), this.spa = this.spa.bind(this), this.refine = this.refine.bind(this), this.refinement = this.refinement.bind(this), this.superRefine = this.superRefine.bind(this), this.optional = this.optional.bind(this), this.nullable = this.nullable.bind(this), this.nullish = this.nullish.bind(this), this.array = this.array.bind(this), this.promise = this.promise.bind(this), this.or = this.or.bind(this), this.and = this.and.bind(this), this.transform = this.transform.bind(this), this.brand = this.brand.bind(this), this.default = this.default.bind(this), this.catch = this.catch.bind(this), this.describe = this.describe.bind(this), this.pipe = this.pipe.bind(this), this.readonly = this.readonly.bind(this), this.isNullable = this.isNullable.bind(this), this.isOptional = this.isOptional.bind(this), this[\"~standard\"] = {\n      version: 1,\n      vendor: \"zod\",\n      validate: (r) => this[\"~validate\"](r)\n    };\n  }\n  optional() {\n    return ir.create(this, this._def);\n  }\n  nullable() {\n    return jr.create(this, this._def);\n  }\n  nullish() {\n    return this.nullable().optional();\n  }\n  array() {\n    return Gt.create(this);\n  }\n  promise() {\n    return Ln.create(this, this._def);\n  }\n  or(e) {\n    return li.create([this, e], this._def);\n  }\n  and(e) {\n    return fi.create(this, e, this._def);\n  }\n  transform(e) {\n    return new Yt({\n      ...Te(this._def),\n      schema: this,\n      typeName: Ce.ZodEffects,\n      effect: { type: \"transform\", transform: e }\n    });\n  }\n  default(e) {\n    const r = typeof e == \"function\" ? e : () => e;\n    return new gi({\n      ...Te(this._def),\n      innerType: this,\n      defaultValue: r,\n      typeName: Ce.ZodDefault\n    });\n  }\n  brand() {\n    return new ra({\n      typeName: Ce.ZodBranded,\n      type: this,\n      ...Te(this._def)\n    });\n  }\n  catch(e) {\n    const r = typeof e == \"function\" ? e : () => e;\n    return new yi({\n      ...Te(this._def),\n      innerType: this,\n      catchValue: r,\n      typeName: Ce.ZodCatch\n    });\n  }\n  describe(e) {\n    const r = this.constructor;\n    return new r({\n      ...this._def,\n      description: e\n    });\n  }\n  pipe(e) {\n    return ji.create(this, e);\n  }\n  readonly() {\n    return vi.create(this);\n  }\n  isOptional() {\n    return this.safeParse(void 0).success;\n  }\n  isNullable() {\n    return this.safeParse(null).success;\n  }\n}\nconst cf = /^c[^\\s-]{8,}$/i, lf = /^[0-9a-z]+$/, ff = /^[0-9A-HJKMNP-TV-Z]{26}$/i, hf = /^[0-9a-fA-F]{8}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{12}$/i, df = /^[a-z0-9_-]{21}$/i, pf = /^[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]+\\.[A-Za-z0-9-_]*$/, mf = /^[-+]?P(?!$)(?:(?:[-+]?\\d+Y)|(?:[-+]?\\d+[.,]\\d+Y$))?(?:(?:[-+]?\\d+M)|(?:[-+]?\\d+[.,]\\d+M$))?(?:(?:[-+]?\\d+W)|(?:[-+]?\\d+[.,]\\d+W$))?(?:(?:[-+]?\\d+D)|(?:[-+]?\\d+[.,]\\d+D$))?(?:T(?=[\\d+-])(?:(?:[-+]?\\d+H)|(?:[-+]?\\d+[.,]\\d+H$))?(?:(?:[-+]?\\d+M)|(?:[-+]?\\d+[.,]\\d+M$))?(?:[-+]?\\d+(?:[.,]\\d+)?S)?)??$/, gf = /^(?!\\.)(?!.*\\.\\.)([A-Z0-9_'+\\-\\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\\-]*\\.)+[A-Z]{2,}$/i, yf = \"^(\\\\p{Extended_Pictographic}|\\\\p{Emoji_Component})+$\";\nlet Hs;\nconst vf = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/, wf = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\/(3[0-2]|[12]?[0-9])$/, xf = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$/, bf = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\\/(12[0-8]|1[01][0-9]|[1-9]?[0-9])$/, _f = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/, Ef = /^([0-9a-zA-Z-_]{4})*(([0-9a-zA-Z-_]{2}(==)?)|([0-9a-zA-Z-_]{3}(=)?))?$/, Gu = \"((\\\\d\\\\d[2468][048]|\\\\d\\\\d[13579][26]|\\\\d\\\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\\\d{4}-((0[13578]|1[02])-(0[1-9]|[12]\\\\d|3[01])|(0[469]|11)-(0[1-9]|[12]\\\\d|30)|(02)-(0[1-9]|1\\\\d|2[0-8])))\", Mf = new RegExp(`^${Gu}$`);\nfunction Yu(t) {\n  let e = \"([01]\\\\d|2[0-3]):[0-5]\\\\d:[0-5]\\\\d\";\n  return t.precision ? e = `${e}\\\\.\\\\d{${t.precision}}` : t.precision == null && (e = `${e}(\\\\.\\\\d+)?`), e;\n}\nfunction Cf(t) {\n  return new RegExp(`^${Yu(t)}$`);\n}\nfunction Ju(t) {\n  let e = `${Gu}T${Yu(t)}`;\n  const r = [];\n  return r.push(t.local ? \"Z?\" : \"Z\"), t.offset && r.push(\"([+-]\\\\d{2}:?\\\\d{2})\"), e = `${e}(${r.join(\"|\")})`, new RegExp(`^${e}$`);\n}\nfunction Sf(t, e) {\n  return !!((e === \"v4\" || !e) && vf.test(t) || (e === \"v6\" || !e) && xf.test(t));\n}\nfunction Af(t, e) {\n  if (!pf.test(t))\n    return !1;\n  try {\n    const [r] = t.split(\".\"), n = r.replace(/-/g, \"+\").replace(/_/g, \"/\").padEnd(r.length + (4 - r.length % 4) % 4, \"=\"), o = JSON.parse(atob(n));\n    return !(typeof o != \"object\" || o === null || !o.typ || !o.alg || e && o.alg !== e);\n  } catch {\n    return !1;\n  }\n}\nfunction kf(t, e) {\n  return !!((e === \"v4\" || !e) && wf.test(t) || (e === \"v6\" || !e) && bf.test(t));\n}\nclass Wt extends Je {\n  _parse(e) {\n    if (this._def.coerce && (e.data = String(e.data)), this._getType(e) !== le.string) {\n      const i = this._getOrReturnCtx(e);\n      return oe(i, {\n        code: ne.invalid_type,\n        expected: le.string,\n        received: i.parsedType\n      }), Ae;\n    }\n    const n = new Lt();\n    let o;\n    for (const i of this._def.checks)\n      if (i.kind === \"min\")\n        e.data.length < i.value && (o = this._getOrReturnCtx(e, o), oe(o, {\n          code: ne.too_small,\n          minimum: i.value,\n          type: \"string\",\n          inclusive: !0,\n          exact: !1,\n          message: i.message\n        }), n.dirty());\n      else if (i.kind === \"max\")\n        e.data.length > i.value && (o = this._getOrReturnCtx(e, o), oe(o, {\n          code: ne.too_big,\n          maximum: i.value,\n          type: \"string\",\n          inclusive: !0,\n          exact: !1,\n          message: i.message\n        }), n.dirty());\n      else if (i.kind === \"length\") {\n        const c = e.data.length > i.value, f = e.data.length < i.value;\n        (c || f) && (o = this._getOrReturnCtx(e, o), c ? oe(o, {\n          code: ne.too_big,\n          maximum: i.value,\n          type: \"string\",\n          inclusive: !0,\n          exact: !0,\n          message: i.message\n        }) : f && oe(o, {\n          code: ne.too_small,\n          minimum: i.value,\n          type: \"string\",\n          inclusive: !0,\n          exact: !0,\n          message: i.message\n        }), n.dirty());\n      } else if (i.kind === \"email\")\n        gf.test(e.data) || (o = this._getOrReturnCtx(e, o), oe(o, {\n          validation: \"email\",\n          code: ne.invalid_string,\n          message: i.message\n        }), n.dirty());\n      else if (i.kind === \"emoji\")\n        Hs || (Hs = new RegExp(yf, \"u\")), Hs.test(e.data) || (o = this._getOrReturnCtx(e, o), oe(o, {\n          validation: \"emoji\",\n          code: ne.invalid_string,\n          message: i.message\n        }), n.dirty());\n      else if (i.kind === \"uuid\")\n        hf.test(e.data) || (o = this._getOrReturnCtx(e, o), oe(o, {\n          validation: \"uuid\",\n          code: ne.invalid_string,\n          message: i.message\n        }), n.dirty());\n      else if (i.kind === \"nanoid\")\n        df.test(e.data) || (o = this._getOrReturnCtx(e, o), oe(o, {\n          validation: \"nanoid\",\n          code: ne.invalid_string,\n          message: i.message\n        }), n.dirty());\n      else if (i.kind === \"cuid\")\n        cf.test(e.data) || (o = this._getOrReturnCtx(e, o), oe(o, {\n          validation: \"cuid\",\n          code: ne.invalid_string,\n          message: i.message\n        }), n.dirty());\n      else if (i.kind === \"cuid2\")\n        lf.test(e.data) || (o = this._getOrReturnCtx(e, o), oe(o, {\n          validation: \"cuid2\",\n          code: ne.invalid_string,\n          message: i.message\n        }), n.dirty());\n      else if (i.kind === \"ulid\")\n        ff.test(e.data) || (o = this._getOrReturnCtx(e, o), oe(o, {\n          validation: \"ulid\",\n          code: ne.invalid_string,\n          message: i.message\n        }), n.dirty());\n      else if (i.kind === \"url\")\n        try {\n          new URL(e.data);\n        } catch {\n          o = this._getOrReturnCtx(e, o), oe(o, {\n            validation: \"url\",\n            code: ne.invalid_string,\n            message: i.message\n          }), n.dirty();\n        }\n      else i.kind === \"regex\" ? (i.regex.lastIndex = 0, i.regex.test(e.data) || (o = this._getOrReturnCtx(e, o), oe(o, {\n        validation: \"regex\",\n        code: ne.invalid_string,\n        message: i.message\n      }), n.dirty())) : i.kind === \"trim\" ? e.data = e.data.trim() : i.kind === \"includes\" ? e.data.includes(i.value, i.position) || (o = this._getOrReturnCtx(e, o), oe(o, {\n        code: ne.invalid_string,\n        validation: { includes: i.value, position: i.position },\n        message: i.message\n      }), n.dirty()) : i.kind === \"toLowerCase\" ? e.data = e.data.toLowerCase() : i.kind === \"toUpperCase\" ? e.data = e.data.toUpperCase() : i.kind === \"startsWith\" ? e.data.startsWith(i.value) || (o = this._getOrReturnCtx(e, o), oe(o, {\n        code: ne.invalid_string,\n        validation: { startsWith: i.value },\n        message: i.message\n      }), n.dirty()) : i.kind === \"endsWith\" ? e.data.endsWith(i.value) || (o = this._getOrReturnCtx(e, o), oe(o, {\n        code: ne.invalid_string,\n        validation: { endsWith: i.value },\n        message: i.message\n      }), n.dirty()) : i.kind === \"datetime\" ? Ju(i).test(e.data) || (o = this._getOrReturnCtx(e, o), oe(o, {\n        code: ne.invalid_string,\n        validation: \"datetime\",\n        message: i.message\n      }), n.dirty()) : i.kind === \"date\" ? Mf.test(e.data) || (o = this._getOrReturnCtx(e, o), oe(o, {\n        code: ne.invalid_string,\n        validation: \"date\",\n        message: i.message\n      }), n.dirty()) : i.kind === \"time\" ? Cf(i).test(e.data) || (o = this._getOrReturnCtx(e, o), oe(o, {\n        code: ne.invalid_string,\n        validation: \"time\",\n        message: i.message\n      }), n.dirty()) : i.kind === \"duration\" ? mf.test(e.data) || (o = this._getOrReturnCtx(e, o), oe(o, {\n        validation: \"duration\",\n        code: ne.invalid_string,\n        message: i.message\n      }), n.dirty()) : i.kind === \"ip\" ? Sf(e.data, i.version) || (o = this._getOrReturnCtx(e, o), oe(o, {\n        validation: \"ip\",\n        code: ne.invalid_string,\n        message: i.message\n      }), n.dirty()) : i.kind === \"jwt\" ? Af(e.data, i.alg) || (o = this._getOrReturnCtx(e, o), oe(o, {\n        validation: \"jwt\",\n        code: ne.invalid_string,\n        message: i.message\n      }), n.dirty()) : i.kind === \"cidr\" ? kf(e.data, i.version) || (o = this._getOrReturnCtx(e, o), oe(o, {\n        validation: \"cidr\",\n        code: ne.invalid_string,\n        message: i.message\n      }), n.dirty()) : i.kind === \"base64\" ? _f.test(e.data) || (o = this._getOrReturnCtx(e, o), oe(o, {\n        validation: \"base64\",\n        code: ne.invalid_string,\n        message: i.message\n      }), n.dirty()) : i.kind === \"base64url\" ? Ef.test(e.data) || (o = this._getOrReturnCtx(e, o), oe(o, {\n        validation: \"base64url\",\n        code: ne.invalid_string,\n        message: i.message\n      }), n.dirty()) : nt.assertNever(i);\n    return { status: n.value, value: e.data };\n  }\n  _regex(e, r, n) {\n    return this.refinement((o) => e.test(o), {\n      validation: r,\n      code: ne.invalid_string,\n      ...ve.errToObj(n)\n    });\n  }\n  _addCheck(e) {\n    return new Wt({\n      ...this._def,\n      checks: [...this._def.checks, e]\n    });\n  }\n  email(e) {\n    return this._addCheck({ kind: \"email\", ...ve.errToObj(e) });\n  }\n  url(e) {\n    return this._addCheck({ kind: \"url\", ...ve.errToObj(e) });\n  }\n  emoji(e) {\n    return this._addCheck({ kind: \"emoji\", ...ve.errToObj(e) });\n  }\n  uuid(e) {\n    return this._addCheck({ kind: \"uuid\", ...ve.errToObj(e) });\n  }\n  nanoid(e) {\n    return this._addCheck({ kind: \"nanoid\", ...ve.errToObj(e) });\n  }\n  cuid(e) {\n    return this._addCheck({ kind: \"cuid\", ...ve.errToObj(e) });\n  }\n  cuid2(e) {\n    return this._addCheck({ kind: \"cuid2\", ...ve.errToObj(e) });\n  }\n  ulid(e) {\n    return this._addCheck({ kind: \"ulid\", ...ve.errToObj(e) });\n  }\n  base64(e) {\n    return this._addCheck({ kind: \"base64\", ...ve.errToObj(e) });\n  }\n  base64url(e) {\n    return this._addCheck({\n      kind: \"base64url\",\n      ...ve.errToObj(e)\n    });\n  }\n  jwt(e) {\n    return this._addCheck({ kind: \"jwt\", ...ve.errToObj(e) });\n  }\n  ip(e) {\n    return this._addCheck({ kind: \"ip\", ...ve.errToObj(e) });\n  }\n  cidr(e) {\n    return this._addCheck({ kind: \"cidr\", ...ve.errToObj(e) });\n  }\n  datetime(e) {\n    var r, n;\n    return typeof e == \"string\" ? this._addCheck({\n      kind: \"datetime\",\n      precision: null,\n      offset: !1,\n      local: !1,\n      message: e\n    }) : this._addCheck({\n      kind: \"datetime\",\n      precision: typeof (e == null ? void 0 : e.precision) > \"u\" ? null : e == null ? void 0 : e.precision,\n      offset: (r = e == null ? void 0 : e.offset) !== null && r !== void 0 ? r : !1,\n      local: (n = e == null ? void 0 : e.local) !== null && n !== void 0 ? n : !1,\n      ...ve.errToObj(e == null ? void 0 : e.message)\n    });\n  }\n  date(e) {\n    return this._addCheck({ kind: \"date\", message: e });\n  }\n  time(e) {\n    return typeof e == \"string\" ? this._addCheck({\n      kind: \"time\",\n      precision: null,\n      message: e\n    }) : this._addCheck({\n      kind: \"time\",\n      precision: typeof (e == null ? void 0 : e.precision) > \"u\" ? null : e == null ? void 0 : e.precision,\n      ...ve.errToObj(e == null ? void 0 : e.message)\n    });\n  }\n  duration(e) {\n    return this._addCheck({ kind: \"duration\", ...ve.errToObj(e) });\n  }\n  regex(e, r) {\n    return this._addCheck({\n      kind: \"regex\",\n      regex: e,\n      ...ve.errToObj(r)\n    });\n  }\n  includes(e, r) {\n    return this._addCheck({\n      kind: \"includes\",\n      value: e,\n      position: r == null ? void 0 : r.position,\n      ...ve.errToObj(r == null ? void 0 : r.message)\n    });\n  }\n  startsWith(e, r) {\n    return this._addCheck({\n      kind: \"startsWith\",\n      value: e,\n      ...ve.errToObj(r)\n    });\n  }\n  endsWith(e, r) {\n    return this._addCheck({\n      kind: \"endsWith\",\n      value: e,\n      ...ve.errToObj(r)\n    });\n  }\n  min(e, r) {\n    return this._addCheck({\n      kind: \"min\",\n      value: e,\n      ...ve.errToObj(r)\n    });\n  }\n  max(e, r) {\n    return this._addCheck({\n      kind: \"max\",\n      value: e,\n      ...ve.errToObj(r)\n    });\n  }\n  length(e, r) {\n    return this._addCheck({\n      kind: \"length\",\n      value: e,\n      ...ve.errToObj(r)\n    });\n  }\n  /**\n   * Equivalent to `.min(1)`\n   */\n  nonempty(e) {\n    return this.min(1, ve.errToObj(e));\n  }\n  trim() {\n    return new Wt({\n      ...this._def,\n      checks: [...this._def.checks, { kind: \"trim\" }]\n    });\n  }\n  toLowerCase() {\n    return new Wt({\n      ...this._def,\n      checks: [...this._def.checks, { kind: \"toLowerCase\" }]\n    });\n  }\n  toUpperCase() {\n    return new Wt({\n      ...this._def,\n      checks: [...this._def.checks, { kind: \"toUpperCase\" }]\n    });\n  }\n  get isDatetime() {\n    return !!this._def.checks.find((e) => e.kind === \"datetime\");\n  }\n  get isDate() {\n    return !!this._def.checks.find((e) => e.kind === \"date\");\n  }\n  get isTime() {\n    return !!this._def.checks.find((e) => e.kind === \"time\");\n  }\n  get isDuration() {\n    return !!this._def.checks.find((e) => e.kind === \"duration\");\n  }\n  get isEmail() {\n    return !!this._def.checks.find((e) => e.kind === \"email\");\n  }\n  get isURL() {\n    return !!this._def.checks.find((e) => e.kind === \"url\");\n  }\n  get isEmoji() {\n    return !!this._def.checks.find((e) => e.kind === \"emoji\");\n  }\n  get isUUID() {\n    return !!this._def.checks.find((e) => e.kind === \"uuid\");\n  }\n  get isNANOID() {\n    return !!this._def.checks.find((e) => e.kind === \"nanoid\");\n  }\n  get isCUID() {\n    return !!this._def.checks.find((e) => e.kind === \"cuid\");\n  }\n  get isCUID2() {\n    return !!this._def.checks.find((e) => e.kind === \"cuid2\");\n  }\n  get isULID() {\n    return !!this._def.checks.find((e) => e.kind === \"ulid\");\n  }\n  get isIP() {\n    return !!this._def.checks.find((e) => e.kind === \"ip\");\n  }\n  get isCIDR() {\n    return !!this._def.checks.find((e) => e.kind === \"cidr\");\n  }\n  get isBase64() {\n    return !!this._def.checks.find((e) => e.kind === \"base64\");\n  }\n  get isBase64url() {\n    return !!this._def.checks.find((e) => e.kind === \"base64url\");\n  }\n  get minLength() {\n    let e = null;\n    for (const r of this._def.checks)\n      r.kind === \"min\" && (e === null || r.value > e) && (e = r.value);\n    return e;\n  }\n  get maxLength() {\n    let e = null;\n    for (const r of this._def.checks)\n      r.kind === \"max\" && (e === null || r.value < e) && (e = r.value);\n    return e;\n  }\n}\nWt.create = (t) => {\n  var e;\n  return new Wt({\n    checks: [],\n    typeName: Ce.ZodString,\n    coerce: (e = t == null ? void 0 : t.coerce) !== null && e !== void 0 ? e : !1,\n    ...Te(t)\n  });\n};\nfunction If(t, e) {\n  const r = (t.toString().split(\".\")[1] || \"\").length, n = (e.toString().split(\".\")[1] || \"\").length, o = r > n ? r : n, i = parseInt(t.toFixed(o).replace(\".\", \"\")), c = parseInt(e.toFixed(o).replace(\".\", \"\"));\n  return i % c / Math.pow(10, o);\n}\nclass Lr extends Je {\n  constructor() {\n    super(...arguments), this.min = this.gte, this.max = this.lte, this.step = this.multipleOf;\n  }\n  _parse(e) {\n    if (this._def.coerce && (e.data = Number(e.data)), this._getType(e) !== le.number) {\n      const i = this._getOrReturnCtx(e);\n      return oe(i, {\n        code: ne.invalid_type,\n        expected: le.number,\n        received: i.parsedType\n      }), Ae;\n    }\n    let n;\n    const o = new Lt();\n    for (const i of this._def.checks)\n      i.kind === \"int\" ? nt.isInteger(e.data) || (n = this._getOrReturnCtx(e, n), oe(n, {\n        code: ne.invalid_type,\n        expected: \"integer\",\n        received: \"float\",\n        message: i.message\n      }), o.dirty()) : i.kind === \"min\" ? (i.inclusive ? e.data < i.value : e.data <= i.value) && (n = this._getOrReturnCtx(e, n), oe(n, {\n        code: ne.too_small,\n        minimum: i.value,\n        type: \"number\",\n        inclusive: i.inclusive,\n        exact: !1,\n        message: i.message\n      }), o.dirty()) : i.kind === \"max\" ? (i.inclusive ? e.data > i.value : e.data >= i.value) && (n = this._getOrReturnCtx(e, n), oe(n, {\n        code: ne.too_big,\n        maximum: i.value,\n        type: \"number\",\n        inclusive: i.inclusive,\n        exact: !1,\n        message: i.message\n      }), o.dirty()) : i.kind === \"multipleOf\" ? If(e.data, i.value) !== 0 && (n = this._getOrReturnCtx(e, n), oe(n, {\n        code: ne.not_multiple_of,\n        multipleOf: i.value,\n        message: i.message\n      }), o.dirty()) : i.kind === \"finite\" ? Number.isFinite(e.data) || (n = this._getOrReturnCtx(e, n), oe(n, {\n        code: ne.not_finite,\n        message: i.message\n      }), o.dirty()) : nt.assertNever(i);\n    return { status: o.value, value: e.data };\n  }\n  gte(e, r) {\n    return this.setLimit(\"min\", e, !0, ve.toString(r));\n  }\n  gt(e, r) {\n    return this.setLimit(\"min\", e, !1, ve.toString(r));\n  }\n  lte(e, r) {\n    return this.setLimit(\"max\", e, !0, ve.toString(r));\n  }\n  lt(e, r) {\n    return this.setLimit(\"max\", e, !1, ve.toString(r));\n  }\n  setLimit(e, r, n, o) {\n    return new Lr({\n      ...this._def,\n      checks: [\n        ...this._def.checks,\n        {\n          kind: e,\n          value: r,\n          inclusive: n,\n          message: ve.toString(o)\n        }\n      ]\n    });\n  }\n  _addCheck(e) {\n    return new Lr({\n      ...this._def,\n      checks: [...this._def.checks, e]\n    });\n  }\n  int(e) {\n    return this._addCheck({\n      kind: \"int\",\n      message: ve.toString(e)\n    });\n  }\n  positive(e) {\n    return this._addCheck({\n      kind: \"min\",\n      value: 0,\n      inclusive: !1,\n      message: ve.toString(e)\n    });\n  }\n  negative(e) {\n    return this._addCheck({\n      kind: \"max\",\n      value: 0,\n      inclusive: !1,\n      message: ve.toString(e)\n    });\n  }\n  nonpositive(e) {\n    return this._addCheck({\n      kind: \"max\",\n      value: 0,\n      inclusive: !0,\n      message: ve.toString(e)\n    });\n  }\n  nonnegative(e) {\n    return this._addCheck({\n      kind: \"min\",\n      value: 0,\n      inclusive: !0,\n      message: ve.toString(e)\n    });\n  }\n  multipleOf(e, r) {\n    return this._addCheck({\n      kind: \"multipleOf\",\n      value: e,\n      message: ve.toString(r)\n    });\n  }\n  finite(e) {\n    return this._addCheck({\n      kind: \"finite\",\n      message: ve.toString(e)\n    });\n  }\n  safe(e) {\n    return this._addCheck({\n      kind: \"min\",\n      inclusive: !0,\n      value: Number.MIN_SAFE_INTEGER,\n      message: ve.toString(e)\n    })._addCheck({\n      kind: \"max\",\n      inclusive: !0,\n      value: Number.MAX_SAFE_INTEGER,\n      message: ve.toString(e)\n    });\n  }\n  get minValue() {\n    let e = null;\n    for (const r of this._def.checks)\n      r.kind === \"min\" && (e === null || r.value > e) && (e = r.value);\n    return e;\n  }\n  get maxValue() {\n    let e = null;\n    for (const r of this._def.checks)\n      r.kind === \"max\" && (e === null || r.value < e) && (e = r.value);\n    return e;\n  }\n  get isInt() {\n    return !!this._def.checks.find((e) => e.kind === \"int\" || e.kind === \"multipleOf\" && nt.isInteger(e.value));\n  }\n  get isFinite() {\n    let e = null, r = null;\n    for (const n of this._def.checks) {\n      if (n.kind === \"finite\" || n.kind === \"int\" || n.kind === \"multipleOf\")\n        return !0;\n      n.kind === \"min\" ? (r === null || n.value > r) && (r = n.value) : n.kind === \"max\" && (e === null || n.value < e) && (e = n.value);\n    }\n    return Number.isFinite(r) && Number.isFinite(e);\n  }\n}\nLr.create = (t) => new Lr({\n  checks: [],\n  typeName: Ce.ZodNumber,\n  coerce: (t == null ? void 0 : t.coerce) || !1,\n  ...Te(t)\n});\nclass Or extends Je {\n  constructor() {\n    super(...arguments), this.min = this.gte, this.max = this.lte;\n  }\n  _parse(e) {\n    if (this._def.coerce)\n      try {\n        e.data = BigInt(e.data);\n      } catch {\n        return this._getInvalidInput(e);\n      }\n    if (this._getType(e) !== le.bigint)\n      return this._getInvalidInput(e);\n    let n;\n    const o = new Lt();\n    for (const i of this._def.checks)\n      i.kind === \"min\" ? (i.inclusive ? e.data < i.value : e.data <= i.value) && (n = this._getOrReturnCtx(e, n), oe(n, {\n        code: ne.too_small,\n        type: \"bigint\",\n        minimum: i.value,\n        inclusive: i.inclusive,\n        message: i.message\n      }), o.dirty()) : i.kind === \"max\" ? (i.inclusive ? e.data > i.value : e.data >= i.value) && (n = this._getOrReturnCtx(e, n), oe(n, {\n        code: ne.too_big,\n        type: \"bigint\",\n        maximum: i.value,\n        inclusive: i.inclusive,\n        message: i.message\n      }), o.dirty()) : i.kind === \"multipleOf\" ? e.data % i.value !== BigInt(0) && (n = this._getOrReturnCtx(e, n), oe(n, {\n        code: ne.not_multiple_of,\n        multipleOf: i.value,\n        message: i.message\n      }), o.dirty()) : nt.assertNever(i);\n    return { status: o.value, value: e.data };\n  }\n  _getInvalidInput(e) {\n    const r = this._getOrReturnCtx(e);\n    return oe(r, {\n      code: ne.invalid_type,\n      expected: le.bigint,\n      received: r.parsedType\n    }), Ae;\n  }\n  gte(e, r) {\n    return this.setLimit(\"min\", e, !0, ve.toString(r));\n  }\n  gt(e, r) {\n    return this.setLimit(\"min\", e, !1, ve.toString(r));\n  }\n  lte(e, r) {\n    return this.setLimit(\"max\", e, !0, ve.toString(r));\n  }\n  lt(e, r) {\n    return this.setLimit(\"max\", e, !1, ve.toString(r));\n  }\n  setLimit(e, r, n, o) {\n    return new Or({\n      ...this._def,\n      checks: [\n        ...this._def.checks,\n        {\n          kind: e,\n          value: r,\n          inclusive: n,\n          message: ve.toString(o)\n        }\n      ]\n    });\n  }\n  _addCheck(e) {\n    return new Or({\n      ...this._def,\n      checks: [...this._def.checks, e]\n    });\n  }\n  positive(e) {\n    return this._addCheck({\n      kind: \"min\",\n      value: BigInt(0),\n      inclusive: !1,\n      message: ve.toString(e)\n    });\n  }\n  negative(e) {\n    return this._addCheck({\n      kind: \"max\",\n      value: BigInt(0),\n      inclusive: !1,\n      message: ve.toString(e)\n    });\n  }\n  nonpositive(e) {\n    return this._addCheck({\n      kind: \"max\",\n      value: BigInt(0),\n      inclusive: !0,\n      message: ve.toString(e)\n    });\n  }\n  nonnegative(e) {\n    return this._addCheck({\n      kind: \"min\",\n      value: BigInt(0),\n      inclusive: !0,\n      message: ve.toString(e)\n    });\n  }\n  multipleOf(e, r) {\n    return this._addCheck({\n      kind: \"multipleOf\",\n      value: e,\n      message: ve.toString(r)\n    });\n  }\n  get minValue() {\n    let e = null;\n    for (const r of this._def.checks)\n      r.kind === \"min\" && (e === null || r.value > e) && (e = r.value);\n    return e;\n  }\n  get maxValue() {\n    let e = null;\n    for (const r of this._def.checks)\n      r.kind === \"max\" && (e === null || r.value < e) && (e = r.value);\n    return e;\n  }\n}\nOr.create = (t) => {\n  var e;\n  return new Or({\n    checks: [],\n    typeName: Ce.ZodBigInt,\n    coerce: (e = t == null ? void 0 : t.coerce) !== null && e !== void 0 ? e : !1,\n    ...Te(t)\n  });\n};\nclass ai extends Je {\n  _parse(e) {\n    if (this._def.coerce && (e.data = !!e.data), this._getType(e) !== le.boolean) {\n      const n = this._getOrReturnCtx(e);\n      return oe(n, {\n        code: ne.invalid_type,\n        expected: le.boolean,\n        received: n.parsedType\n      }), Ae;\n    }\n    return jt(e.data);\n  }\n}\nai.create = (t) => new ai({\n  typeName: Ce.ZodBoolean,\n  coerce: (t == null ? void 0 : t.coerce) || !1,\n  ...Te(t)\n});\nclass cn extends Je {\n  _parse(e) {\n    if (this._def.coerce && (e.data = new Date(e.data)), this._getType(e) !== le.date) {\n      const i = this._getOrReturnCtx(e);\n      return oe(i, {\n        code: ne.invalid_type,\n        expected: le.date,\n        received: i.parsedType\n      }), Ae;\n    }\n    if (isNaN(e.data.getTime())) {\n      const i = this._getOrReturnCtx(e);\n      return oe(i, {\n        code: ne.invalid_date\n      }), Ae;\n    }\n    const n = new Lt();\n    let o;\n    for (const i of this._def.checks)\n      i.kind === \"min\" ? e.data.getTime() < i.value && (o = this._getOrReturnCtx(e, o), oe(o, {\n        code: ne.too_small,\n        message: i.message,\n        inclusive: !0,\n        exact: !1,\n        minimum: i.value,\n        type: \"date\"\n      }), n.dirty()) : i.kind === \"max\" ? e.data.getTime() > i.value && (o = this._getOrReturnCtx(e, o), oe(o, {\n        code: ne.too_big,\n        message: i.message,\n        inclusive: !0,\n        exact: !1,\n        maximum: i.value,\n        type: \"date\"\n      }), n.dirty()) : nt.assertNever(i);\n    return {\n      status: n.value,\n      value: new Date(e.data.getTime())\n    };\n  }\n  _addCheck(e) {\n    return new cn({\n      ...this._def,\n      checks: [...this._def.checks, e]\n    });\n  }\n  min(e, r) {\n    return this._addCheck({\n      kind: \"min\",\n      value: e.getTime(),\n      message: ve.toString(r)\n    });\n  }\n  max(e, r) {\n    return this._addCheck({\n      kind: \"max\",\n      value: e.getTime(),\n      message: ve.toString(r)\n    });\n  }\n  get minDate() {\n    let e = null;\n    for (const r of this._def.checks)\n      r.kind === \"min\" && (e === null || r.value > e) && (e = r.value);\n    return e != null ? new Date(e) : null;\n  }\n  get maxDate() {\n    let e = null;\n    for (const r of this._def.checks)\n      r.kind === \"max\" && (e === null || r.value < e) && (e = r.value);\n    return e != null ? new Date(e) : null;\n  }\n}\ncn.create = (t) => new cn({\n  checks: [],\n  coerce: (t == null ? void 0 : t.coerce) || !1,\n  typeName: Ce.ZodDate,\n  ...Te(t)\n});\nclass ls extends Je {\n  _parse(e) {\n    if (this._getType(e) !== le.symbol) {\n      const n = this._getOrReturnCtx(e);\n      return oe(n, {\n        code: ne.invalid_type,\n        expected: le.symbol,\n        received: n.parsedType\n      }), Ae;\n    }\n    return jt(e.data);\n  }\n}\nls.create = (t) => new ls({\n  typeName: Ce.ZodSymbol,\n  ...Te(t)\n});\nclass ui extends Je {\n  _parse(e) {\n    if (this._getType(e) !== le.undefined) {\n      const n = this._getOrReturnCtx(e);\n      return oe(n, {\n        code: ne.invalid_type,\n        expected: le.undefined,\n        received: n.parsedType\n      }), Ae;\n    }\n    return jt(e.data);\n  }\n}\nui.create = (t) => new ui({\n  typeName: Ce.ZodUndefined,\n  ...Te(t)\n});\nclass ci extends Je {\n  _parse(e) {\n    if (this._getType(e) !== le.null) {\n      const n = this._getOrReturnCtx(e);\n      return oe(n, {\n        code: ne.invalid_type,\n        expected: le.null,\n        received: n.parsedType\n      }), Ae;\n    }\n    return jt(e.data);\n  }\n}\nci.create = (t) => new ci({\n  typeName: Ce.ZodNull,\n  ...Te(t)\n});\nclass Tn extends Je {\n  constructor() {\n    super(...arguments), this._any = !0;\n  }\n  _parse(e) {\n    return jt(e.data);\n  }\n}\nTn.create = (t) => new Tn({\n  typeName: Ce.ZodAny,\n  ...Te(t)\n});\nclass an extends Je {\n  constructor() {\n    super(...arguments), this._unknown = !0;\n  }\n  _parse(e) {\n    return jt(e.data);\n  }\n}\nan.create = (t) => new an({\n  typeName: Ce.ZodUnknown,\n  ...Te(t)\n});\nclass xr extends Je {\n  _parse(e) {\n    const r = this._getOrReturnCtx(e);\n    return oe(r, {\n      code: ne.invalid_type,\n      expected: le.never,\n      received: r.parsedType\n    }), Ae;\n  }\n}\nxr.create = (t) => new xr({\n  typeName: Ce.ZodNever,\n  ...Te(t)\n});\nclass fs extends Je {\n  _parse(e) {\n    if (this._getType(e) !== le.undefined) {\n      const n = this._getOrReturnCtx(e);\n      return oe(n, {\n        code: ne.invalid_type,\n        expected: le.void,\n        received: n.parsedType\n      }), Ae;\n    }\n    return jt(e.data);\n  }\n}\nfs.create = (t) => new fs({\n  typeName: Ce.ZodVoid,\n  ...Te(t)\n});\nclass Gt extends Je {\n  _parse(e) {\n    const { ctx: r, status: n } = this._processInputParams(e), o = this._def;\n    if (r.parsedType !== le.array)\n      return oe(r, {\n        code: ne.invalid_type,\n        expected: le.array,\n        received: r.parsedType\n      }), Ae;\n    if (o.exactLength !== null) {\n      const c = r.data.length > o.exactLength.value, f = r.data.length < o.exactLength.value;\n      (c || f) && (oe(r, {\n        code: c ? ne.too_big : ne.too_small,\n        minimum: f ? o.exactLength.value : void 0,\n        maximum: c ? o.exactLength.value : void 0,\n        type: \"array\",\n        inclusive: !0,\n        exact: !0,\n        message: o.exactLength.message\n      }), n.dirty());\n    }\n    if (o.minLength !== null && r.data.length < o.minLength.value && (oe(r, {\n      code: ne.too_small,\n      minimum: o.minLength.value,\n      type: \"array\",\n      inclusive: !0,\n      exact: !1,\n      message: o.minLength.message\n    }), n.dirty()), o.maxLength !== null && r.data.length > o.maxLength.value && (oe(r, {\n      code: ne.too_big,\n      maximum: o.maxLength.value,\n      type: \"array\",\n      inclusive: !0,\n      exact: !1,\n      message: o.maxLength.message\n    }), n.dirty()), r.common.async)\n      return Promise.all([...r.data].map((c, f) => o.type._parseAsync(new sr(r, c, r.path, f)))).then((c) => Lt.mergeArray(n, c));\n    const i = [...r.data].map((c, f) => o.type._parseSync(new sr(r, c, r.path, f)));\n    return Lt.mergeArray(n, i);\n  }\n  get element() {\n    return this._def.type;\n  }\n  min(e, r) {\n    return new Gt({\n      ...this._def,\n      minLength: { value: e, message: ve.toString(r) }\n    });\n  }\n  max(e, r) {\n    return new Gt({\n      ...this._def,\n      maxLength: { value: e, message: ve.toString(r) }\n    });\n  }\n  length(e, r) {\n    return new Gt({\n      ...this._def,\n      exactLength: { value: e, message: ve.toString(r) }\n    });\n  }\n  nonempty(e) {\n    return this.min(1, e);\n  }\n}\nGt.create = (t, e) => new Gt({\n  type: t,\n  minLength: null,\n  maxLength: null,\n  exactLength: null,\n  typeName: Ce.ZodArray,\n  ...Te(e)\n});\nfunction En(t) {\n  if (t instanceof ht) {\n    const e = {};\n    for (const r in t.shape) {\n      const n = t.shape[r];\n      e[r] = ir.create(En(n));\n    }\n    return new ht({\n      ...t._def,\n      shape: () => e\n    });\n  } else return t instanceof Gt ? new Gt({\n    ...t._def,\n    type: En(t.element)\n  }) : t instanceof ir ? ir.create(En(t.unwrap())) : t instanceof jr ? jr.create(En(t.unwrap())) : t instanceof or ? or.create(t.items.map((e) => En(e))) : t;\n}\nclass ht extends Je {\n  constructor() {\n    super(...arguments), this._cached = null, this.nonstrict = this.passthrough, this.augment = this.extend;\n  }\n  _getCached() {\n    if (this._cached !== null)\n      return this._cached;\n    const e = this._def.shape(), r = nt.objectKeys(e);\n    return this._cached = { shape: e, keys: r };\n  }\n  _parse(e) {\n    if (this._getType(e) !== le.object) {\n      const x = this._getOrReturnCtx(e);\n      return oe(x, {\n        code: ne.invalid_type,\n        expected: le.object,\n        received: x.parsedType\n      }), Ae;\n    }\n    const { status: n, ctx: o } = this._processInputParams(e), { shape: i, keys: c } = this._getCached(), f = [];\n    if (!(this._def.catchall instanceof xr && this._def.unknownKeys === \"strip\"))\n      for (const x in o.data)\n        c.includes(x) || f.push(x);\n    const v = [];\n    for (const x of c) {\n      const b = i[x], S = o.data[x];\n      v.push({\n        key: { status: \"valid\", value: x },\n        value: b._parse(new sr(o, S, o.path, x)),\n        alwaysSet: x in o.data\n      });\n    }\n    if (this._def.catchall instanceof xr) {\n      const x = this._def.unknownKeys;\n      if (x === \"passthrough\")\n        for (const b of f)\n          v.push({\n            key: { status: \"valid\", value: b },\n            value: { status: \"valid\", value: o.data[b] }\n          });\n      else if (x === \"strict\")\n        f.length > 0 && (oe(o, {\n          code: ne.unrecognized_keys,\n          keys: f\n        }), n.dirty());\n      else if (x !== \"strip\") throw new Error(\"Internal ZodObject error: invalid unknownKeys value.\");\n    } else {\n      const x = this._def.catchall;\n      for (const b of f) {\n        const S = o.data[b];\n        v.push({\n          key: { status: \"valid\", value: b },\n          value: x._parse(\n            new sr(o, S, o.path, b)\n            //, ctx.child(key), value, getParsedType(value)\n          ),\n          alwaysSet: b in o.data\n        });\n      }\n    }\n    return o.common.async ? Promise.resolve().then(async () => {\n      const x = [];\n      for (const b of v) {\n        const S = await b.key, T = await b.value;\n        x.push({\n          key: S,\n          value: T,\n          alwaysSet: b.alwaysSet\n        });\n      }\n      return x;\n    }).then((x) => Lt.mergeObjectSync(n, x)) : Lt.mergeObjectSync(n, v);\n  }\n  get shape() {\n    return this._def.shape();\n  }\n  strict(e) {\n    return ve.errToObj, new ht({\n      ...this._def,\n      unknownKeys: \"strict\",\n      ...e !== void 0 ? {\n        errorMap: (r, n) => {\n          var o, i, c, f;\n          const v = (c = (i = (o = this._def).errorMap) === null || i === void 0 ? void 0 : i.call(o, r, n).message) !== null && c !== void 0 ? c : n.defaultError;\n          return r.code === \"unrecognized_keys\" ? {\n            message: (f = ve.errToObj(e).message) !== null && f !== void 0 ? f : v\n          } : {\n            message: v\n          };\n        }\n      } : {}\n    });\n  }\n  strip() {\n    return new ht({\n      ...this._def,\n      unknownKeys: \"strip\"\n    });\n  }\n  passthrough() {\n    return new ht({\n      ...this._def,\n      unknownKeys: \"passthrough\"\n    });\n  }\n  // const AugmentFactory =\n  //   <Def extends ZodObjectDef>(def: Def) =>\n  //   <Augmentation extends ZodRawShape>(\n  //     augmentation: Augmentation\n  //   ): ZodObject<\n  //     extendShape<ReturnType<Def[\"shape\"]>, Augmentation>,\n  //     Def[\"unknownKeys\"],\n  //     Def[\"catchall\"]\n  //   > => {\n  //     return new ZodObject({\n  //       ...def,\n  //       shape: () => ({\n  //         ...def.shape(),\n  //         ...augmentation,\n  //       }),\n  //     }) as any;\n  //   };\n  extend(e) {\n    return new ht({\n      ...this._def,\n      shape: () => ({\n        ...this._def.shape(),\n        ...e\n      })\n    });\n  }\n  /**\n   * Prior to zod@1.0.12 there was a bug in the\n   * inferred type of merged objects. Please\n   * upgrade if you are experiencing issues.\n   */\n  merge(e) {\n    return new ht({\n      unknownKeys: e._def.unknownKeys,\n      catchall: e._def.catchall,\n      shape: () => ({\n        ...this._def.shape(),\n        ...e._def.shape()\n      }),\n      typeName: Ce.ZodObject\n    });\n  }\n  // merge<\n  //   Incoming extends AnyZodObject,\n  //   Augmentation extends Incoming[\"shape\"],\n  //   NewOutput extends {\n  //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation\n  //       ? Augmentation[k][\"_output\"]\n  //       : k extends keyof Output\n  //       ? Output[k]\n  //       : never;\n  //   },\n  //   NewInput extends {\n  //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation\n  //       ? Augmentation[k][\"_input\"]\n  //       : k extends keyof Input\n  //       ? Input[k]\n  //       : never;\n  //   }\n  // >(\n  //   merging: Incoming\n  // ): ZodObject<\n  //   extendShape<T, ReturnType<Incoming[\"_def\"][\"shape\"]>>,\n  //   Incoming[\"_def\"][\"unknownKeys\"],\n  //   Incoming[\"_def\"][\"catchall\"],\n  //   NewOutput,\n  //   NewInput\n  // > {\n  //   const merged: any = new ZodObject({\n  //     unknownKeys: merging._def.unknownKeys,\n  //     catchall: merging._def.catchall,\n  //     shape: () =>\n  //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),\n  //     typeName: ZodFirstPartyTypeKind.ZodObject,\n  //   }) as any;\n  //   return merged;\n  // }\n  setKey(e, r) {\n    return this.augment({ [e]: r });\n  }\n  // merge<Incoming extends AnyZodObject>(\n  //   merging: Incoming\n  // ): //ZodObject<T & Incoming[\"_shape\"], UnknownKeys, Catchall> = (merging) => {\n  // ZodObject<\n  //   extendShape<T, ReturnType<Incoming[\"_def\"][\"shape\"]>>,\n  //   Incoming[\"_def\"][\"unknownKeys\"],\n  //   Incoming[\"_def\"][\"catchall\"]\n  // > {\n  //   // const mergedShape = objectUtil.mergeShapes(\n  //   //   this._def.shape(),\n  //   //   merging._def.shape()\n  //   // );\n  //   const merged: any = new ZodObject({\n  //     unknownKeys: merging._def.unknownKeys,\n  //     catchall: merging._def.catchall,\n  //     shape: () =>\n  //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),\n  //     typeName: ZodFirstPartyTypeKind.ZodObject,\n  //   }) as any;\n  //   return merged;\n  // }\n  catchall(e) {\n    return new ht({\n      ...this._def,\n      catchall: e\n    });\n  }\n  pick(e) {\n    const r = {};\n    return nt.objectKeys(e).forEach((n) => {\n      e[n] && this.shape[n] && (r[n] = this.shape[n]);\n    }), new ht({\n      ...this._def,\n      shape: () => r\n    });\n  }\n  omit(e) {\n    const r = {};\n    return nt.objectKeys(this.shape).forEach((n) => {\n      e[n] || (r[n] = this.shape[n]);\n    }), new ht({\n      ...this._def,\n      shape: () => r\n    });\n  }\n  /**\n   * @deprecated\n   */\n  deepPartial() {\n    return En(this);\n  }\n  partial(e) {\n    const r = {};\n    return nt.objectKeys(this.shape).forEach((n) => {\n      const o = this.shape[n];\n      e && !e[n] ? r[n] = o : r[n] = o.optional();\n    }), new ht({\n      ...this._def,\n      shape: () => r\n    });\n  }\n  required(e) {\n    const r = {};\n    return nt.objectKeys(this.shape).forEach((n) => {\n      if (e && !e[n])\n        r[n] = this.shape[n];\n      else {\n        let i = this.shape[n];\n        for (; i instanceof ir; )\n          i = i._def.innerType;\n        r[n] = i;\n      }\n    }), new ht({\n      ...this._def,\n      shape: () => r\n    });\n  }\n  keyof() {\n    return Xu(nt.objectKeys(this.shape));\n  }\n}\nht.create = (t, e) => new ht({\n  shape: () => t,\n  unknownKeys: \"strip\",\n  catchall: xr.create(),\n  typeName: Ce.ZodObject,\n  ...Te(e)\n});\nht.strictCreate = (t, e) => new ht({\n  shape: () => t,\n  unknownKeys: \"strict\",\n  catchall: xr.create(),\n  typeName: Ce.ZodObject,\n  ...Te(e)\n});\nht.lazycreate = (t, e) => new ht({\n  shape: t,\n  unknownKeys: \"strip\",\n  catchall: xr.create(),\n  typeName: Ce.ZodObject,\n  ...Te(e)\n});\nclass li extends Je {\n  _parse(e) {\n    const { ctx: r } = this._processInputParams(e), n = this._def.options;\n    function o(i) {\n      for (const f of i)\n        if (f.result.status === \"valid\")\n          return f.result;\n      for (const f of i)\n        if (f.result.status === \"dirty\")\n          return r.common.issues.push(...f.ctx.common.issues), f.result;\n      const c = i.map((f) => new Zt(f.ctx.common.issues));\n      return oe(r, {\n        code: ne.invalid_union,\n        unionErrors: c\n      }), Ae;\n    }\n    if (r.common.async)\n      return Promise.all(n.map(async (i) => {\n        const c = {\n          ...r,\n          common: {\n            ...r.common,\n            issues: []\n          },\n          parent: null\n        };\n        return {\n          result: await i._parseAsync({\n            data: r.data,\n            path: r.path,\n            parent: c\n          }),\n          ctx: c\n        };\n      })).then(o);\n    {\n      let i;\n      const c = [];\n      for (const v of n) {\n        const x = {\n          ...r,\n          common: {\n            ...r.common,\n            issues: []\n          },\n          parent: null\n        }, b = v._parseSync({\n          data: r.data,\n          path: r.path,\n          parent: x\n        });\n        if (b.status === \"valid\")\n          return b;\n        b.status === \"dirty\" && !i && (i = { result: b, ctx: x }), x.common.issues.length && c.push(x.common.issues);\n      }\n      if (i)\n        return r.common.issues.push(...i.ctx.common.issues), i.result;\n      const f = c.map((v) => new Zt(v));\n      return oe(r, {\n        code: ne.invalid_union,\n        unionErrors: f\n      }), Ae;\n    }\n  }\n  get options() {\n    return this._def.options;\n  }\n}\nli.create = (t, e) => new li({\n  options: t,\n  typeName: Ce.ZodUnion,\n  ...Te(e)\n});\nconst dr = (t) => t instanceof di ? dr(t.schema) : t instanceof Yt ? dr(t.innerType()) : t instanceof pi ? [t.value] : t instanceof Nr ? t.options : t instanceof mi ? nt.objectValues(t.enum) : t instanceof gi ? dr(t._def.innerType) : t instanceof ui ? [void 0] : t instanceof ci ? [null] : t instanceof ir ? [void 0, ...dr(t.unwrap())] : t instanceof jr ? [null, ...dr(t.unwrap())] : t instanceof ra || t instanceof vi ? dr(t.unwrap()) : t instanceof yi ? dr(t._def.innerType) : [];\nclass Ts extends Je {\n  _parse(e) {\n    const { ctx: r } = this._processInputParams(e);\n    if (r.parsedType !== le.object)\n      return oe(r, {\n        code: ne.invalid_type,\n        expected: le.object,\n        received: r.parsedType\n      }), Ae;\n    const n = this.discriminator, o = r.data[n], i = this.optionsMap.get(o);\n    return i ? r.common.async ? i._parseAsync({\n      data: r.data,\n      path: r.path,\n      parent: r\n    }) : i._parseSync({\n      data: r.data,\n      path: r.path,\n      parent: r\n    }) : (oe(r, {\n      code: ne.invalid_union_discriminator,\n      options: Array.from(this.optionsMap.keys()),\n      path: [n]\n    }), Ae);\n  }\n  get discriminator() {\n    return this._def.discriminator;\n  }\n  get options() {\n    return this._def.options;\n  }\n  get optionsMap() {\n    return this._def.optionsMap;\n  }\n  /**\n   * The constructor of the discriminated union schema. Its behaviour is very similar to that of the normal z.union() constructor.\n   * However, it only allows a union of objects, all of which need to share a discriminator property. This property must\n   * have a different value for each object in the union.\n   * @param discriminator the name of the discriminator property\n   * @param types an array of object schemas\n   * @param params\n   */\n  static create(e, r, n) {\n    const o = /* @__PURE__ */ new Map();\n    for (const i of r) {\n      const c = dr(i.shape[e]);\n      if (!c.length)\n        throw new Error(`A discriminator value for key \\`${e}\\` could not be extracted from all schema options`);\n      for (const f of c) {\n        if (o.has(f))\n          throw new Error(`Discriminator property ${String(e)} has duplicate value ${String(f)}`);\n        o.set(f, i);\n      }\n    }\n    return new Ts({\n      typeName: Ce.ZodDiscriminatedUnion,\n      discriminator: e,\n      options: r,\n      optionsMap: o,\n      ...Te(n)\n    });\n  }\n}\nfunction Ro(t, e) {\n  const r = pr(t), n = pr(e);\n  if (t === e)\n    return { valid: !0, data: t };\n  if (r === le.object && n === le.object) {\n    const o = nt.objectKeys(e), i = nt.objectKeys(t).filter((f) => o.indexOf(f) !== -1), c = { ...t, ...e };\n    for (const f of i) {\n      const v = Ro(t[f], e[f]);\n      if (!v.valid)\n        return { valid: !1 };\n      c[f] = v.data;\n    }\n    return { valid: !0, data: c };\n  } else if (r === le.array && n === le.array) {\n    if (t.length !== e.length)\n      return { valid: !1 };\n    const o = [];\n    for (let i = 0; i < t.length; i++) {\n      const c = t[i], f = e[i], v = Ro(c, f);\n      if (!v.valid)\n        return { valid: !1 };\n      o.push(v.data);\n    }\n    return { valid: !0, data: o };\n  } else return r === le.date && n === le.date && +t == +e ? { valid: !0, data: t } : { valid: !1 };\n}\nclass fi extends Je {\n  _parse(e) {\n    const { status: r, ctx: n } = this._processInputParams(e), o = (i, c) => {\n      if (Io(i) || Io(c))\n        return Ae;\n      const f = Ro(i.value, c.value);\n      return f.valid ? ((Bo(i) || Bo(c)) && r.dirty(), { status: r.value, value: f.data }) : (oe(n, {\n        code: ne.invalid_intersection_types\n      }), Ae);\n    };\n    return n.common.async ? Promise.all([\n      this._def.left._parseAsync({\n        data: n.data,\n        path: n.path,\n        parent: n\n      }),\n      this._def.right._parseAsync({\n        data: n.data,\n        path: n.path,\n        parent: n\n      })\n    ]).then(([i, c]) => o(i, c)) : o(this._def.left._parseSync({\n      data: n.data,\n      path: n.path,\n      parent: n\n    }), this._def.right._parseSync({\n      data: n.data,\n      path: n.path,\n      parent: n\n    }));\n  }\n}\nfi.create = (t, e, r) => new fi({\n  left: t,\n  right: e,\n  typeName: Ce.ZodIntersection,\n  ...Te(r)\n});\nclass or extends Je {\n  _parse(e) {\n    const { status: r, ctx: n } = this._processInputParams(e);\n    if (n.parsedType !== le.array)\n      return oe(n, {\n        code: ne.invalid_type,\n        expected: le.array,\n        received: n.parsedType\n      }), Ae;\n    if (n.data.length < this._def.items.length)\n      return oe(n, {\n        code: ne.too_small,\n        minimum: this._def.items.length,\n        inclusive: !0,\n        exact: !1,\n        type: \"array\"\n      }), Ae;\n    !this._def.rest && n.data.length > this._def.items.length && (oe(n, {\n      code: ne.too_big,\n      maximum: this._def.items.length,\n      inclusive: !0,\n      exact: !1,\n      type: \"array\"\n    }), r.dirty());\n    const i = [...n.data].map((c, f) => {\n      const v = this._def.items[f] || this._def.rest;\n      return v ? v._parse(new sr(n, c, n.path, f)) : null;\n    }).filter((c) => !!c);\n    return n.common.async ? Promise.all(i).then((c) => Lt.mergeArray(r, c)) : Lt.mergeArray(r, i);\n  }\n  get items() {\n    return this._def.items;\n  }\n  rest(e) {\n    return new or({\n      ...this._def,\n      rest: e\n    });\n  }\n}\nor.create = (t, e) => {\n  if (!Array.isArray(t))\n    throw new Error(\"You must pass an array of schemas to z.tuple([ ... ])\");\n  return new or({\n    items: t,\n    typeName: Ce.ZodTuple,\n    rest: null,\n    ...Te(e)\n  });\n};\nclass hi extends Je {\n  get keySchema() {\n    return this._def.keyType;\n  }\n  get valueSchema() {\n    return this._def.valueType;\n  }\n  _parse(e) {\n    const { status: r, ctx: n } = this._processInputParams(e);\n    if (n.parsedType !== le.object)\n      return oe(n, {\n        code: ne.invalid_type,\n        expected: le.object,\n        received: n.parsedType\n      }), Ae;\n    const o = [], i = this._def.keyType, c = this._def.valueType;\n    for (const f in n.data)\n      o.push({\n        key: i._parse(new sr(n, f, n.path, f)),\n        value: c._parse(new sr(n, n.data[f], n.path, f)),\n        alwaysSet: f in n.data\n      });\n    return n.common.async ? Lt.mergeObjectAsync(r, o) : Lt.mergeObjectSync(r, o);\n  }\n  get element() {\n    return this._def.valueType;\n  }\n  static create(e, r, n) {\n    return r instanceof Je ? new hi({\n      keyType: e,\n      valueType: r,\n      typeName: Ce.ZodRecord,\n      ...Te(n)\n    }) : new hi({\n      keyType: Wt.create(),\n      valueType: e,\n      typeName: Ce.ZodRecord,\n      ...Te(r)\n    });\n  }\n}\nclass hs extends Je {\n  get keySchema() {\n    return this._def.keyType;\n  }\n  get valueSchema() {\n    return this._def.valueType;\n  }\n  _parse(e) {\n    const { status: r, ctx: n } = this._processInputParams(e);\n    if (n.parsedType !== le.map)\n      return oe(n, {\n        code: ne.invalid_type,\n        expected: le.map,\n        received: n.parsedType\n      }), Ae;\n    const o = this._def.keyType, i = this._def.valueType, c = [...n.data.entries()].map(([f, v], x) => ({\n      key: o._parse(new sr(n, f, n.path, [x, \"key\"])),\n      value: i._parse(new sr(n, v, n.path, [x, \"value\"]))\n    }));\n    if (n.common.async) {\n      const f = /* @__PURE__ */ new Map();\n      return Promise.resolve().then(async () => {\n        for (const v of c) {\n          const x = await v.key, b = await v.value;\n          if (x.status === \"aborted\" || b.status === \"aborted\")\n            return Ae;\n          (x.status === \"dirty\" || b.status === \"dirty\") && r.dirty(), f.set(x.value, b.value);\n        }\n        return { status: r.value, value: f };\n      });\n    } else {\n      const f = /* @__PURE__ */ new Map();\n      for (const v of c) {\n        const x = v.key, b = v.value;\n        if (x.status === \"aborted\" || b.status === \"aborted\")\n          return Ae;\n        (x.status === \"dirty\" || b.status === \"dirty\") && r.dirty(), f.set(x.value, b.value);\n      }\n      return { status: r.value, value: f };\n    }\n  }\n}\nhs.create = (t, e, r) => new hs({\n  valueType: e,\n  keyType: t,\n  typeName: Ce.ZodMap,\n  ...Te(r)\n});\nclass ln extends Je {\n  _parse(e) {\n    const { status: r, ctx: n } = this._processInputParams(e);\n    if (n.parsedType !== le.set)\n      return oe(n, {\n        code: ne.invalid_type,\n        expected: le.set,\n        received: n.parsedType\n      }), Ae;\n    const o = this._def;\n    o.minSize !== null && n.data.size < o.minSize.value && (oe(n, {\n      code: ne.too_small,\n      minimum: o.minSize.value,\n      type: \"set\",\n      inclusive: !0,\n      exact: !1,\n      message: o.minSize.message\n    }), r.dirty()), o.maxSize !== null && n.data.size > o.maxSize.value && (oe(n, {\n      code: ne.too_big,\n      maximum: o.maxSize.value,\n      type: \"set\",\n      inclusive: !0,\n      exact: !1,\n      message: o.maxSize.message\n    }), r.dirty());\n    const i = this._def.valueType;\n    function c(v) {\n      const x = /* @__PURE__ */ new Set();\n      for (const b of v) {\n        if (b.status === \"aborted\")\n          return Ae;\n        b.status === \"dirty\" && r.dirty(), x.add(b.value);\n      }\n      return { status: r.value, value: x };\n    }\n    const f = [...n.data.values()].map((v, x) => i._parse(new sr(n, v, n.path, x)));\n    return n.common.async ? Promise.all(f).then((v) => c(v)) : c(f);\n  }\n  min(e, r) {\n    return new ln({\n      ...this._def,\n      minSize: { value: e, message: ve.toString(r) }\n    });\n  }\n  max(e, r) {\n    return new ln({\n      ...this._def,\n      maxSize: { value: e, message: ve.toString(r) }\n    });\n  }\n  size(e, r) {\n    return this.min(e, r).max(e, r);\n  }\n  nonempty(e) {\n    return this.min(1, e);\n  }\n}\nln.create = (t, e) => new ln({\n  valueType: t,\n  minSize: null,\n  maxSize: null,\n  typeName: Ce.ZodSet,\n  ...Te(e)\n});\nclass kn extends Je {\n  constructor() {\n    super(...arguments), this.validate = this.implement;\n  }\n  _parse(e) {\n    const { ctx: r } = this._processInputParams(e);\n    if (r.parsedType !== le.function)\n      return oe(r, {\n        code: ne.invalid_type,\n        expected: le.function,\n        received: r.parsedType\n      }), Ae;\n    function n(f, v) {\n      return us({\n        data: f,\n        path: r.path,\n        errorMaps: [\n          r.common.contextualErrorMap,\n          r.schemaErrorMap,\n          as(),\n          Rn\n        ].filter((x) => !!x),\n        issueData: {\n          code: ne.invalid_arguments,\n          argumentsError: v\n        }\n      });\n    }\n    function o(f, v) {\n      return us({\n        data: f,\n        path: r.path,\n        errorMaps: [\n          r.common.contextualErrorMap,\n          r.schemaErrorMap,\n          as(),\n          Rn\n        ].filter((x) => !!x),\n        issueData: {\n          code: ne.invalid_return_type,\n          returnTypeError: v\n        }\n      });\n    }\n    const i = { errorMap: r.common.contextualErrorMap }, c = r.data;\n    if (this._def.returns instanceof Ln) {\n      const f = this;\n      return jt(async function(...v) {\n        const x = new Zt([]), b = await f._def.args.parseAsync(v, i).catch((C) => {\n          throw x.addIssue(n(v, C)), x;\n        }), S = await Reflect.apply(c, this, b);\n        return await f._def.returns._def.type.parseAsync(S, i).catch((C) => {\n          throw x.addIssue(o(S, C)), x;\n        });\n      });\n    } else {\n      const f = this;\n      return jt(function(...v) {\n        const x = f._def.args.safeParse(v, i);\n        if (!x.success)\n          throw new Zt([n(v, x.error)]);\n        const b = Reflect.apply(c, this, x.data), S = f._def.returns.safeParse(b, i);\n        if (!S.success)\n          throw new Zt([o(b, S.error)]);\n        return S.data;\n      });\n    }\n  }\n  parameters() {\n    return this._def.args;\n  }\n  returnType() {\n    return this._def.returns;\n  }\n  args(...e) {\n    return new kn({\n      ...this._def,\n      args: or.create(e).rest(an.create())\n    });\n  }\n  returns(e) {\n    return new kn({\n      ...this._def,\n      returns: e\n    });\n  }\n  implement(e) {\n    return this.parse(e);\n  }\n  strictImplement(e) {\n    return this.parse(e);\n  }\n  static create(e, r, n) {\n    return new kn({\n      args: e || or.create([]).rest(an.create()),\n      returns: r || an.create(),\n      typeName: Ce.ZodFunction,\n      ...Te(n)\n    });\n  }\n}\nclass di extends Je {\n  get schema() {\n    return this._def.getter();\n  }\n  _parse(e) {\n    const { ctx: r } = this._processInputParams(e);\n    return this._def.getter()._parse({ data: r.data, path: r.path, parent: r });\n  }\n}\ndi.create = (t, e) => new di({\n  getter: t,\n  typeName: Ce.ZodLazy,\n  ...Te(e)\n});\nclass pi extends Je {\n  _parse(e) {\n    if (e.data !== this._def.value) {\n      const r = this._getOrReturnCtx(e);\n      return oe(r, {\n        received: r.data,\n        code: ne.invalid_literal,\n        expected: this._def.value\n      }), Ae;\n    }\n    return { status: \"valid\", value: e.data };\n  }\n  get value() {\n    return this._def.value;\n  }\n}\npi.create = (t, e) => new pi({\n  value: t,\n  typeName: Ce.ZodLiteral,\n  ...Te(e)\n});\nfunction Xu(t, e) {\n  return new Nr({\n    values: t,\n    typeName: Ce.ZodEnum,\n    ...Te(e)\n  });\n}\nclass Nr extends Je {\n  constructor() {\n    super(...arguments), ti.set(this, void 0);\n  }\n  _parse(e) {\n    if (typeof e.data != \"string\") {\n      const r = this._getOrReturnCtx(e), n = this._def.values;\n      return oe(r, {\n        expected: nt.joinValues(n),\n        received: r.parsedType,\n        code: ne.invalid_type\n      }), Ae;\n    }\n    if (cs(this, ti) || Wu(this, ti, new Set(this._def.values)), !cs(this, ti).has(e.data)) {\n      const r = this._getOrReturnCtx(e), n = this._def.values;\n      return oe(r, {\n        received: r.data,\n        code: ne.invalid_enum_value,\n        options: n\n      }), Ae;\n    }\n    return jt(e.data);\n  }\n  get options() {\n    return this._def.values;\n  }\n  get enum() {\n    const e = {};\n    for (const r of this._def.values)\n      e[r] = r;\n    return e;\n  }\n  get Values() {\n    const e = {};\n    for (const r of this._def.values)\n      e[r] = r;\n    return e;\n  }\n  get Enum() {\n    const e = {};\n    for (const r of this._def.values)\n      e[r] = r;\n    return e;\n  }\n  extract(e, r = this._def) {\n    return Nr.create(e, {\n      ...this._def,\n      ...r\n    });\n  }\n  exclude(e, r = this._def) {\n    return Nr.create(this.options.filter((n) => !e.includes(n)), {\n      ...this._def,\n      ...r\n    });\n  }\n}\nti = /* @__PURE__ */ new WeakMap();\nNr.create = Xu;\nclass mi extends Je {\n  constructor() {\n    super(...arguments), ri.set(this, void 0);\n  }\n  _parse(e) {\n    const r = nt.getValidEnumValues(this._def.values), n = this._getOrReturnCtx(e);\n    if (n.parsedType !== le.string && n.parsedType !== le.number) {\n      const o = nt.objectValues(r);\n      return oe(n, {\n        expected: nt.joinValues(o),\n        received: n.parsedType,\n        code: ne.invalid_type\n      }), Ae;\n    }\n    if (cs(this, ri) || Wu(this, ri, new Set(nt.getValidEnumValues(this._def.values))), !cs(this, ri).has(e.data)) {\n      const o = nt.objectValues(r);\n      return oe(n, {\n        received: n.data,\n        code: ne.invalid_enum_value,\n        options: o\n      }), Ae;\n    }\n    return jt(e.data);\n  }\n  get enum() {\n    return this._def.values;\n  }\n}\nri = /* @__PURE__ */ new WeakMap();\nmi.create = (t, e) => new mi({\n  values: t,\n  typeName: Ce.ZodNativeEnum,\n  ...Te(e)\n});\nclass Ln extends Je {\n  unwrap() {\n    return this._def.type;\n  }\n  _parse(e) {\n    const { ctx: r } = this._processInputParams(e);\n    if (r.parsedType !== le.promise && r.common.async === !1)\n      return oe(r, {\n        code: ne.invalid_type,\n        expected: le.promise,\n        received: r.parsedType\n      }), Ae;\n    const n = r.parsedType === le.promise ? r.data : Promise.resolve(r.data);\n    return jt(n.then((o) => this._def.type.parseAsync(o, {\n      path: r.path,\n      errorMap: r.common.contextualErrorMap\n    })));\n  }\n}\nLn.create = (t, e) => new Ln({\n  type: t,\n  typeName: Ce.ZodPromise,\n  ...Te(e)\n});\nclass Yt extends Je {\n  innerType() {\n    return this._def.schema;\n  }\n  sourceType() {\n    return this._def.schema._def.typeName === Ce.ZodEffects ? this._def.schema.sourceType() : this._def.schema;\n  }\n  _parse(e) {\n    const { status: r, ctx: n } = this._processInputParams(e), o = this._def.effect || null, i = {\n      addIssue: (c) => {\n        oe(n, c), c.fatal ? r.abort() : r.dirty();\n      },\n      get path() {\n        return n.path;\n      }\n    };\n    if (i.addIssue = i.addIssue.bind(i), o.type === \"preprocess\") {\n      const c = o.transform(n.data, i);\n      if (n.common.async)\n        return Promise.resolve(c).then(async (f) => {\n          if (r.value === \"aborted\")\n            return Ae;\n          const v = await this._def.schema._parseAsync({\n            data: f,\n            path: n.path,\n            parent: n\n          });\n          return v.status === \"aborted\" ? Ae : v.status === \"dirty\" || r.value === \"dirty\" ? Cn(v.value) : v;\n        });\n      {\n        if (r.value === \"aborted\")\n          return Ae;\n        const f = this._def.schema._parseSync({\n          data: c,\n          path: n.path,\n          parent: n\n        });\n        return f.status === \"aborted\" ? Ae : f.status === \"dirty\" || r.value === \"dirty\" ? Cn(f.value) : f;\n      }\n    }\n    if (o.type === \"refinement\") {\n      const c = (f) => {\n        const v = o.refinement(f, i);\n        if (n.common.async)\n          return Promise.resolve(v);\n        if (v instanceof Promise)\n          throw new Error(\"Async refinement encountered during synchronous parse operation. Use .parseAsync instead.\");\n        return f;\n      };\n      if (n.common.async === !1) {\n        const f = this._def.schema._parseSync({\n          data: n.data,\n          path: n.path,\n          parent: n\n        });\n        return f.status === \"aborted\" ? Ae : (f.status === \"dirty\" && r.dirty(), c(f.value), { status: r.value, value: f.value });\n      } else\n        return this._def.schema._parseAsync({ data: n.data, path: n.path, parent: n }).then((f) => f.status === \"aborted\" ? Ae : (f.status === \"dirty\" && r.dirty(), c(f.value).then(() => ({ status: r.value, value: f.value }))));\n    }\n    if (o.type === \"transform\")\n      if (n.common.async === !1) {\n        const c = this._def.schema._parseSync({\n          data: n.data,\n          path: n.path,\n          parent: n\n        });\n        if (!un(c))\n          return c;\n        const f = o.transform(c.value, i);\n        if (f instanceof Promise)\n          throw new Error(\"Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.\");\n        return { status: r.value, value: f };\n      } else\n        return this._def.schema._parseAsync({ data: n.data, path: n.path, parent: n }).then((c) => un(c) ? Promise.resolve(o.transform(c.value, i)).then((f) => ({ status: r.value, value: f })) : c);\n    nt.assertNever(o);\n  }\n}\nYt.create = (t, e, r) => new Yt({\n  schema: t,\n  typeName: Ce.ZodEffects,\n  effect: e,\n  ...Te(r)\n});\nYt.createWithPreprocess = (t, e, r) => new Yt({\n  schema: e,\n  effect: { type: \"preprocess\", transform: t },\n  typeName: Ce.ZodEffects,\n  ...Te(r)\n});\nclass ir extends Je {\n  _parse(e) {\n    return this._getType(e) === le.undefined ? jt(void 0) : this._def.innerType._parse(e);\n  }\n  unwrap() {\n    return this._def.innerType;\n  }\n}\nir.create = (t, e) => new ir({\n  innerType: t,\n  typeName: Ce.ZodOptional,\n  ...Te(e)\n});\nclass jr extends Je {\n  _parse(e) {\n    return this._getType(e) === le.null ? jt(null) : this._def.innerType._parse(e);\n  }\n  unwrap() {\n    return this._def.innerType;\n  }\n}\njr.create = (t, e) => new jr({\n  innerType: t,\n  typeName: Ce.ZodNullable,\n  ...Te(e)\n});\nclass gi extends Je {\n  _parse(e) {\n    const { ctx: r } = this._processInputParams(e);\n    let n = r.data;\n    return r.parsedType === le.undefined && (n = this._def.defaultValue()), this._def.innerType._parse({\n      data: n,\n      path: r.path,\n      parent: r\n    });\n  }\n  removeDefault() {\n    return this._def.innerType;\n  }\n}\ngi.create = (t, e) => new gi({\n  innerType: t,\n  typeName: Ce.ZodDefault,\n  defaultValue: typeof e.default == \"function\" ? e.default : () => e.default,\n  ...Te(e)\n});\nclass yi extends Je {\n  _parse(e) {\n    const { ctx: r } = this._processInputParams(e), n = {\n      ...r,\n      common: {\n        ...r.common,\n        issues: []\n      }\n    }, o = this._def.innerType._parse({\n      data: n.data,\n      path: n.path,\n      parent: {\n        ...n\n      }\n    });\n    return oi(o) ? o.then((i) => ({\n      status: \"valid\",\n      value: i.status === \"valid\" ? i.value : this._def.catchValue({\n        get error() {\n          return new Zt(n.common.issues);\n        },\n        input: n.data\n      })\n    })) : {\n      status: \"valid\",\n      value: o.status === \"valid\" ? o.value : this._def.catchValue({\n        get error() {\n          return new Zt(n.common.issues);\n        },\n        input: n.data\n      })\n    };\n  }\n  removeCatch() {\n    return this._def.innerType;\n  }\n}\nyi.create = (t, e) => new yi({\n  innerType: t,\n  typeName: Ce.ZodCatch,\n  catchValue: typeof e.catch == \"function\" ? e.catch : () => e.catch,\n  ...Te(e)\n});\nclass ds extends Je {\n  _parse(e) {\n    if (this._getType(e) !== le.nan) {\n      const n = this._getOrReturnCtx(e);\n      return oe(n, {\n        code: ne.invalid_type,\n        expected: le.nan,\n        received: n.parsedType\n      }), Ae;\n    }\n    return { status: \"valid\", value: e.data };\n  }\n}\nds.create = (t) => new ds({\n  typeName: Ce.ZodNaN,\n  ...Te(t)\n});\nconst Bf = Symbol(\"zod_brand\");\nclass ra extends Je {\n  _parse(e) {\n    const { ctx: r } = this._processInputParams(e), n = r.data;\n    return this._def.type._parse({\n      data: n,\n      path: r.path,\n      parent: r\n    });\n  }\n  unwrap() {\n    return this._def.type;\n  }\n}\nclass ji extends Je {\n  _parse(e) {\n    const { status: r, ctx: n } = this._processInputParams(e);\n    if (n.common.async)\n      return (async () => {\n        const i = await this._def.in._parseAsync({\n          data: n.data,\n          path: n.path,\n          parent: n\n        });\n        return i.status === \"aborted\" ? Ae : i.status === \"dirty\" ? (r.dirty(), Cn(i.value)) : this._def.out._parseAsync({\n          data: i.value,\n          path: n.path,\n          parent: n\n        });\n      })();\n    {\n      const o = this._def.in._parseSync({\n        data: n.data,\n        path: n.path,\n        parent: n\n      });\n      return o.status === \"aborted\" ? Ae : o.status === \"dirty\" ? (r.dirty(), {\n        status: \"dirty\",\n        value: o.value\n      }) : this._def.out._parseSync({\n        data: o.value,\n        path: n.path,\n        parent: n\n      });\n    }\n  }\n  static create(e, r) {\n    return new ji({\n      in: e,\n      out: r,\n      typeName: Ce.ZodPipeline\n    });\n  }\n}\nclass vi extends Je {\n  _parse(e) {\n    const r = this._def.innerType._parse(e), n = (o) => (un(o) && (o.value = Object.freeze(o.value)), o);\n    return oi(r) ? r.then((o) => n(o)) : n(r);\n  }\n  unwrap() {\n    return this._def.innerType;\n  }\n}\nvi.create = (t, e) => new vi({\n  innerType: t,\n  typeName: Ce.ZodReadonly,\n  ...Te(e)\n});\nfunction Ia(t, e) {\n  const r = typeof t == \"function\" ? t(e) : typeof t == \"string\" ? { message: t } : t;\n  return typeof r == \"string\" ? { message: r } : r;\n}\nfunction Qu(t, e = {}, r) {\n  return t ? Tn.create().superRefine((n, o) => {\n    var i, c;\n    const f = t(n);\n    if (f instanceof Promise)\n      return f.then((v) => {\n        var x, b;\n        if (!v) {\n          const S = Ia(e, n), T = (b = (x = S.fatal) !== null && x !== void 0 ? x : r) !== null && b !== void 0 ? b : !0;\n          o.addIssue({ code: \"custom\", ...S, fatal: T });\n        }\n      });\n    if (!f) {\n      const v = Ia(e, n), x = (c = (i = v.fatal) !== null && i !== void 0 ? i : r) !== null && c !== void 0 ? c : !0;\n      o.addIssue({ code: \"custom\", ...v, fatal: x });\n    }\n  }) : Tn.create();\n}\nconst Rf = {\n  object: ht.lazycreate\n};\nvar Ce;\n(function(t) {\n  t.ZodString = \"ZodString\", t.ZodNumber = \"ZodNumber\", t.ZodNaN = \"ZodNaN\", t.ZodBigInt = \"ZodBigInt\", t.ZodBoolean = \"ZodBoolean\", t.ZodDate = \"ZodDate\", t.ZodSymbol = \"ZodSymbol\", t.ZodUndefined = \"ZodUndefined\", t.ZodNull = \"ZodNull\", t.ZodAny = \"ZodAny\", t.ZodUnknown = \"ZodUnknown\", t.ZodNever = \"ZodNever\", t.ZodVoid = \"ZodVoid\", t.ZodArray = \"ZodArray\", t.ZodObject = \"ZodObject\", t.ZodUnion = \"ZodUnion\", t.ZodDiscriminatedUnion = \"ZodDiscriminatedUnion\", t.ZodIntersection = \"ZodIntersection\", t.ZodTuple = \"ZodTuple\", t.ZodRecord = \"ZodRecord\", t.ZodMap = \"ZodMap\", t.ZodSet = \"ZodSet\", t.ZodFunction = \"ZodFunction\", t.ZodLazy = \"ZodLazy\", t.ZodLiteral = \"ZodLiteral\", t.ZodEnum = \"ZodEnum\", t.ZodEffects = \"ZodEffects\", t.ZodNativeEnum = \"ZodNativeEnum\", t.ZodOptional = \"ZodOptional\", t.ZodNullable = \"ZodNullable\", t.ZodDefault = \"ZodDefault\", t.ZodCatch = \"ZodCatch\", t.ZodPromise = \"ZodPromise\", t.ZodBranded = \"ZodBranded\", t.ZodPipeline = \"ZodPipeline\", t.ZodReadonly = \"ZodReadonly\";\n})(Ce || (Ce = {}));\nconst Tf = (t, e = {\n  message: `Input not instance of ${t.name}`\n}) => Qu((r) => r instanceof t, e), ec = Wt.create, tc = Lr.create, Lf = ds.create, Of = Or.create, rc = ai.create, Nf = cn.create, jf = ls.create, Uf = ui.create, Ff = ci.create, Pf = Tn.create, Df = an.create, $f = xr.create, zf = fs.create, qf = Gt.create, Zf = ht.create, Vf = ht.strictCreate, Hf = li.create, Kf = Ts.create, Wf = fi.create, Gf = or.create, Yf = hi.create, Jf = hs.create, Xf = ln.create, Qf = kn.create, e0 = di.create, t0 = pi.create, r0 = Nr.create, n0 = mi.create, i0 = Ln.create, Ba = Yt.create, s0 = ir.create, o0 = jr.create, a0 = Yt.createWithPreprocess, u0 = ji.create, c0 = () => ec().optional(), l0 = () => tc().optional(), f0 = () => rc().optional(), h0 = {\n  string: (t) => Wt.create({ ...t, coerce: !0 }),\n  number: (t) => Lr.create({ ...t, coerce: !0 }),\n  boolean: (t) => ai.create({\n    ...t,\n    coerce: !0\n  }),\n  bigint: (t) => Or.create({ ...t, coerce: !0 }),\n  date: (t) => cn.create({ ...t, coerce: !0 })\n}, d0 = Ae;\nvar pe = /* @__PURE__ */ Object.freeze({\n  __proto__: null,\n  defaultErrorMap: Rn,\n  setErrorMap: af,\n  getErrorMap: as,\n  makeIssue: us,\n  EMPTY_PATH: uf,\n  addIssueToContext: oe,\n  ParseStatus: Lt,\n  INVALID: Ae,\n  DIRTY: Cn,\n  OK: jt,\n  isAborted: Io,\n  isDirty: Bo,\n  isValid: un,\n  isAsync: oi,\n  get util() {\n    return nt;\n  },\n  get objectUtil() {\n    return ko;\n  },\n  ZodParsedType: le,\n  getParsedType: pr,\n  ZodType: Je,\n  datetimeRegex: Ju,\n  ZodString: Wt,\n  ZodNumber: Lr,\n  ZodBigInt: Or,\n  ZodBoolean: ai,\n  ZodDate: cn,\n  ZodSymbol: ls,\n  ZodUndefined: ui,\n  ZodNull: ci,\n  ZodAny: Tn,\n  ZodUnknown: an,\n  ZodNever: xr,\n  ZodVoid: fs,\n  ZodArray: Gt,\n  ZodObject: ht,\n  ZodUnion: li,\n  ZodDiscriminatedUnion: Ts,\n  ZodIntersection: fi,\n  ZodTuple: or,\n  ZodRecord: hi,\n  ZodMap: hs,\n  ZodSet: ln,\n  ZodFunction: kn,\n  ZodLazy: di,\n  ZodLiteral: pi,\n  ZodEnum: Nr,\n  ZodNativeEnum: mi,\n  ZodPromise: Ln,\n  ZodEffects: Yt,\n  ZodTransformer: Yt,\n  ZodOptional: ir,\n  ZodNullable: jr,\n  ZodDefault: gi,\n  ZodCatch: yi,\n  ZodNaN: ds,\n  BRAND: Bf,\n  ZodBranded: ra,\n  ZodPipeline: ji,\n  ZodReadonly: vi,\n  custom: Qu,\n  Schema: Je,\n  ZodSchema: Je,\n  late: Rf,\n  get ZodFirstPartyTypeKind() {\n    return Ce;\n  },\n  coerce: h0,\n  any: Pf,\n  array: qf,\n  bigint: Of,\n  boolean: rc,\n  date: Nf,\n  discriminatedUnion: Kf,\n  effect: Ba,\n  enum: r0,\n  function: Qf,\n  instanceof: Tf,\n  intersection: Wf,\n  lazy: e0,\n  literal: t0,\n  map: Jf,\n  nan: Lf,\n  nativeEnum: n0,\n  never: $f,\n  null: Ff,\n  nullable: o0,\n  number: tc,\n  object: Zf,\n  oboolean: f0,\n  onumber: l0,\n  optional: s0,\n  ostring: c0,\n  pipeline: u0,\n  preprocess: a0,\n  promise: i0,\n  record: Yf,\n  set: Xf,\n  strictObject: Vf,\n  string: ec,\n  symbol: jf,\n  transformer: Ba,\n  tuple: Gf,\n  undefined: Uf,\n  union: Hf,\n  unknown: Df,\n  void: zf,\n  NEVER: d0,\n  ZodIssueCode: ne,\n  quotelessJson: of,\n  ZodError: Zt\n});\nconst p0 = /[@#$%^&*+=\\/\\\\|~«»]/, m0 = /(!{2,}|\\?{2,}|-{2,})/, g0 = /[\\u{1F300}-\\u{1F9FF}]|[\\u{2702}-\\u{27B0}]|[\\u{2600}-\\u{26FF}]|[\\u{2B00}-\\u{2BFF}]/u, vn = ({ max: t, noSpaces: e } = {}) => (e ? pe.string().max(t ?? Number.POSITIVE_INFINITY).regex(/^\\S*$/, \"Spaces are not allowed\") : pe.string().max(t ?? Number.POSITIVE_INFINITY)).refine((n) => !g0.test(n), {\n  message: \"Emojis and symbols are not allowed\"\n}).refine((n) => !p0.test(n), {\n  message: \"Special characters (@, #, $, %, ^, &, *, +, =, /, \\\\, |, ~, «, ») are not allowed\"\n}).refine((n) => !m0.test(n), {\n  message: \"Repeated punctuations (!!, ??, --) are not allowed\"\n}), Dt = pe.string().url().startsWith(\"https://\", { message: \"Must be an https url\" }).max(1024), nc = pe.string().max(32), ic = pe.string().max(32), y0 = /^[-a-z0-9]{3,8}:[-_a-zA-Z0-9]{1,32}\\/(?:[-a-z0-9]{3,8}:[-.%a-zA-Z0-9]{1,128}(?:\\/[-.%a-zA-Z0-9]{1,78})?|native)$/, v0 = pe.string().regex(y0, { message: \"Invalid CAIP-19 asset ID\" }), sc = pe.string().regex(/^#([0-9A-F]{3}|[0-9A-F]{6})$/i, {\n  message: \"Invalid hex color code. It should be in the format #RRGGBB or #RGB.\"\n}), w0 = pe.union([pe.literal(\"1:1\"), pe.literal(\"3:2\")]), x0 = pe.object({\n  header: pe.string(),\n  payload: pe.string(),\n  signature: pe.string()\n});\npe.object({\n  fid: pe.number(),\n  type: pe.literal(\"app_key\"),\n  key: pe.string().startsWith(\"0x\")\n});\nconst b0 = pe.object({\n  type: pe.literal(\"launch_frame\"),\n  name: nc,\n  url: Dt.optional(),\n  splashImageUrl: Dt.optional(),\n  splashBackgroundColor: sc.optional()\n}), _0 = pe.object({\n  type: pe.literal(\"view_token\"),\n  token: v0\n}), E0 = pe.discriminatedUnion(\"type\", [\n  b0,\n  _0\n]), M0 = pe.object({\n  title: ic,\n  action: E0\n});\npe.object({\n  version: pe.literal(\"next\"),\n  imageUrl: Dt,\n  aspectRatio: w0.optional(),\n  button: M0\n});\nconst oc = pe.object({\n  url: pe.string(),\n  token: pe.string()\n});\npe.object({\n  notificationId: pe.string().max(128),\n  title: pe.string().max(32),\n  body: pe.string().max(128),\n  targetUrl: Dt,\n  tokens: pe.string().array().max(100)\n});\npe.object({\n  result: pe.object({\n    successfulTokens: pe.array(pe.string()),\n    invalidTokens: pe.array(pe.string()),\n    rateLimitedTokens: pe.array(pe.string())\n  })\n});\nconst C0 = pe.object({\n  event: pe.literal(\"frame_added\"),\n  notificationDetails: oc.optional()\n}), S0 = pe.object({\n  event: pe.literal(\"frame_removed\")\n}), A0 = pe.object({\n  event: pe.literal(\"notifications_enabled\"),\n  notificationDetails: oc.required()\n}), k0 = pe.object({\n  event: pe.literal(\"notifications_disabled\")\n});\npe.discriminatedUnion(\"event\", [\n  C0,\n  S0,\n  A0,\n  k0\n]);\nconst I0 = pe.enum([\n  \"games\",\n  \"social\",\n  \"finance\",\n  \"utility\",\n  \"productivity\",\n  \"health-fitness\",\n  \"news-media\",\n  \"music\",\n  \"shopping\",\n  \"education\",\n  \"developer-tools\",\n  \"entertainment\",\n  \"art-creativity\"\n]), Ra = [\n  \"eip155:1\",\n  // Ethereum mainnet\n  \"eip155:8453\",\n  // Base mainnet\n  \"eip155:42161\",\n  // Arbitrum One\n  \"eip155:421614\",\n  // Arbitrum Sepolia\n  \"eip155:84532\",\n  // Base Sepolia\n  \"eip155:666666666\",\n  // Degen\n  \"eip155:100\",\n  // Gnosis\n  \"eip155:10\",\n  // Optimism\n  \"eip155:11155420\",\n  // Optimism Sepolia\n  \"eip155:137\",\n  // Polygon\n  \"eip155:11155111\",\n  // Ethereum Sepolia\n  \"eip155:7777777\",\n  // Zora\n  \"eip155:130\",\n  // Unichain\n  \"eip155:10143\",\n  // Monad testnet\n  \"eip155:42220\",\n  // Celo\n  \"solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp\"\n  // Solana\n], B0 = pe.object({\n  // 0.0.0 and 0.0.1 are not technically part of the spec but kept for\n  // backwards compatibility. next should always resolve to the most recent\n  // schema version.\n  version: pe.union([\n    pe.literal(\"0.0.0\"),\n    pe.literal(\"0.0.1\"),\n    pe.literal(\"1\"),\n    pe.literal(\"next\")\n  ]),\n  name: nc,\n  iconUrl: Dt,\n  homeUrl: Dt,\n  /** deprecated, set ogImageUrl instead */\n  imageUrl: Dt.optional(),\n  /** deprecated, will rely on fc:frame meta tag */\n  buttonTitle: ic.optional(),\n  splashImageUrl: Dt.optional(),\n  splashBackgroundColor: sc.optional(),\n  webhookUrl: Dt.optional(),\n  /** see: https://github.com/farcasterxyz/miniapps/discussions/191 */\n  subtitle: vn({ max: 30 }).optional(),\n  description: vn({ max: 170 }).optional(),\n  screenshotUrls: pe.array(Dt).max(3).optional(),\n  primaryCategory: I0.optional(),\n  tags: pe.array(vn({ max: 20, noSpaces: !0 })).max(5).optional(),\n  heroImageUrl: Dt.optional(),\n  tagline: vn({ max: 30 }).optional(),\n  ogTitle: vn({ max: 30 }).optional(),\n  ogDescription: vn({ max: 100 }).optional(),\n  ogImageUrl: Dt.optional(),\n  /** see: https://github.com/farcasterxyz/miniapps/discussions/204 */\n  noindex: pe.boolean().optional(),\n  /** see https://github.com/farcasterxyz/miniapps/discussions/256 */\n  requiredChains: pe.array(pe.enum(Ra)).max(Ra.length).optional(),\n  requiredCapabilities: pe.array(pe.enum(Aa)).max(Aa.length).optional(),\n  /** see https://github.com/farcasterxyz/miniapps/discussions/158 */\n  /** Documentation will be added once this feature is finalized. */\n  castShareUrl: Dt.optional()\n}).refine((t) => {\n  if (t.castShareUrl === void 0)\n    return !0;\n  try {\n    const e = new URL(t.homeUrl).hostname, r = new URL(t.castShareUrl).hostname;\n    return e === r;\n  } catch {\n    return !1;\n  }\n}, {\n  message: \"castShareUrl must have the same domain as homeUrl\",\n  path: [\"castShareUrl\"]\n});\npe.object({\n  accountAssociation: x0,\n  frame: B0.optional()\n});\nvar Ks = {}, ei = {}, Ta;\nfunction R0() {\n  if (Ta) return ei;\n  Ta = 1, ei.byteLength = f, ei.toByteArray = x, ei.fromByteArray = T;\n  for (var t = [], e = [], r = typeof Uint8Array < \"u\" ? Uint8Array : Array, n = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\", o = 0, i = n.length; o < i; ++o)\n    t[o] = n[o], e[n.charCodeAt(o)] = o;\n  e[45] = 62, e[95] = 63;\n  function c(C) {\n    var P = C.length;\n    if (P % 4 > 0)\n      throw new Error(\"Invalid string. Length must be a multiple of 4\");\n    var B = C.indexOf(\"=\");\n    B === -1 && (B = P);\n    var R = B === P ? 0 : 4 - B % 4;\n    return [B, R];\n  }\n  function f(C) {\n    var P = c(C), B = P[0], R = P[1];\n    return (B + R) * 3 / 4 - R;\n  }\n  function v(C, P, B) {\n    return (P + B) * 3 / 4 - B;\n  }\n  function x(C) {\n    var P, B = c(C), R = B[0], z = B[1], K = new r(v(C, R, z)), Z = 0, Q = z > 0 ? R - 4 : R, j;\n    for (j = 0; j < Q; j += 4)\n      P = e[C.charCodeAt(j)] << 18 | e[C.charCodeAt(j + 1)] << 12 | e[C.charCodeAt(j + 2)] << 6 | e[C.charCodeAt(j + 3)], K[Z++] = P >> 16 & 255, K[Z++] = P >> 8 & 255, K[Z++] = P & 255;\n    return z === 2 && (P = e[C.charCodeAt(j)] << 2 | e[C.charCodeAt(j + 1)] >> 4, K[Z++] = P & 255), z === 1 && (P = e[C.charCodeAt(j)] << 10 | e[C.charCodeAt(j + 1)] << 4 | e[C.charCodeAt(j + 2)] >> 2, K[Z++] = P >> 8 & 255, K[Z++] = P & 255), K;\n  }\n  function b(C) {\n    return t[C >> 18 & 63] + t[C >> 12 & 63] + t[C >> 6 & 63] + t[C & 63];\n  }\n  function S(C, P, B) {\n    for (var R, z = [], K = P; K < B; K += 3)\n      R = (C[K] << 16 & 16711680) + (C[K + 1] << 8 & 65280) + (C[K + 2] & 255), z.push(b(R));\n    return z.join(\"\");\n  }\n  function T(C) {\n    for (var P, B = C.length, R = B % 3, z = [], K = 16383, Z = 0, Q = B - R; Z < Q; Z += K)\n      z.push(S(C, Z, Z + K > Q ? Q : Z + K));\n    return R === 1 ? (P = C[B - 1], z.push(\n      t[P >> 2] + t[P << 4 & 63] + \"==\"\n    )) : R === 2 && (P = (C[B - 2] << 8) + C[B - 1], z.push(\n      t[P >> 10] + t[P >> 4 & 63] + t[P << 2 & 63] + \"=\"\n    )), z.join(\"\");\n  }\n  return ei;\n}\nvar qi = {};\n/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\nvar La;\nfunction T0() {\n  return La || (La = 1, qi.read = function(t, e, r, n, o) {\n    var i, c, f = o * 8 - n - 1, v = (1 << f) - 1, x = v >> 1, b = -7, S = r ? o - 1 : 0, T = r ? -1 : 1, C = t[e + S];\n    for (S += T, i = C & (1 << -b) - 1, C >>= -b, b += f; b > 0; i = i * 256 + t[e + S], S += T, b -= 8)\n      ;\n    for (c = i & (1 << -b) - 1, i >>= -b, b += n; b > 0; c = c * 256 + t[e + S], S += T, b -= 8)\n      ;\n    if (i === 0)\n      i = 1 - x;\n    else {\n      if (i === v)\n        return c ? NaN : (C ? -1 : 1) * (1 / 0);\n      c = c + Math.pow(2, n), i = i - x;\n    }\n    return (C ? -1 : 1) * c * Math.pow(2, i - n);\n  }, qi.write = function(t, e, r, n, o, i) {\n    var c, f, v, x = i * 8 - o - 1, b = (1 << x) - 1, S = b >> 1, T = o === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0, C = n ? 0 : i - 1, P = n ? 1 : -1, B = e < 0 || e === 0 && 1 / e < 0 ? 1 : 0;\n    for (e = Math.abs(e), isNaN(e) || e === 1 / 0 ? (f = isNaN(e) ? 1 : 0, c = b) : (c = Math.floor(Math.log(e) / Math.LN2), e * (v = Math.pow(2, -c)) < 1 && (c--, v *= 2), c + S >= 1 ? e += T / v : e += T * Math.pow(2, 1 - S), e * v >= 2 && (c++, v /= 2), c + S >= b ? (f = 0, c = b) : c + S >= 1 ? (f = (e * v - 1) * Math.pow(2, o), c = c + S) : (f = e * Math.pow(2, S - 1) * Math.pow(2, o), c = 0)); o >= 8; t[r + C] = f & 255, C += P, f /= 256, o -= 8)\n      ;\n    for (c = c << o | f, x += o; x > 0; t[r + C] = c & 255, C += P, c /= 256, x -= 8)\n      ;\n    t[r + C - P] |= B * 128;\n  }), qi;\n}\n/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\nvar Oa;\nfunction na() {\n  return Oa || (Oa = 1, function(t) {\n    const e = R0(), r = T0(), n = typeof Symbol == \"function\" && typeof Symbol.for == \"function\" ? Symbol.for(\"nodejs.util.inspect.custom\") : null;\n    t.Buffer = f, t.SlowBuffer = K, t.INSPECT_MAX_BYTES = 50;\n    const o = 2147483647;\n    t.kMaxLength = o, f.TYPED_ARRAY_SUPPORT = i(), !f.TYPED_ARRAY_SUPPORT && typeof console < \"u\" && typeof console.error == \"function\" && console.error(\n      \"This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.\"\n    );\n    function i() {\n      try {\n        const E = new Uint8Array(1), m = { foo: function() {\n          return 42;\n        } };\n        return Object.setPrototypeOf(m, Uint8Array.prototype), Object.setPrototypeOf(E, m), E.foo() === 42;\n      } catch {\n        return !1;\n      }\n    }\n    Object.defineProperty(f.prototype, \"parent\", {\n      enumerable: !0,\n      get: function() {\n        if (f.isBuffer(this))\n          return this.buffer;\n      }\n    }), Object.defineProperty(f.prototype, \"offset\", {\n      enumerable: !0,\n      get: function() {\n        if (f.isBuffer(this))\n          return this.byteOffset;\n      }\n    });\n    function c(E) {\n      if (E > o)\n        throw new RangeError('The value \"' + E + '\" is invalid for option \"size\"');\n      const m = new Uint8Array(E);\n      return Object.setPrototypeOf(m, f.prototype), m;\n    }\n    function f(E, m, y) {\n      if (typeof E == \"number\") {\n        if (typeof m == \"string\")\n          throw new TypeError(\n            'The \"string\" argument must be of type string. Received type number'\n          );\n        return S(E);\n      }\n      return v(E, m, y);\n    }\n    f.poolSize = 8192;\n    function v(E, m, y) {\n      if (typeof E == \"string\")\n        return T(E, m);\n      if (ArrayBuffer.isView(E))\n        return P(E);\n      if (E == null)\n        throw new TypeError(\n          \"The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type \" + typeof E\n        );\n      if (xt(E, ArrayBuffer) || E && xt(E.buffer, ArrayBuffer) || typeof SharedArrayBuffer < \"u\" && (xt(E, SharedArrayBuffer) || E && xt(E.buffer, SharedArrayBuffer)))\n        return B(E, m, y);\n      if (typeof E == \"number\")\n        throw new TypeError(\n          'The \"value\" argument must not be of type number. Received type number'\n        );\n      const I = E.valueOf && E.valueOf();\n      if (I != null && I !== E)\n        return f.from(I, m, y);\n      const q = R(E);\n      if (q) return q;\n      if (typeof Symbol < \"u\" && Symbol.toPrimitive != null && typeof E[Symbol.toPrimitive] == \"function\")\n        return f.from(E[Symbol.toPrimitive](\"string\"), m, y);\n      throw new TypeError(\n        \"The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type \" + typeof E\n      );\n    }\n    f.from = function(E, m, y) {\n      return v(E, m, y);\n    }, Object.setPrototypeOf(f.prototype, Uint8Array.prototype), Object.setPrototypeOf(f, Uint8Array);\n    function x(E) {\n      if (typeof E != \"number\")\n        throw new TypeError('\"size\" argument must be of type number');\n      if (E < 0)\n        throw new RangeError('The value \"' + E + '\" is invalid for option \"size\"');\n    }\n    function b(E, m, y) {\n      return x(E), E <= 0 ? c(E) : m !== void 0 ? typeof y == \"string\" ? c(E).fill(m, y) : c(E).fill(m) : c(E);\n    }\n    f.alloc = function(E, m, y) {\n      return b(E, m, y);\n    };\n    function S(E) {\n      return x(E), c(E < 0 ? 0 : z(E) | 0);\n    }\n    f.allocUnsafe = function(E) {\n      return S(E);\n    }, f.allocUnsafeSlow = function(E) {\n      return S(E);\n    };\n    function T(E, m) {\n      if ((typeof m != \"string\" || m === \"\") && (m = \"utf8\"), !f.isEncoding(m))\n        throw new TypeError(\"Unknown encoding: \" + m);\n      const y = Z(E, m) | 0;\n      let I = c(y);\n      const q = I.write(E, m);\n      return q !== y && (I = I.slice(0, q)), I;\n    }\n    function C(E) {\n      const m = E.length < 0 ? 0 : z(E.length) | 0, y = c(m);\n      for (let I = 0; I < m; I += 1)\n        y[I] = E[I] & 255;\n      return y;\n    }\n    function P(E) {\n      if (xt(E, Uint8Array)) {\n        const m = new Uint8Array(E);\n        return B(m.buffer, m.byteOffset, m.byteLength);\n      }\n      return C(E);\n    }\n    function B(E, m, y) {\n      if (m < 0 || E.byteLength < m)\n        throw new RangeError('\"offset\" is outside of buffer bounds');\n      if (E.byteLength < m + (y || 0))\n        throw new RangeError('\"length\" is outside of buffer bounds');\n      let I;\n      return m === void 0 && y === void 0 ? I = new Uint8Array(E) : y === void 0 ? I = new Uint8Array(E, m) : I = new Uint8Array(E, m, y), Object.setPrototypeOf(I, f.prototype), I;\n    }\n    function R(E) {\n      if (f.isBuffer(E)) {\n        const m = z(E.length) | 0, y = c(m);\n        return y.length === 0 || E.copy(y, 0, 0, m), y;\n      }\n      if (E.length !== void 0)\n        return typeof E.length != \"number\" || Se(E.length) ? c(0) : C(E);\n      if (E.type === \"Buffer\" && Array.isArray(E.data))\n        return C(E.data);\n    }\n    function z(E) {\n      if (E >= o)\n        throw new RangeError(\"Attempt to allocate Buffer larger than maximum size: 0x\" + o.toString(16) + \" bytes\");\n      return E | 0;\n    }\n    function K(E) {\n      return +E != E && (E = 0), f.alloc(+E);\n    }\n    f.isBuffer = function(m) {\n      return m != null && m._isBuffer === !0 && m !== f.prototype;\n    }, f.compare = function(m, y) {\n      if (xt(m, Uint8Array) && (m = f.from(m, m.offset, m.byteLength)), xt(y, Uint8Array) && (y = f.from(y, y.offset, y.byteLength)), !f.isBuffer(m) || !f.isBuffer(y))\n        throw new TypeError(\n          'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n        );\n      if (m === y) return 0;\n      let I = m.length, q = y.length;\n      for (let H = 0, W = Math.min(I, q); H < W; ++H)\n        if (m[H] !== y[H]) {\n          I = m[H], q = y[H];\n          break;\n        }\n      return I < q ? -1 : q < I ? 1 : 0;\n    }, f.isEncoding = function(m) {\n      switch (String(m).toLowerCase()) {\n        case \"hex\":\n        case \"utf8\":\n        case \"utf-8\":\n        case \"ascii\":\n        case \"latin1\":\n        case \"binary\":\n        case \"base64\":\n        case \"ucs2\":\n        case \"ucs-2\":\n        case \"utf16le\":\n        case \"utf-16le\":\n          return !0;\n        default:\n          return !1;\n      }\n    }, f.concat = function(m, y) {\n      if (!Array.isArray(m))\n        throw new TypeError('\"list\" argument must be an Array of Buffers');\n      if (m.length === 0)\n        return f.alloc(0);\n      let I;\n      if (y === void 0)\n        for (y = 0, I = 0; I < m.length; ++I)\n          y += m[I].length;\n      const q = f.allocUnsafe(y);\n      let H = 0;\n      for (I = 0; I < m.length; ++I) {\n        let W = m[I];\n        if (xt(W, Uint8Array))\n          H + W.length > q.length ? (f.isBuffer(W) || (W = f.from(W)), W.copy(q, H)) : Uint8Array.prototype.set.call(\n            q,\n            W,\n            H\n          );\n        else if (f.isBuffer(W))\n          W.copy(q, H);\n        else\n          throw new TypeError('\"list\" argument must be an Array of Buffers');\n        H += W.length;\n      }\n      return q;\n    };\n    function Z(E, m) {\n      if (f.isBuffer(E))\n        return E.length;\n      if (ArrayBuffer.isView(E) || xt(E, ArrayBuffer))\n        return E.byteLength;\n      if (typeof E != \"string\")\n        throw new TypeError(\n          'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof E\n        );\n      const y = E.length, I = arguments.length > 2 && arguments[2] === !0;\n      if (!I && y === 0) return 0;\n      let q = !1;\n      for (; ; )\n        switch (m) {\n          case \"ascii\":\n          case \"latin1\":\n          case \"binary\":\n            return y;\n          case \"utf8\":\n          case \"utf-8\":\n            return we(E).length;\n          case \"ucs2\":\n          case \"ucs-2\":\n          case \"utf16le\":\n          case \"utf-16le\":\n            return y * 2;\n          case \"hex\":\n            return y >>> 1;\n          case \"base64\":\n            return ye(E).length;\n          default:\n            if (q)\n              return I ? -1 : we(E).length;\n            m = (\"\" + m).toLowerCase(), q = !0;\n        }\n    }\n    f.byteLength = Z;\n    function Q(E, m, y) {\n      let I = !1;\n      if ((m === void 0 || m < 0) && (m = 0), m > this.length || ((y === void 0 || y > this.length) && (y = this.length), y <= 0) || (y >>>= 0, m >>>= 0, y <= m))\n        return \"\";\n      for (E || (E = \"utf8\"); ; )\n        switch (E) {\n          case \"hex\":\n            return _(this, m, y);\n          case \"utf8\":\n          case \"utf-8\":\n            return s(this, m, y);\n          case \"ascii\":\n            return g(this, m, y);\n          case \"latin1\":\n          case \"binary\":\n            return w(this, m, y);\n          case \"base64\":\n            return d(this, m, y);\n          case \"ucs2\":\n          case \"ucs-2\":\n          case \"utf16le\":\n          case \"utf-16le\":\n            return A(this, m, y);\n          default:\n            if (I) throw new TypeError(\"Unknown encoding: \" + E);\n            E = (E + \"\").toLowerCase(), I = !0;\n        }\n    }\n    f.prototype._isBuffer = !0;\n    function j(E, m, y) {\n      const I = E[m];\n      E[m] = E[y], E[y] = I;\n    }\n    f.prototype.swap16 = function() {\n      const m = this.length;\n      if (m % 2 !== 0)\n        throw new RangeError(\"Buffer size must be a multiple of 16-bits\");\n      for (let y = 0; y < m; y += 2)\n        j(this, y, y + 1);\n      return this;\n    }, f.prototype.swap32 = function() {\n      const m = this.length;\n      if (m % 4 !== 0)\n        throw new RangeError(\"Buffer size must be a multiple of 32-bits\");\n      for (let y = 0; y < m; y += 4)\n        j(this, y, y + 3), j(this, y + 1, y + 2);\n      return this;\n    }, f.prototype.swap64 = function() {\n      const m = this.length;\n      if (m % 8 !== 0)\n        throw new RangeError(\"Buffer size must be a multiple of 64-bits\");\n      for (let y = 0; y < m; y += 8)\n        j(this, y, y + 7), j(this, y + 1, y + 6), j(this, y + 2, y + 5), j(this, y + 3, y + 4);\n      return this;\n    }, f.prototype.toString = function() {\n      const m = this.length;\n      return m === 0 ? \"\" : arguments.length === 0 ? s(this, 0, m) : Q.apply(this, arguments);\n    }, f.prototype.toLocaleString = f.prototype.toString, f.prototype.equals = function(m) {\n      if (!f.isBuffer(m)) throw new TypeError(\"Argument must be a Buffer\");\n      return this === m ? !0 : f.compare(this, m) === 0;\n    }, f.prototype.inspect = function() {\n      let m = \"\";\n      const y = t.INSPECT_MAX_BYTES;\n      return m = this.toString(\"hex\", 0, y).replace(/(.{2})/g, \"$1 \").trim(), this.length > y && (m += \" ... \"), \"<Buffer \" + m + \">\";\n    }, n && (f.prototype[n] = f.prototype.inspect), f.prototype.compare = function(m, y, I, q, H) {\n      if (xt(m, Uint8Array) && (m = f.from(m, m.offset, m.byteLength)), !f.isBuffer(m))\n        throw new TypeError(\n          'The \"target\" argument must be one of type Buffer or Uint8Array. Received type ' + typeof m\n        );\n      if (y === void 0 && (y = 0), I === void 0 && (I = m ? m.length : 0), q === void 0 && (q = 0), H === void 0 && (H = this.length), y < 0 || I > m.length || q < 0 || H > this.length)\n        throw new RangeError(\"out of range index\");\n      if (q >= H && y >= I)\n        return 0;\n      if (q >= H)\n        return -1;\n      if (y >= I)\n        return 1;\n      if (y >>>= 0, I >>>= 0, q >>>= 0, H >>>= 0, this === m) return 0;\n      let W = H - q, Be = I - y;\n      const me = Math.min(W, Be), de = this.slice(q, H), ot = m.slice(y, I);\n      for (let ce = 0; ce < me; ++ce)\n        if (de[ce] !== ot[ce]) {\n          W = de[ce], Be = ot[ce];\n          break;\n        }\n      return W < Be ? -1 : Be < W ? 1 : 0;\n    };\n    function V(E, m, y, I, q) {\n      if (E.length === 0) return -1;\n      if (typeof y == \"string\" ? (I = y, y = 0) : y > 2147483647 ? y = 2147483647 : y < -2147483648 && (y = -2147483648), y = +y, Se(y) && (y = q ? 0 : E.length - 1), y < 0 && (y = E.length + y), y >= E.length) {\n        if (q) return -1;\n        y = E.length - 1;\n      } else if (y < 0)\n        if (q) y = 0;\n        else return -1;\n      if (typeof m == \"string\" && (m = f.from(m, I)), f.isBuffer(m))\n        return m.length === 0 ? -1 : ee(E, m, y, I, q);\n      if (typeof m == \"number\")\n        return m = m & 255, typeof Uint8Array.prototype.indexOf == \"function\" ? q ? Uint8Array.prototype.indexOf.call(E, m, y) : Uint8Array.prototype.lastIndexOf.call(E, m, y) : ee(E, [m], y, I, q);\n      throw new TypeError(\"val must be string, number or Buffer\");\n    }\n    function ee(E, m, y, I, q) {\n      let H = 1, W = E.length, Be = m.length;\n      if (I !== void 0 && (I = String(I).toLowerCase(), I === \"ucs2\" || I === \"ucs-2\" || I === \"utf16le\" || I === \"utf-16le\")) {\n        if (E.length < 2 || m.length < 2)\n          return -1;\n        H = 2, W /= 2, Be /= 2, y /= 2;\n      }\n      function me(ot, ce) {\n        return H === 1 ? ot[ce] : ot.readUInt16BE(ce * H);\n      }\n      let de;\n      if (q) {\n        let ot = -1;\n        for (de = y; de < W; de++)\n          if (me(E, de) === me(m, ot === -1 ? 0 : de - ot)) {\n            if (ot === -1 && (ot = de), de - ot + 1 === Be) return ot * H;\n          } else\n            ot !== -1 && (de -= de - ot), ot = -1;\n      } else\n        for (y + Be > W && (y = W - Be), de = y; de >= 0; de--) {\n          let ot = !0;\n          for (let ce = 0; ce < Be; ce++)\n            if (me(E, de + ce) !== me(m, ce)) {\n              ot = !1;\n              break;\n            }\n          if (ot) return de;\n        }\n      return -1;\n    }\n    f.prototype.includes = function(m, y, I) {\n      return this.indexOf(m, y, I) !== -1;\n    }, f.prototype.indexOf = function(m, y, I) {\n      return V(this, m, y, I, !0);\n    }, f.prototype.lastIndexOf = function(m, y, I) {\n      return V(this, m, y, I, !1);\n    };\n    function G(E, m, y, I) {\n      y = Number(y) || 0;\n      const q = E.length - y;\n      I ? (I = Number(I), I > q && (I = q)) : I = q;\n      const H = m.length;\n      I > H / 2 && (I = H / 2);\n      let W;\n      for (W = 0; W < I; ++W) {\n        const Be = parseInt(m.substr(W * 2, 2), 16);\n        if (Se(Be)) return W;\n        E[y + W] = Be;\n      }\n      return W;\n    }\n    function N(E, m, y, I) {\n      return be(we(m, E.length - y), E, y, I);\n    }\n    function O(E, m, y, I) {\n      return be(Me(m), E, y, I);\n    }\n    function L(E, m, y, I) {\n      return be(ye(m), E, y, I);\n    }\n    function F(E, m, y, I) {\n      return be(ft(m, E.length - y), E, y, I);\n    }\n    f.prototype.write = function(m, y, I, q) {\n      if (y === void 0)\n        q = \"utf8\", I = this.length, y = 0;\n      else if (I === void 0 && typeof y == \"string\")\n        q = y, I = this.length, y = 0;\n      else if (isFinite(y))\n        y = y >>> 0, isFinite(I) ? (I = I >>> 0, q === void 0 && (q = \"utf8\")) : (q = I, I = void 0);\n      else\n        throw new Error(\n          \"Buffer.write(string, encoding, offset[, length]) is no longer supported\"\n        );\n      const H = this.length - y;\n      if ((I === void 0 || I > H) && (I = H), m.length > 0 && (I < 0 || y < 0) || y > this.length)\n        throw new RangeError(\"Attempt to write outside buffer bounds\");\n      q || (q = \"utf8\");\n      let W = !1;\n      for (; ; )\n        switch (q) {\n          case \"hex\":\n            return G(this, m, y, I);\n          case \"utf8\":\n          case \"utf-8\":\n            return N(this, m, y, I);\n          case \"ascii\":\n          case \"latin1\":\n          case \"binary\":\n            return O(this, m, y, I);\n          case \"base64\":\n            return L(this, m, y, I);\n          case \"ucs2\":\n          case \"ucs-2\":\n          case \"utf16le\":\n          case \"utf-16le\":\n            return F(this, m, y, I);\n          default:\n            if (W) throw new TypeError(\"Unknown encoding: \" + q);\n            q = (\"\" + q).toLowerCase(), W = !0;\n        }\n    }, f.prototype.toJSON = function() {\n      return {\n        type: \"Buffer\",\n        data: Array.prototype.slice.call(this._arr || this, 0)\n      };\n    };\n    function d(E, m, y) {\n      return m === 0 && y === E.length ? e.fromByteArray(E) : e.fromByteArray(E.slice(m, y));\n    }\n    function s(E, m, y) {\n      y = Math.min(E.length, y);\n      const I = [];\n      let q = m;\n      for (; q < y; ) {\n        const H = E[q];\n        let W = null, Be = H > 239 ? 4 : H > 223 ? 3 : H > 191 ? 2 : 1;\n        if (q + Be <= y) {\n          let me, de, ot, ce;\n          switch (Be) {\n            case 1:\n              H < 128 && (W = H);\n              break;\n            case 2:\n              me = E[q + 1], (me & 192) === 128 && (ce = (H & 31) << 6 | me & 63, ce > 127 && (W = ce));\n              break;\n            case 3:\n              me = E[q + 1], de = E[q + 2], (me & 192) === 128 && (de & 192) === 128 && (ce = (H & 15) << 12 | (me & 63) << 6 | de & 63, ce > 2047 && (ce < 55296 || ce > 57343) && (W = ce));\n              break;\n            case 4:\n              me = E[q + 1], de = E[q + 2], ot = E[q + 3], (me & 192) === 128 && (de & 192) === 128 && (ot & 192) === 128 && (ce = (H & 15) << 18 | (me & 63) << 12 | (de & 63) << 6 | ot & 63, ce > 65535 && ce < 1114112 && (W = ce));\n          }\n        }\n        W === null ? (W = 65533, Be = 1) : W > 65535 && (W -= 65536, I.push(W >>> 10 & 1023 | 55296), W = 56320 | W & 1023), I.push(W), q += Be;\n      }\n      return h(I);\n    }\n    const u = 4096;\n    function h(E) {\n      const m = E.length;\n      if (m <= u)\n        return String.fromCharCode.apply(String, E);\n      let y = \"\", I = 0;\n      for (; I < m; )\n        y += String.fromCharCode.apply(\n          String,\n          E.slice(I, I += u)\n        );\n      return y;\n    }\n    function g(E, m, y) {\n      let I = \"\";\n      y = Math.min(E.length, y);\n      for (let q = m; q < y; ++q)\n        I += String.fromCharCode(E[q] & 127);\n      return I;\n    }\n    function w(E, m, y) {\n      let I = \"\";\n      y = Math.min(E.length, y);\n      for (let q = m; q < y; ++q)\n        I += String.fromCharCode(E[q]);\n      return I;\n    }\n    function _(E, m, y) {\n      const I = E.length;\n      (!m || m < 0) && (m = 0), (!y || y < 0 || y > I) && (y = I);\n      let q = \"\";\n      for (let H = m; H < y; ++H)\n        q += ke[E[H]];\n      return q;\n    }\n    function A(E, m, y) {\n      const I = E.slice(m, y);\n      let q = \"\";\n      for (let H = 0; H < I.length - 1; H += 2)\n        q += String.fromCharCode(I[H] + I[H + 1] * 256);\n      return q;\n    }\n    f.prototype.slice = function(m, y) {\n      const I = this.length;\n      m = ~~m, y = y === void 0 ? I : ~~y, m < 0 ? (m += I, m < 0 && (m = 0)) : m > I && (m = I), y < 0 ? (y += I, y < 0 && (y = 0)) : y > I && (y = I), y < m && (y = m);\n      const q = this.subarray(m, y);\n      return Object.setPrototypeOf(q, f.prototype), q;\n    };\n    function p(E, m, y) {\n      if (E % 1 !== 0 || E < 0) throw new RangeError(\"offset is not uint\");\n      if (E + m > y) throw new RangeError(\"Trying to access beyond buffer length\");\n    }\n    f.prototype.readUintLE = f.prototype.readUIntLE = function(m, y, I) {\n      m = m >>> 0, y = y >>> 0, I || p(m, y, this.length);\n      let q = this[m], H = 1, W = 0;\n      for (; ++W < y && (H *= 256); )\n        q += this[m + W] * H;\n      return q;\n    }, f.prototype.readUintBE = f.prototype.readUIntBE = function(m, y, I) {\n      m = m >>> 0, y = y >>> 0, I || p(m, y, this.length);\n      let q = this[m + --y], H = 1;\n      for (; y > 0 && (H *= 256); )\n        q += this[m + --y] * H;\n      return q;\n    }, f.prototype.readUint8 = f.prototype.readUInt8 = function(m, y) {\n      return m = m >>> 0, y || p(m, 1, this.length), this[m];\n    }, f.prototype.readUint16LE = f.prototype.readUInt16LE = function(m, y) {\n      return m = m >>> 0, y || p(m, 2, this.length), this[m] | this[m + 1] << 8;\n    }, f.prototype.readUint16BE = f.prototype.readUInt16BE = function(m, y) {\n      return m = m >>> 0, y || p(m, 2, this.length), this[m] << 8 | this[m + 1];\n    }, f.prototype.readUint32LE = f.prototype.readUInt32LE = function(m, y) {\n      return m = m >>> 0, y || p(m, 4, this.length), (this[m] | this[m + 1] << 8 | this[m + 2] << 16) + this[m + 3] * 16777216;\n    }, f.prototype.readUint32BE = f.prototype.readUInt32BE = function(m, y) {\n      return m = m >>> 0, y || p(m, 4, this.length), this[m] * 16777216 + (this[m + 1] << 16 | this[m + 2] << 8 | this[m + 3]);\n    }, f.prototype.readBigUInt64LE = ct(function(m) {\n      m = m >>> 0, Xe(m, \"offset\");\n      const y = this[m], I = this[m + 7];\n      (y === void 0 || I === void 0) && ae(m, this.length - 8);\n      const q = y + this[++m] * 2 ** 8 + this[++m] * 2 ** 16 + this[++m] * 2 ** 24, H = this[++m] + this[++m] * 2 ** 8 + this[++m] * 2 ** 16 + I * 2 ** 24;\n      return BigInt(q) + (BigInt(H) << BigInt(32));\n    }), f.prototype.readBigUInt64BE = ct(function(m) {\n      m = m >>> 0, Xe(m, \"offset\");\n      const y = this[m], I = this[m + 7];\n      (y === void 0 || I === void 0) && ae(m, this.length - 8);\n      const q = y * 2 ** 24 + this[++m] * 2 ** 16 + this[++m] * 2 ** 8 + this[++m], H = this[++m] * 2 ** 24 + this[++m] * 2 ** 16 + this[++m] * 2 ** 8 + I;\n      return (BigInt(q) << BigInt(32)) + BigInt(H);\n    }), f.prototype.readIntLE = function(m, y, I) {\n      m = m >>> 0, y = y >>> 0, I || p(m, y, this.length);\n      let q = this[m], H = 1, W = 0;\n      for (; ++W < y && (H *= 256); )\n        q += this[m + W] * H;\n      return H *= 128, q >= H && (q -= Math.pow(2, 8 * y)), q;\n    }, f.prototype.readIntBE = function(m, y, I) {\n      m = m >>> 0, y = y >>> 0, I || p(m, y, this.length);\n      let q = y, H = 1, W = this[m + --q];\n      for (; q > 0 && (H *= 256); )\n        W += this[m + --q] * H;\n      return H *= 128, W >= H && (W -= Math.pow(2, 8 * y)), W;\n    }, f.prototype.readInt8 = function(m, y) {\n      return m = m >>> 0, y || p(m, 1, this.length), this[m] & 128 ? (255 - this[m] + 1) * -1 : this[m];\n    }, f.prototype.readInt16LE = function(m, y) {\n      m = m >>> 0, y || p(m, 2, this.length);\n      const I = this[m] | this[m + 1] << 8;\n      return I & 32768 ? I | 4294901760 : I;\n    }, f.prototype.readInt16BE = function(m, y) {\n      m = m >>> 0, y || p(m, 2, this.length);\n      const I = this[m + 1] | this[m] << 8;\n      return I & 32768 ? I | 4294901760 : I;\n    }, f.prototype.readInt32LE = function(m, y) {\n      return m = m >>> 0, y || p(m, 4, this.length), this[m] | this[m + 1] << 8 | this[m + 2] << 16 | this[m + 3] << 24;\n    }, f.prototype.readInt32BE = function(m, y) {\n      return m = m >>> 0, y || p(m, 4, this.length), this[m] << 24 | this[m + 1] << 16 | this[m + 2] << 8 | this[m + 3];\n    }, f.prototype.readBigInt64LE = ct(function(m) {\n      m = m >>> 0, Xe(m, \"offset\");\n      const y = this[m], I = this[m + 7];\n      (y === void 0 || I === void 0) && ae(m, this.length - 8);\n      const q = this[m + 4] + this[m + 5] * 2 ** 8 + this[m + 6] * 2 ** 16 + (I << 24);\n      return (BigInt(q) << BigInt(32)) + BigInt(y + this[++m] * 2 ** 8 + this[++m] * 2 ** 16 + this[++m] * 2 ** 24);\n    }), f.prototype.readBigInt64BE = ct(function(m) {\n      m = m >>> 0, Xe(m, \"offset\");\n      const y = this[m], I = this[m + 7];\n      (y === void 0 || I === void 0) && ae(m, this.length - 8);\n      const q = (y << 24) + // Overflow\n      this[++m] * 2 ** 16 + this[++m] * 2 ** 8 + this[++m];\n      return (BigInt(q) << BigInt(32)) + BigInt(this[++m] * 2 ** 24 + this[++m] * 2 ** 16 + this[++m] * 2 ** 8 + I);\n    }), f.prototype.readFloatLE = function(m, y) {\n      return m = m >>> 0, y || p(m, 4, this.length), r.read(this, m, !0, 23, 4);\n    }, f.prototype.readFloatBE = function(m, y) {\n      return m = m >>> 0, y || p(m, 4, this.length), r.read(this, m, !1, 23, 4);\n    }, f.prototype.readDoubleLE = function(m, y) {\n      return m = m >>> 0, y || p(m, 8, this.length), r.read(this, m, !0, 52, 8);\n    }, f.prototype.readDoubleBE = function(m, y) {\n      return m = m >>> 0, y || p(m, 8, this.length), r.read(this, m, !1, 52, 8);\n    };\n    function a(E, m, y, I, q, H) {\n      if (!f.isBuffer(E)) throw new TypeError('\"buffer\" argument must be a Buffer instance');\n      if (m > q || m < H) throw new RangeError('\"value\" argument is out of bounds');\n      if (y + I > E.length) throw new RangeError(\"Index out of range\");\n    }\n    f.prototype.writeUintLE = f.prototype.writeUIntLE = function(m, y, I, q) {\n      if (m = +m, y = y >>> 0, I = I >>> 0, !q) {\n        const Be = Math.pow(2, 8 * I) - 1;\n        a(this, m, y, I, Be, 0);\n      }\n      let H = 1, W = 0;\n      for (this[y] = m & 255; ++W < I && (H *= 256); )\n        this[y + W] = m / H & 255;\n      return y + I;\n    }, f.prototype.writeUintBE = f.prototype.writeUIntBE = function(m, y, I, q) {\n      if (m = +m, y = y >>> 0, I = I >>> 0, !q) {\n        const Be = Math.pow(2, 8 * I) - 1;\n        a(this, m, y, I, Be, 0);\n      }\n      let H = I - 1, W = 1;\n      for (this[y + H] = m & 255; --H >= 0 && (W *= 256); )\n        this[y + H] = m / W & 255;\n      return y + I;\n    }, f.prototype.writeUint8 = f.prototype.writeUInt8 = function(m, y, I) {\n      return m = +m, y = y >>> 0, I || a(this, m, y, 1, 255, 0), this[y] = m & 255, y + 1;\n    }, f.prototype.writeUint16LE = f.prototype.writeUInt16LE = function(m, y, I) {\n      return m = +m, y = y >>> 0, I || a(this, m, y, 2, 65535, 0), this[y] = m & 255, this[y + 1] = m >>> 8, y + 2;\n    }, f.prototype.writeUint16BE = f.prototype.writeUInt16BE = function(m, y, I) {\n      return m = +m, y = y >>> 0, I || a(this, m, y, 2, 65535, 0), this[y] = m >>> 8, this[y + 1] = m & 255, y + 2;\n    }, f.prototype.writeUint32LE = f.prototype.writeUInt32LE = function(m, y, I) {\n      return m = +m, y = y >>> 0, I || a(this, m, y, 4, 4294967295, 0), this[y + 3] = m >>> 24, this[y + 2] = m >>> 16, this[y + 1] = m >>> 8, this[y] = m & 255, y + 4;\n    }, f.prototype.writeUint32BE = f.prototype.writeUInt32BE = function(m, y, I) {\n      return m = +m, y = y >>> 0, I || a(this, m, y, 4, 4294967295, 0), this[y] = m >>> 24, this[y + 1] = m >>> 16, this[y + 2] = m >>> 8, this[y + 3] = m & 255, y + 4;\n    };\n    function l(E, m, y, I, q) {\n      Ie(m, I, q, E, y, 7);\n      let H = Number(m & BigInt(4294967295));\n      E[y++] = H, H = H >> 8, E[y++] = H, H = H >> 8, E[y++] = H, H = H >> 8, E[y++] = H;\n      let W = Number(m >> BigInt(32) & BigInt(4294967295));\n      return E[y++] = W, W = W >> 8, E[y++] = W, W = W >> 8, E[y++] = W, W = W >> 8, E[y++] = W, y;\n    }\n    function M(E, m, y, I, q) {\n      Ie(m, I, q, E, y, 7);\n      let H = Number(m & BigInt(4294967295));\n      E[y + 7] = H, H = H >> 8, E[y + 6] = H, H = H >> 8, E[y + 5] = H, H = H >> 8, E[y + 4] = H;\n      let W = Number(m >> BigInt(32) & BigInt(4294967295));\n      return E[y + 3] = W, W = W >> 8, E[y + 2] = W, W = W >> 8, E[y + 1] = W, W = W >> 8, E[y] = W, y + 8;\n    }\n    f.prototype.writeBigUInt64LE = ct(function(m, y = 0) {\n      return l(this, m, y, BigInt(0), BigInt(\"0xffffffffffffffff\"));\n    }), f.prototype.writeBigUInt64BE = ct(function(m, y = 0) {\n      return M(this, m, y, BigInt(0), BigInt(\"0xffffffffffffffff\"));\n    }), f.prototype.writeIntLE = function(m, y, I, q) {\n      if (m = +m, y = y >>> 0, !q) {\n        const me = Math.pow(2, 8 * I - 1);\n        a(this, m, y, I, me - 1, -me);\n      }\n      let H = 0, W = 1, Be = 0;\n      for (this[y] = m & 255; ++H < I && (W *= 256); )\n        m < 0 && Be === 0 && this[y + H - 1] !== 0 && (Be = 1), this[y + H] = (m / W >> 0) - Be & 255;\n      return y + I;\n    }, f.prototype.writeIntBE = function(m, y, I, q) {\n      if (m = +m, y = y >>> 0, !q) {\n        const me = Math.pow(2, 8 * I - 1);\n        a(this, m, y, I, me - 1, -me);\n      }\n      let H = I - 1, W = 1, Be = 0;\n      for (this[y + H] = m & 255; --H >= 0 && (W *= 256); )\n        m < 0 && Be === 0 && this[y + H + 1] !== 0 && (Be = 1), this[y + H] = (m / W >> 0) - Be & 255;\n      return y + I;\n    }, f.prototype.writeInt8 = function(m, y, I) {\n      return m = +m, y = y >>> 0, I || a(this, m, y, 1, 127, -128), m < 0 && (m = 255 + m + 1), this[y] = m & 255, y + 1;\n    }, f.prototype.writeInt16LE = function(m, y, I) {\n      return m = +m, y = y >>> 0, I || a(this, m, y, 2, 32767, -32768), this[y] = m & 255, this[y + 1] = m >>> 8, y + 2;\n    }, f.prototype.writeInt16BE = function(m, y, I) {\n      return m = +m, y = y >>> 0, I || a(this, m, y, 2, 32767, -32768), this[y] = m >>> 8, this[y + 1] = m & 255, y + 2;\n    }, f.prototype.writeInt32LE = function(m, y, I) {\n      return m = +m, y = y >>> 0, I || a(this, m, y, 4, 2147483647, -2147483648), this[y] = m & 255, this[y + 1] = m >>> 8, this[y + 2] = m >>> 16, this[y + 3] = m >>> 24, y + 4;\n    }, f.prototype.writeInt32BE = function(m, y, I) {\n      return m = +m, y = y >>> 0, I || a(this, m, y, 4, 2147483647, -2147483648), m < 0 && (m = 4294967295 + m + 1), this[y] = m >>> 24, this[y + 1] = m >>> 16, this[y + 2] = m >>> 8, this[y + 3] = m & 255, y + 4;\n    }, f.prototype.writeBigInt64LE = ct(function(m, y = 0) {\n      return l(this, m, y, -BigInt(\"0x8000000000000000\"), BigInt(\"0x7fffffffffffffff\"));\n    }), f.prototype.writeBigInt64BE = ct(function(m, y = 0) {\n      return M(this, m, y, -BigInt(\"0x8000000000000000\"), BigInt(\"0x7fffffffffffffff\"));\n    });\n    function k(E, m, y, I, q, H) {\n      if (y + I > E.length) throw new RangeError(\"Index out of range\");\n      if (y < 0) throw new RangeError(\"Index out of range\");\n    }\n    function $(E, m, y, I, q) {\n      return m = +m, y = y >>> 0, q || k(E, m, y, 4), r.write(E, m, y, I, 23, 4), y + 4;\n    }\n    f.prototype.writeFloatLE = function(m, y, I) {\n      return $(this, m, y, !0, I);\n    }, f.prototype.writeFloatBE = function(m, y, I) {\n      return $(this, m, y, !1, I);\n    };\n    function X(E, m, y, I, q) {\n      return m = +m, y = y >>> 0, q || k(E, m, y, 8), r.write(E, m, y, I, 52, 8), y + 8;\n    }\n    f.prototype.writeDoubleLE = function(m, y, I) {\n      return X(this, m, y, !0, I);\n    }, f.prototype.writeDoubleBE = function(m, y, I) {\n      return X(this, m, y, !1, I);\n    }, f.prototype.copy = function(m, y, I, q) {\n      if (!f.isBuffer(m)) throw new TypeError(\"argument should be a Buffer\");\n      if (I || (I = 0), !q && q !== 0 && (q = this.length), y >= m.length && (y = m.length), y || (y = 0), q > 0 && q < I && (q = I), q === I || m.length === 0 || this.length === 0) return 0;\n      if (y < 0)\n        throw new RangeError(\"targetStart out of bounds\");\n      if (I < 0 || I >= this.length) throw new RangeError(\"Index out of range\");\n      if (q < 0) throw new RangeError(\"sourceEnd out of bounds\");\n      q > this.length && (q = this.length), m.length - y < q - I && (q = m.length - y + I);\n      const H = q - I;\n      return this === m && typeof Uint8Array.prototype.copyWithin == \"function\" ? this.copyWithin(y, I, q) : Uint8Array.prototype.set.call(\n        m,\n        this.subarray(I, q),\n        y\n      ), H;\n    }, f.prototype.fill = function(m, y, I, q) {\n      if (typeof m == \"string\") {\n        if (typeof y == \"string\" ? (q = y, y = 0, I = this.length) : typeof I == \"string\" && (q = I, I = this.length), q !== void 0 && typeof q != \"string\")\n          throw new TypeError(\"encoding must be a string\");\n        if (typeof q == \"string\" && !f.isEncoding(q))\n          throw new TypeError(\"Unknown encoding: \" + q);\n        if (m.length === 1) {\n          const W = m.charCodeAt(0);\n          (q === \"utf8\" && W < 128 || q === \"latin1\") && (m = W);\n        }\n      } else typeof m == \"number\" ? m = m & 255 : typeof m == \"boolean\" && (m = Number(m));\n      if (y < 0 || this.length < y || this.length < I)\n        throw new RangeError(\"Out of range index\");\n      if (I <= y)\n        return this;\n      y = y >>> 0, I = I === void 0 ? this.length : I >>> 0, m || (m = 0);\n      let H;\n      if (typeof m == \"number\")\n        for (H = y; H < I; ++H)\n          this[H] = m;\n      else {\n        const W = f.isBuffer(m) ? m : f.from(m, q), Be = W.length;\n        if (Be === 0)\n          throw new TypeError('The value \"' + m + '\" is invalid for argument \"value\"');\n        for (H = 0; H < I - y; ++H)\n          this[H + y] = W[H % Be];\n      }\n      return this;\n    };\n    const re = {};\n    function se(E, m, y) {\n      re[E] = class extends y {\n        constructor() {\n          super(), Object.defineProperty(this, \"message\", {\n            value: m.apply(this, arguments),\n            writable: !0,\n            configurable: !0\n          }), this.name = `${this.name} [${E}]`, this.stack, delete this.name;\n        }\n        get code() {\n          return E;\n        }\n        set code(q) {\n          Object.defineProperty(this, \"code\", {\n            configurable: !0,\n            enumerable: !0,\n            value: q,\n            writable: !0\n          });\n        }\n        toString() {\n          return `${this.name} [${E}]: ${this.message}`;\n        }\n      };\n    }\n    se(\n      \"ERR_BUFFER_OUT_OF_BOUNDS\",\n      function(E) {\n        return E ? `${E} is outside of buffer bounds` : \"Attempt to access memory outside buffer bounds\";\n      },\n      RangeError\n    ), se(\n      \"ERR_INVALID_ARG_TYPE\",\n      function(E, m) {\n        return `The \"${E}\" argument must be of type number. Received type ${typeof m}`;\n      },\n      TypeError\n    ), se(\n      \"ERR_OUT_OF_RANGE\",\n      function(E, m, y) {\n        let I = `The value of \"${E}\" is out of range.`, q = y;\n        return Number.isInteger(y) && Math.abs(y) > 2 ** 32 ? q = ut(String(y)) : typeof y == \"bigint\" && (q = String(y), (y > BigInt(2) ** BigInt(32) || y < -(BigInt(2) ** BigInt(32))) && (q = ut(q)), q += \"n\"), I += ` It must be ${m}. Received ${q}`, I;\n      },\n      RangeError\n    );\n    function ut(E) {\n      let m = \"\", y = E.length;\n      const I = E[0] === \"-\" ? 1 : 0;\n      for (; y >= I + 4; y -= 3)\n        m = `_${E.slice(y - 3, y)}${m}`;\n      return `${E.slice(0, y)}${m}`;\n    }\n    function xe(E, m, y) {\n      Xe(m, \"offset\"), (E[m] === void 0 || E[m + y] === void 0) && ae(m, E.length - (y + 1));\n    }\n    function Ie(E, m, y, I, q, H) {\n      if (E > y || E < m) {\n        const W = typeof m == \"bigint\" ? \"n\" : \"\";\n        let Be;\n        throw m === 0 || m === BigInt(0) ? Be = `>= 0${W} and < 2${W} ** ${(H + 1) * 8}${W}` : Be = `>= -(2${W} ** ${(H + 1) * 8 - 1}${W}) and < 2 ** ${(H + 1) * 8 - 1}${W}`, new re.ERR_OUT_OF_RANGE(\"value\", Be, E);\n      }\n      xe(I, q, H);\n    }\n    function Xe(E, m) {\n      if (typeof E != \"number\")\n        throw new re.ERR_INVALID_ARG_TYPE(m, \"number\", E);\n    }\n    function ae(E, m, y) {\n      throw Math.floor(E) !== E ? (Xe(E, y), new re.ERR_OUT_OF_RANGE(\"offset\", \"an integer\", E)) : m < 0 ? new re.ERR_BUFFER_OUT_OF_BOUNDS() : new re.ERR_OUT_OF_RANGE(\n        \"offset\",\n        `>= 0 and <= ${m}`,\n        E\n      );\n    }\n    const ge = /[^+/0-9A-Za-z-_]/g;\n    function it(E) {\n      if (E = E.split(\"=\")[0], E = E.trim().replace(ge, \"\"), E.length < 2) return \"\";\n      for (; E.length % 4 !== 0; )\n        E = E + \"=\";\n      return E;\n    }\n    function we(E, m) {\n      m = m || 1 / 0;\n      let y;\n      const I = E.length;\n      let q = null;\n      const H = [];\n      for (let W = 0; W < I; ++W) {\n        if (y = E.charCodeAt(W), y > 55295 && y < 57344) {\n          if (!q) {\n            if (y > 56319) {\n              (m -= 3) > -1 && H.push(239, 191, 189);\n              continue;\n            } else if (W + 1 === I) {\n              (m -= 3) > -1 && H.push(239, 191, 189);\n              continue;\n            }\n            q = y;\n            continue;\n          }\n          if (y < 56320) {\n            (m -= 3) > -1 && H.push(239, 191, 189), q = y;\n            continue;\n          }\n          y = (q - 55296 << 10 | y - 56320) + 65536;\n        } else q && (m -= 3) > -1 && H.push(239, 191, 189);\n        if (q = null, y < 128) {\n          if ((m -= 1) < 0) break;\n          H.push(y);\n        } else if (y < 2048) {\n          if ((m -= 2) < 0) break;\n          H.push(\n            y >> 6 | 192,\n            y & 63 | 128\n          );\n        } else if (y < 65536) {\n          if ((m -= 3) < 0) break;\n          H.push(\n            y >> 12 | 224,\n            y >> 6 & 63 | 128,\n            y & 63 | 128\n          );\n        } else if (y < 1114112) {\n          if ((m -= 4) < 0) break;\n          H.push(\n            y >> 18 | 240,\n            y >> 12 & 63 | 128,\n            y >> 6 & 63 | 128,\n            y & 63 | 128\n          );\n        } else\n          throw new Error(\"Invalid code point\");\n      }\n      return H;\n    }\n    function Me(E) {\n      const m = [];\n      for (let y = 0; y < E.length; ++y)\n        m.push(E.charCodeAt(y) & 255);\n      return m;\n    }\n    function ft(E, m) {\n      let y, I, q;\n      const H = [];\n      for (let W = 0; W < E.length && !((m -= 2) < 0); ++W)\n        y = E.charCodeAt(W), I = y >> 8, q = y % 256, H.push(q), H.push(I);\n      return H;\n    }\n    function ye(E) {\n      return e.toByteArray(it(E));\n    }\n    function be(E, m, y, I) {\n      let q;\n      for (q = 0; q < I && !(q + y >= m.length || q >= E.length); ++q)\n        m[q + y] = E[q];\n      return q;\n    }\n    function xt(E, m) {\n      return E instanceof m || E != null && E.constructor != null && E.constructor.name != null && E.constructor.name === m.name;\n    }\n    function Se(E) {\n      return E !== E;\n    }\n    const ke = function() {\n      const E = \"0123456789abcdef\", m = new Array(256);\n      for (let y = 0; y < 16; ++y) {\n        const I = y * 16;\n        for (let q = 0; q < 16; ++q)\n          m[I + q] = E[y] + E[q];\n      }\n      return m;\n    }();\n    function ct(E) {\n      return typeof BigInt > \"u\" ? _e : E;\n    }\n    function _e() {\n      throw new Error(\"BigInt not supported\");\n    }\n  }(Ks)), Ks;\n}\nvar et = na();\nconst wn = typeof globalThis == \"object\" && \"crypto\" in globalThis ? globalThis.crypto : void 0;\n/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nfunction ia(t) {\n  return t instanceof Uint8Array || ArrayBuffer.isView(t) && t.constructor.name === \"Uint8Array\";\n}\nfunction To(t) {\n  if (!Number.isSafeInteger(t) || t < 0)\n    throw new Error(\"positive integer expected, got \" + t);\n}\nfunction ar(t, ...e) {\n  if (!ia(t))\n    throw new Error(\"Uint8Array expected\");\n  if (e.length > 0 && !e.includes(t.length))\n    throw new Error(\"Uint8Array expected of length \" + e + \", got length=\" + t.length);\n}\nfunction L0(t) {\n  if (typeof t != \"function\" || typeof t.create != \"function\")\n    throw new Error(\"Hash should be wrapped by utils.createHasher\");\n  To(t.outputLen), To(t.blockLen);\n}\nfunction ps(t, e = !0) {\n  if (t.destroyed)\n    throw new Error(\"Hash instance has been destroyed\");\n  if (e && t.finished)\n    throw new Error(\"Hash#digest() has already been called\");\n}\nfunction O0(t, e) {\n  ar(t);\n  const r = e.outputLen;\n  if (t.length < r)\n    throw new Error(\"digestInto() expects output buffer of length at least \" + r);\n}\nfunction On(...t) {\n  for (let e = 0; e < t.length; e++)\n    t[e].fill(0);\n}\nfunction Ws(t) {\n  return new DataView(t.buffer, t.byteOffset, t.byteLength);\n}\nfunction Qt(t, e) {\n  return t << 32 - e | t >>> e;\n}\nconst ac = /* @ts-ignore */ typeof Uint8Array.from([]).toHex == \"function\" && typeof Uint8Array.fromHex == \"function\", N0 = /* @__PURE__ */ Array.from({ length: 256 }, (t, e) => e.toString(16).padStart(2, \"0\"));\nfunction Nn(t) {\n  if (ar(t), ac)\n    return t.toHex();\n  let e = \"\";\n  for (let r = 0; r < t.length; r++)\n    e += N0[t[r]];\n  return e;\n}\nconst fr = { _0: 48, _9: 57, A: 65, F: 70, a: 97, f: 102 };\nfunction Na(t) {\n  if (t >= fr._0 && t <= fr._9)\n    return t - fr._0;\n  if (t >= fr.A && t <= fr.F)\n    return t - (fr.A - 10);\n  if (t >= fr.a && t <= fr.f)\n    return t - (fr.a - 10);\n}\nfunction sa(t) {\n  if (typeof t != \"string\")\n    throw new Error(\"hex string expected, got \" + typeof t);\n  if (ac)\n    return Uint8Array.fromHex(t);\n  const e = t.length, r = e / 2;\n  if (e % 2)\n    throw new Error(\"hex string expected, got unpadded hex of length \" + e);\n  const n = new Uint8Array(r);\n  for (let o = 0, i = 0; o < r; o++, i += 2) {\n    const c = Na(t.charCodeAt(i)), f = Na(t.charCodeAt(i + 1));\n    if (c === void 0 || f === void 0) {\n      const v = t[i] + t[i + 1];\n      throw new Error('hex string expected, got non-hex character \"' + v + '\" at index ' + i);\n    }\n    n[o] = c * 16 + f;\n  }\n  return n;\n}\nfunction j0(t) {\n  if (typeof t != \"string\")\n    throw new Error(\"string expected\");\n  return new Uint8Array(new TextEncoder().encode(t));\n}\nfunction oa(t) {\n  return typeof t == \"string\" && (t = j0(t)), ar(t), t;\n}\nfunction vr(...t) {\n  let e = 0;\n  for (let n = 0; n < t.length; n++) {\n    const o = t[n];\n    ar(o), e += o.length;\n  }\n  const r = new Uint8Array(e);\n  for (let n = 0, o = 0; n < t.length; n++) {\n    const i = t[n];\n    r.set(i, o), o += i.length;\n  }\n  return r;\n}\nlet uc = class {\n};\nfunction cc(t) {\n  const e = (n) => t().update(oa(n)).digest(), r = t();\n  return e.outputLen = r.outputLen, e.blockLen = r.blockLen, e.create = () => t(), e;\n}\nfunction lc(t = 32) {\n  if (wn && typeof wn.getRandomValues == \"function\")\n    return wn.getRandomValues(new Uint8Array(t));\n  if (wn && typeof wn.randomBytes == \"function\")\n    return Uint8Array.from(wn.randomBytes(t));\n  throw new Error(\"crypto.getRandomValues must be defined\");\n}\nfunction U0(t, e, r, n) {\n  if (typeof t.setBigUint64 == \"function\")\n    return t.setBigUint64(e, r, n);\n  const o = BigInt(32), i = BigInt(4294967295), c = Number(r >> o & i), f = Number(r & i), v = n ? 4 : 0, x = n ? 0 : 4;\n  t.setUint32(e + v, c, n), t.setUint32(e + x, f, n);\n}\nfunction F0(t, e, r) {\n  return t & e ^ ~t & r;\n}\nfunction P0(t, e, r) {\n  return t & e ^ t & r ^ e & r;\n}\nlet fc = class extends uc {\n  constructor(e, r, n, o) {\n    super(), this.finished = !1, this.length = 0, this.pos = 0, this.destroyed = !1, this.blockLen = e, this.outputLen = r, this.padOffset = n, this.isLE = o, this.buffer = new Uint8Array(e), this.view = Ws(this.buffer);\n  }\n  update(e) {\n    ps(this), e = oa(e), ar(e);\n    const { view: r, buffer: n, blockLen: o } = this, i = e.length;\n    for (let c = 0; c < i; ) {\n      const f = Math.min(o - this.pos, i - c);\n      if (f === o) {\n        const v = Ws(e);\n        for (; o <= i - c; c += o)\n          this.process(v, c);\n        continue;\n      }\n      n.set(e.subarray(c, c + f), this.pos), this.pos += f, c += f, this.pos === o && (this.process(r, 0), this.pos = 0);\n    }\n    return this.length += e.length, this.roundClean(), this;\n  }\n  digestInto(e) {\n    ps(this), O0(e, this), this.finished = !0;\n    const { buffer: r, view: n, blockLen: o, isLE: i } = this;\n    let { pos: c } = this;\n    r[c++] = 128, On(this.buffer.subarray(c)), this.padOffset > o - c && (this.process(n, 0), c = 0);\n    for (let S = c; S < o; S++)\n      r[S] = 0;\n    U0(n, o - 8, BigInt(this.length * 8), i), this.process(n, 0);\n    const f = Ws(e), v = this.outputLen;\n    if (v % 4)\n      throw new Error(\"_sha2: outputLen should be aligned to 32bit\");\n    const x = v / 4, b = this.get();\n    if (x > b.length)\n      throw new Error(\"_sha2: outputLen bigger than state\");\n    for (let S = 0; S < x; S++)\n      f.setUint32(4 * S, b[S], i);\n  }\n  digest() {\n    const { buffer: e, outputLen: r } = this;\n    this.digestInto(e);\n    const n = e.slice(0, r);\n    return this.destroy(), n;\n  }\n  _cloneInto(e) {\n    e || (e = new this.constructor()), e.set(...this.get());\n    const { blockLen: r, buffer: n, length: o, finished: i, destroyed: c, pos: f } = this;\n    return e.destroyed = c, e.finished = i, e.length = o, e.pos = f, o % r && e.buffer.set(n), e;\n  }\n  clone() {\n    return this._cloneInto();\n  }\n};\nconst _r = /* @__PURE__ */ Uint32Array.from([\n  1779033703,\n  3144134277,\n  1013904242,\n  2773480762,\n  1359893119,\n  2600822924,\n  528734635,\n  1541459225\n]), St = /* @__PURE__ */ Uint32Array.from([\n  1779033703,\n  4089235720,\n  3144134277,\n  2227873595,\n  1013904242,\n  4271175723,\n  2773480762,\n  1595750129,\n  1359893119,\n  2917565137,\n  2600822924,\n  725511199,\n  528734635,\n  4215389547,\n  1541459225,\n  327033209\n]), Zi = /* @__PURE__ */ BigInt(2 ** 32 - 1), ja = /* @__PURE__ */ BigInt(32);\nfunction D0(t, e = !1) {\n  return e ? { h: Number(t & Zi), l: Number(t >> ja & Zi) } : { h: Number(t >> ja & Zi) | 0, l: Number(t & Zi) | 0 };\n}\nfunction $0(t, e = !1) {\n  const r = t.length;\n  let n = new Uint32Array(r), o = new Uint32Array(r);\n  for (let i = 0; i < r; i++) {\n    const { h: c, l: f } = D0(t[i], e);\n    [n[i], o[i]] = [c, f];\n  }\n  return [n, o];\n}\nconst Ua = (t, e, r) => t >>> r, Fa = (t, e, r) => t << 32 - r | e >>> r, xn = (t, e, r) => t >>> r | e << 32 - r, bn = (t, e, r) => t << 32 - r | e >>> r, Vi = (t, e, r) => t << 64 - r | e >>> r - 32, Hi = (t, e, r) => t >>> r - 32 | e << 64 - r;\nfunction hr(t, e, r, n) {\n  const o = (e >>> 0) + (n >>> 0);\n  return { h: t + r + (o / 2 ** 32 | 0) | 0, l: o | 0 };\n}\nconst z0 = (t, e, r) => (t >>> 0) + (e >>> 0) + (r >>> 0), q0 = (t, e, r, n) => e + r + n + (t / 2 ** 32 | 0) | 0, Z0 = (t, e, r, n) => (t >>> 0) + (e >>> 0) + (r >>> 0) + (n >>> 0), V0 = (t, e, r, n, o) => e + r + n + o + (t / 2 ** 32 | 0) | 0, H0 = (t, e, r, n, o) => (t >>> 0) + (e >>> 0) + (r >>> 0) + (n >>> 0) + (o >>> 0), K0 = (t, e, r, n, o, i) => e + r + n + o + i + (t / 2 ** 32 | 0) | 0, W0 = /* @__PURE__ */ Uint32Array.from([\n  1116352408,\n  1899447441,\n  3049323471,\n  3921009573,\n  961987163,\n  1508970993,\n  2453635748,\n  2870763221,\n  3624381080,\n  310598401,\n  607225278,\n  1426881987,\n  1925078388,\n  2162078206,\n  2614888103,\n  3248222580,\n  3835390401,\n  4022224774,\n  264347078,\n  604807628,\n  770255983,\n  1249150122,\n  1555081692,\n  1996064986,\n  2554220882,\n  2821834349,\n  2952996808,\n  3210313671,\n  3336571891,\n  3584528711,\n  113926993,\n  338241895,\n  666307205,\n  773529912,\n  1294757372,\n  1396182291,\n  1695183700,\n  1986661051,\n  2177026350,\n  2456956037,\n  2730485921,\n  2820302411,\n  3259730800,\n  3345764771,\n  3516065817,\n  3600352804,\n  4094571909,\n  275423344,\n  430227734,\n  506948616,\n  659060556,\n  883997877,\n  958139571,\n  1322822218,\n  1537002063,\n  1747873779,\n  1955562222,\n  2024104815,\n  2227730452,\n  2361852424,\n  2428436474,\n  2756734187,\n  3204031479,\n  3329325298\n]), Er = /* @__PURE__ */ new Uint32Array(64);\nlet G0 = class extends fc {\n  constructor(e = 32) {\n    super(64, e, 8, !1), this.A = _r[0] | 0, this.B = _r[1] | 0, this.C = _r[2] | 0, this.D = _r[3] | 0, this.E = _r[4] | 0, this.F = _r[5] | 0, this.G = _r[6] | 0, this.H = _r[7] | 0;\n  }\n  get() {\n    const { A: e, B: r, C: n, D: o, E: i, F: c, G: f, H: v } = this;\n    return [e, r, n, o, i, c, f, v];\n  }\n  // prettier-ignore\n  set(e, r, n, o, i, c, f, v) {\n    this.A = e | 0, this.B = r | 0, this.C = n | 0, this.D = o | 0, this.E = i | 0, this.F = c | 0, this.G = f | 0, this.H = v | 0;\n  }\n  process(e, r) {\n    for (let S = 0; S < 16; S++, r += 4)\n      Er[S] = e.getUint32(r, !1);\n    for (let S = 16; S < 64; S++) {\n      const T = Er[S - 15], C = Er[S - 2], P = Qt(T, 7) ^ Qt(T, 18) ^ T >>> 3, B = Qt(C, 17) ^ Qt(C, 19) ^ C >>> 10;\n      Er[S] = B + Er[S - 7] + P + Er[S - 16] | 0;\n    }\n    let { A: n, B: o, C: i, D: c, E: f, F: v, G: x, H: b } = this;\n    for (let S = 0; S < 64; S++) {\n      const T = Qt(f, 6) ^ Qt(f, 11) ^ Qt(f, 25), C = b + T + F0(f, v, x) + W0[S] + Er[S] | 0, B = (Qt(n, 2) ^ Qt(n, 13) ^ Qt(n, 22)) + P0(n, o, i) | 0;\n      b = x, x = v, v = f, f = c + C | 0, c = i, i = o, o = n, n = C + B | 0;\n    }\n    n = n + this.A | 0, o = o + this.B | 0, i = i + this.C | 0, c = c + this.D | 0, f = f + this.E | 0, v = v + this.F | 0, x = x + this.G | 0, b = b + this.H | 0, this.set(n, o, i, c, f, v, x, b);\n  }\n  roundClean() {\n    On(Er);\n  }\n  destroy() {\n    this.set(0, 0, 0, 0, 0, 0, 0, 0), On(this.buffer);\n  }\n};\nconst hc = $0([\n  \"0x428a2f98d728ae22\",\n  \"0x7137449123ef65cd\",\n  \"0xb5c0fbcfec4d3b2f\",\n  \"0xe9b5dba58189dbbc\",\n  \"0x3956c25bf348b538\",\n  \"0x59f111f1b605d019\",\n  \"0x923f82a4af194f9b\",\n  \"0xab1c5ed5da6d8118\",\n  \"0xd807aa98a3030242\",\n  \"0x12835b0145706fbe\",\n  \"0x243185be4ee4b28c\",\n  \"0x550c7dc3d5ffb4e2\",\n  \"0x72be5d74f27b896f\",\n  \"0x80deb1fe3b1696b1\",\n  \"0x9bdc06a725c71235\",\n  \"0xc19bf174cf692694\",\n  \"0xe49b69c19ef14ad2\",\n  \"0xefbe4786384f25e3\",\n  \"0x0fc19dc68b8cd5b5\",\n  \"0x240ca1cc77ac9c65\",\n  \"0x2de92c6f592b0275\",\n  \"0x4a7484aa6ea6e483\",\n  \"0x5cb0a9dcbd41fbd4\",\n  \"0x76f988da831153b5\",\n  \"0x983e5152ee66dfab\",\n  \"0xa831c66d2db43210\",\n  \"0xb00327c898fb213f\",\n  \"0xbf597fc7beef0ee4\",\n  \"0xc6e00bf33da88fc2\",\n  \"0xd5a79147930aa725\",\n  \"0x06ca6351e003826f\",\n  \"0x142929670a0e6e70\",\n  \"0x27b70a8546d22ffc\",\n  \"0x2e1b21385c26c926\",\n  \"0x4d2c6dfc5ac42aed\",\n  \"0x53380d139d95b3df\",\n  \"0x650a73548baf63de\",\n  \"0x766a0abb3c77b2a8\",\n  \"0x81c2c92e47edaee6\",\n  \"0x92722c851482353b\",\n  \"0xa2bfe8a14cf10364\",\n  \"0xa81a664bbc423001\",\n  \"0xc24b8b70d0f89791\",\n  \"0xc76c51a30654be30\",\n  \"0xd192e819d6ef5218\",\n  \"0xd69906245565a910\",\n  \"0xf40e35855771202a\",\n  \"0x106aa07032bbd1b8\",\n  \"0x19a4c116b8d2d0c8\",\n  \"0x1e376c085141ab53\",\n  \"0x2748774cdf8eeb99\",\n  \"0x34b0bcb5e19b48a8\",\n  \"0x391c0cb3c5c95a63\",\n  \"0x4ed8aa4ae3418acb\",\n  \"0x5b9cca4f7763e373\",\n  \"0x682e6ff3d6b2b8a3\",\n  \"0x748f82ee5defb2fc\",\n  \"0x78a5636f43172f60\",\n  \"0x84c87814a1f0ab72\",\n  \"0x8cc702081a6439ec\",\n  \"0x90befffa23631e28\",\n  \"0xa4506cebde82bde9\",\n  \"0xbef9a3f7b2c67915\",\n  \"0xc67178f2e372532b\",\n  \"0xca273eceea26619c\",\n  \"0xd186b8c721c0c207\",\n  \"0xeada7dd6cde0eb1e\",\n  \"0xf57d4f7fee6ed178\",\n  \"0x06f067aa72176fba\",\n  \"0x0a637dc5a2c898a6\",\n  \"0x113f9804bef90dae\",\n  \"0x1b710b35131c471b\",\n  \"0x28db77f523047d84\",\n  \"0x32caab7b40c72493\",\n  \"0x3c9ebe0a15c9bebc\",\n  \"0x431d67c49c100d4c\",\n  \"0x4cc5d4becb3e42b6\",\n  \"0x597f299cfc657e2a\",\n  \"0x5fcb6fab3ad6faec\",\n  \"0x6c44198c4a475817\"\n].map((t) => BigInt(t))), Y0 = hc[0], J0 = hc[1], Mr = /* @__PURE__ */ new Uint32Array(80), Cr = /* @__PURE__ */ new Uint32Array(80);\nclass X0 extends fc {\n  constructor(e = 64) {\n    super(128, e, 16, !1), this.Ah = St[0] | 0, this.Al = St[1] | 0, this.Bh = St[2] | 0, this.Bl = St[3] | 0, this.Ch = St[4] | 0, this.Cl = St[5] | 0, this.Dh = St[6] | 0, this.Dl = St[7] | 0, this.Eh = St[8] | 0, this.El = St[9] | 0, this.Fh = St[10] | 0, this.Fl = St[11] | 0, this.Gh = St[12] | 0, this.Gl = St[13] | 0, this.Hh = St[14] | 0, this.Hl = St[15] | 0;\n  }\n  // prettier-ignore\n  get() {\n    const { Ah: e, Al: r, Bh: n, Bl: o, Ch: i, Cl: c, Dh: f, Dl: v, Eh: x, El: b, Fh: S, Fl: T, Gh: C, Gl: P, Hh: B, Hl: R } = this;\n    return [e, r, n, o, i, c, f, v, x, b, S, T, C, P, B, R];\n  }\n  // prettier-ignore\n  set(e, r, n, o, i, c, f, v, x, b, S, T, C, P, B, R) {\n    this.Ah = e | 0, this.Al = r | 0, this.Bh = n | 0, this.Bl = o | 0, this.Ch = i | 0, this.Cl = c | 0, this.Dh = f | 0, this.Dl = v | 0, this.Eh = x | 0, this.El = b | 0, this.Fh = S | 0, this.Fl = T | 0, this.Gh = C | 0, this.Gl = P | 0, this.Hh = B | 0, this.Hl = R | 0;\n  }\n  process(e, r) {\n    for (let Z = 0; Z < 16; Z++, r += 4)\n      Mr[Z] = e.getUint32(r), Cr[Z] = e.getUint32(r += 4);\n    for (let Z = 16; Z < 80; Z++) {\n      const Q = Mr[Z - 15] | 0, j = Cr[Z - 15] | 0, V = xn(Q, j, 1) ^ xn(Q, j, 8) ^ Ua(Q, j, 7), ee = bn(Q, j, 1) ^ bn(Q, j, 8) ^ Fa(Q, j, 7), G = Mr[Z - 2] | 0, N = Cr[Z - 2] | 0, O = xn(G, N, 19) ^ Vi(G, N, 61) ^ Ua(G, N, 6), L = bn(G, N, 19) ^ Hi(G, N, 61) ^ Fa(G, N, 6), F = Z0(ee, L, Cr[Z - 7], Cr[Z - 16]), d = V0(F, V, O, Mr[Z - 7], Mr[Z - 16]);\n      Mr[Z] = d | 0, Cr[Z] = F | 0;\n    }\n    let { Ah: n, Al: o, Bh: i, Bl: c, Ch: f, Cl: v, Dh: x, Dl: b, Eh: S, El: T, Fh: C, Fl: P, Gh: B, Gl: R, Hh: z, Hl: K } = this;\n    for (let Z = 0; Z < 80; Z++) {\n      const Q = xn(S, T, 14) ^ xn(S, T, 18) ^ Vi(S, T, 41), j = bn(S, T, 14) ^ bn(S, T, 18) ^ Hi(S, T, 41), V = S & C ^ ~S & B, ee = T & P ^ ~T & R, G = H0(K, j, ee, J0[Z], Cr[Z]), N = K0(G, z, Q, V, Y0[Z], Mr[Z]), O = G | 0, L = xn(n, o, 28) ^ Vi(n, o, 34) ^ Vi(n, o, 39), F = bn(n, o, 28) ^ Hi(n, o, 34) ^ Hi(n, o, 39), d = n & i ^ n & f ^ i & f, s = o & c ^ o & v ^ c & v;\n      z = B | 0, K = R | 0, B = C | 0, R = P | 0, C = S | 0, P = T | 0, { h: S, l: T } = hr(x | 0, b | 0, N | 0, O | 0), x = f | 0, b = v | 0, f = i | 0, v = c | 0, i = n | 0, c = o | 0;\n      const u = z0(O, F, s);\n      n = q0(u, N, L, d), o = u | 0;\n    }\n    ({ h: n, l: o } = hr(this.Ah | 0, this.Al | 0, n | 0, o | 0)), { h: i, l: c } = hr(this.Bh | 0, this.Bl | 0, i | 0, c | 0), { h: f, l: v } = hr(this.Ch | 0, this.Cl | 0, f | 0, v | 0), { h: x, l: b } = hr(this.Dh | 0, this.Dl | 0, x | 0, b | 0), { h: S, l: T } = hr(this.Eh | 0, this.El | 0, S | 0, T | 0), { h: C, l: P } = hr(this.Fh | 0, this.Fl | 0, C | 0, P | 0), { h: B, l: R } = hr(this.Gh | 0, this.Gl | 0, B | 0, R | 0), { h: z, l: K } = hr(this.Hh | 0, this.Hl | 0, z | 0, K | 0), this.set(n, o, i, c, f, v, x, b, S, T, C, P, B, R, z, K);\n  }\n  roundClean() {\n    On(Mr, Cr);\n  }\n  destroy() {\n    On(this.buffer), this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n  }\n}\nconst Q0 = /* @__PURE__ */ cc(() => new G0()), eh = /* @__PURE__ */ cc(() => new X0());\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nconst aa = /* @__PURE__ */ BigInt(0), Lo = /* @__PURE__ */ BigInt(1);\nfunction fn(t, e) {\n  if (typeof e != \"boolean\")\n    throw new Error(t + \" boolean expected, got \" + e);\n}\nfunction Ki(t) {\n  const e = t.toString(16);\n  return e.length & 1 ? \"0\" + e : e;\n}\nfunction dc(t) {\n  if (typeof t != \"string\")\n    throw new Error(\"hex string expected, got \" + typeof t);\n  return t === \"\" ? aa : BigInt(\"0x\" + t);\n}\nfunction Ls(t) {\n  return dc(Nn(t));\n}\nfunction wi(t) {\n  return ar(t), dc(Nn(Uint8Array.from(t).reverse()));\n}\nfunction ua(t, e) {\n  return sa(t.toString(16).padStart(e * 2, \"0\"));\n}\nfunction Os(t, e) {\n  return ua(t, e).reverse();\n}\nfunction vt(t, e, r) {\n  let n;\n  if (typeof e == \"string\")\n    try {\n      n = sa(e);\n    } catch (i) {\n      throw new Error(t + \" must be hex string or Uint8Array, cause: \" + i);\n    }\n  else if (ia(e))\n    n = Uint8Array.from(e);\n  else\n    throw new Error(t + \" must be hex string or Uint8Array\");\n  const o = n.length;\n  if (typeof r == \"number\" && o !== r)\n    throw new Error(t + \" of length \" + r + \" expected, got \" + o);\n  return n;\n}\nconst Gs = (t) => typeof t == \"bigint\" && aa <= t;\nfunction th(t, e, r) {\n  return Gs(t) && Gs(e) && Gs(r) && e <= t && t < r;\n}\nfunction Sn(t, e, r, n) {\n  if (!th(e, r, n))\n    throw new Error(\"expected valid \" + t + \": \" + r + \" <= n < \" + n + \", got \" + e);\n}\nfunction rh(t) {\n  let e;\n  for (e = 0; t > aa; t >>= Lo, e += 1)\n    ;\n  return e;\n}\nconst Ns = (t) => (Lo << BigInt(t)) - Lo;\nfunction nh(t, e, r) {\n  if (typeof t != \"number\" || t < 2)\n    throw new Error(\"hashLen must be a number\");\n  if (typeof e != \"number\" || e < 2)\n    throw new Error(\"qByteLen must be a number\");\n  if (typeof r != \"function\")\n    throw new Error(\"hmacFn must be a function\");\n  const n = (C) => new Uint8Array(C), o = (C) => Uint8Array.of(C);\n  let i = n(t), c = n(t), f = 0;\n  const v = () => {\n    i.fill(1), c.fill(0), f = 0;\n  }, x = (...C) => r(c, i, ...C), b = (C = n(0)) => {\n    c = x(o(0), C), i = x(), C.length !== 0 && (c = x(o(1), C), i = x());\n  }, S = () => {\n    if (f++ >= 1e3)\n      throw new Error(\"drbg: tried 1000 values\");\n    let C = 0;\n    const P = [];\n    for (; C < e; ) {\n      i = x();\n      const B = i.slice();\n      P.push(B), C += i.length;\n    }\n    return vr(...P);\n  };\n  return (C, P) => {\n    v(), b(C);\n    let B;\n    for (; !(B = P(S())); )\n      b();\n    return v(), B;\n  };\n}\nfunction Ui(t, e, r = {}) {\n  if (!t || typeof t != \"object\")\n    throw new Error(\"expected valid options object\");\n  function n(o, i, c) {\n    const f = t[o];\n    if (c && f === void 0)\n      return;\n    const v = typeof f;\n    if (v !== i || f === null)\n      throw new Error(`param \"${o}\" is invalid: expected ${i}, got ${v}`);\n  }\n  Object.entries(e).forEach(([o, i]) => n(o, i, !1)), Object.entries(r).forEach(([o, i]) => n(o, i, !0));\n}\nfunction ms(t) {\n  const e = /* @__PURE__ */ new WeakMap();\n  return (r, ...n) => {\n    const o = e.get(r);\n    if (o !== void 0)\n      return o;\n    const i = t(r, ...n);\n    return e.set(r, i), i;\n  };\n}\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nconst Ft = BigInt(0), Ct = BigInt(1), sn = /* @__PURE__ */ BigInt(2), ih = /* @__PURE__ */ BigInt(3), pc = /* @__PURE__ */ BigInt(4), mc = /* @__PURE__ */ BigInt(5), gc = /* @__PURE__ */ BigInt(8);\nfunction wt(t, e) {\n  const r = t % e;\n  return r >= Ft ? r : e + r;\n}\nfunction pt(t, e, r) {\n  let n = t;\n  for (; e-- > Ft; )\n    n *= n, n %= r;\n  return n;\n}\nfunction Pa(t, e) {\n  if (t === Ft)\n    throw new Error(\"invert: expected non-zero number\");\n  if (e <= Ft)\n    throw new Error(\"invert: expected positive modulus, got \" + e);\n  let r = wt(t, e), n = e, o = Ft, i = Ct;\n  for (; r !== Ft; ) {\n    const f = n / r, v = n % r, x = o - i * f;\n    n = r, r = v, o = i, i = x;\n  }\n  if (n !== Ct)\n    throw new Error(\"invert: does not exist\");\n  return wt(o, e);\n}\nfunction yc(t, e) {\n  const r = (t.ORDER + Ct) / pc, n = t.pow(e, r);\n  if (!t.eql(t.sqr(n), e))\n    throw new Error(\"Cannot find square root\");\n  return n;\n}\nfunction sh(t, e) {\n  const r = (t.ORDER - mc) / gc, n = t.mul(e, sn), o = t.pow(n, r), i = t.mul(e, o), c = t.mul(t.mul(i, sn), o), f = t.mul(i, t.sub(c, t.ONE));\n  if (!t.eql(t.sqr(f), e))\n    throw new Error(\"Cannot find square root\");\n  return f;\n}\nfunction oh(t) {\n  if (t < BigInt(3))\n    throw new Error(\"sqrt is not defined for small field\");\n  let e = t - Ct, r = 0;\n  for (; e % sn === Ft; )\n    e /= sn, r++;\n  let n = sn;\n  const o = $n(t);\n  for (; Da(o, n) === 1; )\n    if (n++ > 1e3)\n      throw new Error(\"Cannot find square root: probably non-prime P\");\n  if (r === 1)\n    return yc;\n  let i = o.pow(n, e);\n  const c = (e + Ct) / sn;\n  return function(v, x) {\n    if (v.is0(x))\n      return x;\n    if (Da(v, x) !== 1)\n      throw new Error(\"Cannot find square root\");\n    let b = r, S = v.mul(v.ONE, i), T = v.pow(x, e), C = v.pow(x, c);\n    for (; !v.eql(T, v.ONE); ) {\n      if (v.is0(T))\n        return v.ZERO;\n      let P = 1, B = v.sqr(T);\n      for (; !v.eql(B, v.ONE); )\n        if (P++, B = v.sqr(B), P === b)\n          throw new Error(\"Cannot find square root\");\n      const R = Ct << BigInt(b - P - 1), z = v.pow(S, R);\n      b = P, S = v.sqr(z), T = v.mul(T, S), C = v.mul(C, z);\n    }\n    return C;\n  };\n}\nfunction ah(t) {\n  return t % pc === ih ? yc : t % gc === mc ? sh : oh(t);\n}\nconst uh = (t, e) => (wt(t, e) & Ct) === Ct, ch = [\n  \"create\",\n  \"isValid\",\n  \"is0\",\n  \"neg\",\n  \"inv\",\n  \"sqrt\",\n  \"sqr\",\n  \"eql\",\n  \"add\",\n  \"sub\",\n  \"mul\",\n  \"pow\",\n  \"div\",\n  \"addN\",\n  \"subN\",\n  \"mulN\",\n  \"sqrN\"\n];\nfunction lh(t) {\n  const e = {\n    ORDER: \"bigint\",\n    MASK: \"bigint\",\n    BYTES: \"number\",\n    BITS: \"number\"\n  }, r = ch.reduce((n, o) => (n[o] = \"function\", n), e);\n  return Ui(t, r), t;\n}\nfunction fh(t, e, r) {\n  if (r < Ft)\n    throw new Error(\"invalid exponent, negatives unsupported\");\n  if (r === Ft)\n    return t.ONE;\n  if (r === Ct)\n    return e;\n  let n = t.ONE, o = e;\n  for (; r > Ft; )\n    r & Ct && (n = t.mul(n, o)), o = t.sqr(o), r >>= Ct;\n  return n;\n}\nfunction vc(t, e, r = !1) {\n  const n = new Array(e.length).fill(r ? t.ZERO : void 0), o = e.reduce((c, f, v) => t.is0(f) ? c : (n[v] = c, t.mul(c, f)), t.ONE), i = t.inv(o);\n  return e.reduceRight((c, f, v) => t.is0(f) ? c : (n[v] = t.mul(c, n[v]), t.mul(c, f)), i), n;\n}\nfunction Da(t, e) {\n  const r = (t.ORDER - Ct) / sn, n = t.pow(e, r), o = t.eql(n, t.ONE), i = t.eql(n, t.ZERO), c = t.eql(n, t.neg(t.ONE));\n  if (!o && !i && !c)\n    throw new Error(\"invalid Legendre symbol result\");\n  return o ? 1 : i ? 0 : -1;\n}\nfunction hh(t, e) {\n  e !== void 0 && To(e);\n  const r = e !== void 0 ? e : t.toString(2).length, n = Math.ceil(r / 8);\n  return { nBitLength: r, nByteLength: n };\n}\nfunction $n(t, e, r = !1, n = {}) {\n  if (t <= Ft)\n    throw new Error(\"invalid field: expected ORDER > 0, got \" + t);\n  let o, i;\n  if (typeof e == \"object\" && e != null) {\n    if (n.sqrt || r)\n      throw new Error(\"cannot specify opts in two arguments\");\n    const b = e;\n    b.BITS && (o = b.BITS), b.sqrt && (i = b.sqrt), typeof b.isLE == \"boolean\" && (r = b.isLE);\n  } else\n    typeof e == \"number\" && (o = e), n.sqrt && (i = n.sqrt);\n  const { nBitLength: c, nByteLength: f } = hh(t, o);\n  if (f > 2048)\n    throw new Error(\"invalid field: expected ORDER of <= 2048 bytes\");\n  let v;\n  const x = Object.freeze({\n    ORDER: t,\n    isLE: r,\n    BITS: c,\n    BYTES: f,\n    MASK: Ns(c),\n    ZERO: Ft,\n    ONE: Ct,\n    create: (b) => wt(b, t),\n    isValid: (b) => {\n      if (typeof b != \"bigint\")\n        throw new Error(\"invalid field element: expected bigint, got \" + typeof b);\n      return Ft <= b && b < t;\n    },\n    is0: (b) => b === Ft,\n    // is valid and invertible\n    isValidNot0: (b) => !x.is0(b) && x.isValid(b),\n    isOdd: (b) => (b & Ct) === Ct,\n    neg: (b) => wt(-b, t),\n    eql: (b, S) => b === S,\n    sqr: (b) => wt(b * b, t),\n    add: (b, S) => wt(b + S, t),\n    sub: (b, S) => wt(b - S, t),\n    mul: (b, S) => wt(b * S, t),\n    pow: (b, S) => fh(x, b, S),\n    div: (b, S) => wt(b * Pa(S, t), t),\n    // Same as above, but doesn't normalize\n    sqrN: (b) => b * b,\n    addN: (b, S) => b + S,\n    subN: (b, S) => b - S,\n    mulN: (b, S) => b * S,\n    inv: (b) => Pa(b, t),\n    sqrt: i || ((b) => (v || (v = ah(t)), v(x, b))),\n    toBytes: (b) => r ? Os(b, f) : ua(b, f),\n    fromBytes: (b) => {\n      if (b.length !== f)\n        throw new Error(\"Field.fromBytes: expected \" + f + \" bytes, got \" + b.length);\n      return r ? wi(b) : Ls(b);\n    },\n    // TODO: we don't need it here, move out to separate fn\n    invertBatch: (b) => vc(x, b),\n    // We can't move this out because Fp6, Fp12 implement it\n    // and it's unclear what to return in there.\n    cmov: (b, S, T) => T ? S : b\n  });\n  return Object.freeze(x);\n}\nfunction wc(t) {\n  if (typeof t != \"bigint\")\n    throw new Error(\"field order must be bigint\");\n  const e = t.toString(2).length;\n  return Math.ceil(e / 8);\n}\nfunction xc(t) {\n  const e = wc(t);\n  return e + Math.ceil(e / 2);\n}\nfunction dh(t, e, r = !1) {\n  const n = t.length, o = wc(e), i = xc(e);\n  if (n < 16 || n < i || n > 1024)\n    throw new Error(\"expected \" + i + \"-1024 bytes of input, got \" + n);\n  const c = r ? wi(t) : Ls(t), f = wt(c, e - Ct) + Ct;\n  return r ? Os(f, o) : ua(f, o);\n}\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nconst jn = BigInt(0), on = BigInt(1);\nfunction ni(t, e) {\n  const r = e.negate();\n  return t ? r : e;\n}\nfunction bc(t, e, r) {\n  const n = e === \"pz\" ? (c) => c.pz : (c) => c.ez, o = vc(t.Fp, r.map(n));\n  return r.map((c, f) => c.toAffine(o[f])).map(t.fromAffine);\n}\nfunction _c(t, e) {\n  if (!Number.isSafeInteger(t) || t <= 0 || t > e)\n    throw new Error(\"invalid window size, expected [1..\" + e + \"], got W=\" + t);\n}\nfunction Ys(t, e) {\n  _c(t, e);\n  const r = Math.ceil(e / t) + 1, n = 2 ** (t - 1), o = 2 ** t, i = Ns(t), c = BigInt(t);\n  return { windows: r, windowSize: n, mask: i, maxNumber: o, shiftBy: c };\n}\nfunction $a(t, e, r) {\n  const { windowSize: n, mask: o, maxNumber: i, shiftBy: c } = r;\n  let f = Number(t & o), v = t >> c;\n  f > n && (f -= i, v += on);\n  const x = e * n, b = x + Math.abs(f) - 1, S = f === 0, T = f < 0, C = e % 2 !== 0;\n  return { nextN: v, offset: b, isZero: S, isNeg: T, isNegF: C, offsetF: x };\n}\nfunction ph(t, e) {\n  if (!Array.isArray(t))\n    throw new Error(\"array expected\");\n  t.forEach((r, n) => {\n    if (!(r instanceof e))\n      throw new Error(\"invalid point at index \" + n);\n  });\n}\nfunction mh(t, e) {\n  if (!Array.isArray(t))\n    throw new Error(\"array of scalars expected\");\n  t.forEach((r, n) => {\n    if (!e.isValid(r))\n      throw new Error(\"invalid scalar at index \" + n);\n  });\n}\nconst Js = /* @__PURE__ */ new WeakMap(), Ec = /* @__PURE__ */ new WeakMap();\nfunction Xs(t) {\n  return Ec.get(t) || 1;\n}\nfunction za(t) {\n  if (t !== jn)\n    throw new Error(\"invalid wNAF\");\n}\nfunction Mc(t, e) {\n  return {\n    constTimeNegate: ni,\n    hasPrecomputes(r) {\n      return Xs(r) !== 1;\n    },\n    // non-const time multiplication ladder\n    unsafeLadder(r, n, o = t.ZERO) {\n      let i = r;\n      for (; n > jn; )\n        n & on && (o = o.add(i)), i = i.double(), n >>= on;\n      return o;\n    },\n    /**\n     * Creates a wNAF precomputation window. Used for caching.\n     * Default window size is set by `utils.precompute()` and is equal to 8.\n     * Number of precomputed points depends on the curve size:\n     * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:\n     * - 𝑊 is the window size\n     * - 𝑛 is the bitlength of the curve order.\n     * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.\n     * @param elm Point instance\n     * @param W window size\n     * @returns precomputed point tables flattened to a single array\n     */\n    precomputeWindow(r, n) {\n      const { windows: o, windowSize: i } = Ys(n, e), c = [];\n      let f = r, v = f;\n      for (let x = 0; x < o; x++) {\n        v = f, c.push(v);\n        for (let b = 1; b < i; b++)\n          v = v.add(f), c.push(v);\n        f = v.double();\n      }\n      return c;\n    },\n    /**\n     * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.\n     * @param W window size\n     * @param precomputes precomputed tables\n     * @param n scalar (we don't check here, but should be less than curve order)\n     * @returns real and fake (for const-time) points\n     */\n    wNAF(r, n, o) {\n      let i = t.ZERO, c = t.BASE;\n      const f = Ys(r, e);\n      for (let v = 0; v < f.windows; v++) {\n        const { nextN: x, offset: b, isZero: S, isNeg: T, isNegF: C, offsetF: P } = $a(o, v, f);\n        o = x, S ? c = c.add(ni(C, n[P])) : i = i.add(ni(T, n[b]));\n      }\n      return za(o), { p: i, f: c };\n    },\n    /**\n     * Implements ec unsafe (non const-time) multiplication using precomputed tables and w-ary non-adjacent form.\n     * @param W window size\n     * @param precomputes precomputed tables\n     * @param n scalar (we don't check here, but should be less than curve order)\n     * @param acc accumulator point to add result of multiplication\n     * @returns point\n     */\n    wNAFUnsafe(r, n, o, i = t.ZERO) {\n      const c = Ys(r, e);\n      for (let f = 0; f < c.windows && o !== jn; f++) {\n        const { nextN: v, offset: x, isZero: b, isNeg: S } = $a(o, f, c);\n        if (o = v, !b) {\n          const T = n[x];\n          i = i.add(S ? T.negate() : T);\n        }\n      }\n      return za(o), i;\n    },\n    getPrecomputes(r, n, o) {\n      let i = Js.get(n);\n      return i || (i = this.precomputeWindow(n, r), r !== 1 && (typeof o == \"function\" && (i = o(i)), Js.set(n, i))), i;\n    },\n    wNAFCached(r, n, o) {\n      const i = Xs(r);\n      return this.wNAF(i, this.getPrecomputes(i, r, o), n);\n    },\n    wNAFCachedUnsafe(r, n, o, i) {\n      const c = Xs(r);\n      return c === 1 ? this.unsafeLadder(r, n, i) : this.wNAFUnsafe(c, this.getPrecomputes(c, r, o), n, i);\n    },\n    // We calculate precomputes for elliptic curve point multiplication\n    // using windowed method. This specifies window size and\n    // stores precomputed values. Usually only base point would be precomputed.\n    setWindowSize(r, n) {\n      _c(n, e), Ec.set(r, n), Js.delete(r);\n    }\n  };\n}\nfunction gh(t, e, r, n) {\n  let o = e, i = t.ZERO, c = t.ZERO;\n  for (; r > jn || n > jn; )\n    r & on && (i = i.add(o)), n & on && (c = c.add(o)), o = o.double(), r >>= on, n >>= on;\n  return { p1: i, p2: c };\n}\nfunction Cc(t, e, r, n) {\n  ph(r, t), mh(n, e);\n  const o = r.length, i = n.length;\n  if (o !== i)\n    throw new Error(\"arrays of points and scalars must have equal length\");\n  const c = t.ZERO, f = rh(BigInt(o));\n  let v = 1;\n  f > 12 ? v = f - 3 : f > 4 ? v = f - 2 : f > 0 && (v = 2);\n  const x = Ns(v), b = new Array(Number(x) + 1).fill(c), S = Math.floor((e.BITS - 1) / v) * v;\n  let T = c;\n  for (let C = S; C >= 0; C -= v) {\n    b.fill(c);\n    for (let B = 0; B < i; B++) {\n      const R = n[B], z = Number(R >> BigInt(C) & x);\n      b[z] = b[z].add(r[B]);\n    }\n    let P = c;\n    for (let B = b.length - 1, R = c; B > 0; B--)\n      R = R.add(b[B]), P = P.add(R);\n    if (T = T.add(P), C !== 0)\n      for (let B = 0; B < v; B++)\n        T = T.double();\n  }\n  return T;\n}\nfunction qa(t, e) {\n  if (e) {\n    if (e.ORDER !== t)\n      throw new Error(\"Field.ORDER must match order: Fp == p, Fn == n\");\n    return lh(e), e;\n  } else\n    return $n(t);\n}\nfunction Sc(t, e, r = {}) {\n  if (!e || typeof e != \"object\")\n    throw new Error(`expected valid ${t} CURVE object`);\n  for (const f of [\"p\", \"n\", \"h\"]) {\n    const v = e[f];\n    if (!(typeof v == \"bigint\" && v > jn))\n      throw new Error(`CURVE.${f} must be positive bigint`);\n  }\n  const n = qa(e.p, r.Fp), o = qa(e.n, r.Fn), c = [\"Gx\", \"Gy\", \"a\", t === \"weierstrass\" ? \"b\" : \"d\"];\n  for (const f of c)\n    if (!n.isValid(e[f]))\n      throw new Error(`CURVE.${f} must be valid field element of CURVE.Fp`);\n  return { Fp: n, Fn: o };\n}\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nconst tr = BigInt(0), Ot = BigInt(1), Qs = BigInt(2), yh = BigInt(8), vh = { zip215: !0 };\nfunction wh(t, e, r, n) {\n  const o = t.sqr(r), i = t.sqr(n), c = t.add(t.mul(e.a, o), i), f = t.add(t.ONE, t.mul(e.d, t.mul(o, i)));\n  return t.eql(c, f);\n}\nfunction xh(t, e = {}) {\n  const { Fp: r, Fn: n } = Sc(\"edwards\", t, e), { h: o, n: i } = t;\n  Ui(e, {}, { uvRatio: \"function\" });\n  const c = Qs << BigInt(n.BYTES * 8) - Ot, f = (B) => r.create(B), v = e.uvRatio || ((B, R) => {\n    try {\n      return { isValid: !0, value: r.sqrt(r.div(B, R)) };\n    } catch {\n      return { isValid: !1, value: tr };\n    }\n  });\n  if (!wh(r, t, t.Gx, t.Gy))\n    throw new Error(\"bad curve params: generator point\");\n  function x(B, R, z = !1) {\n    const K = z ? Ot : tr;\n    return Sn(\"coordinate \" + B, R, K, c), R;\n  }\n  function b(B) {\n    if (!(B instanceof C))\n      throw new Error(\"ExtendedPoint expected\");\n  }\n  const S = ms((B, R) => {\n    const { ex: z, ey: K, ez: Z } = B, Q = B.is0();\n    R == null && (R = Q ? yh : r.inv(Z));\n    const j = f(z * R), V = f(K * R), ee = f(Z * R);\n    if (Q)\n      return { x: tr, y: Ot };\n    if (ee !== Ot)\n      throw new Error(\"invZ was invalid\");\n    return { x: j, y: V };\n  }), T = ms((B) => {\n    const { a: R, d: z } = t;\n    if (B.is0())\n      throw new Error(\"bad point: ZERO\");\n    const { ex: K, ey: Z, ez: Q, et: j } = B, V = f(K * K), ee = f(Z * Z), G = f(Q * Q), N = f(G * G), O = f(V * R), L = f(G * f(O + ee)), F = f(N + f(z * f(V * ee)));\n    if (L !== F)\n      throw new Error(\"bad point: equation left != right (1)\");\n    const d = f(K * Z), s = f(Q * j);\n    if (d !== s)\n      throw new Error(\"bad point: equation left != right (2)\");\n    return !0;\n  });\n  class C {\n    constructor(R, z, K, Z) {\n      this.ex = x(\"x\", R), this.ey = x(\"y\", z), this.ez = x(\"z\", K, !0), this.et = x(\"t\", Z), Object.freeze(this);\n    }\n    get x() {\n      return this.toAffine().x;\n    }\n    get y() {\n      return this.toAffine().y;\n    }\n    static fromAffine(R) {\n      if (R instanceof C)\n        throw new Error(\"extended point not allowed\");\n      const { x: z, y: K } = R || {};\n      return x(\"x\", z), x(\"y\", K), new C(z, K, Ot, f(z * K));\n    }\n    static normalizeZ(R) {\n      return bc(C, \"ez\", R);\n    }\n    // Multiscalar Multiplication\n    static msm(R, z) {\n      return Cc(C, n, R, z);\n    }\n    // \"Private method\", don't use it directly\n    _setWindowSize(R) {\n      this.precompute(R);\n    }\n    precompute(R = 8, z = !0) {\n      return P.setWindowSize(this, R), z || this.multiply(Qs), this;\n    }\n    // Not required for fromHex(), which always creates valid points.\n    // Could be useful for fromAffine().\n    assertValidity() {\n      T(this);\n    }\n    // Compare one point to another.\n    equals(R) {\n      b(R);\n      const { ex: z, ey: K, ez: Z } = this, { ex: Q, ey: j, ez: V } = R, ee = f(z * V), G = f(Q * Z), N = f(K * V), O = f(j * Z);\n      return ee === G && N === O;\n    }\n    is0() {\n      return this.equals(C.ZERO);\n    }\n    negate() {\n      return new C(f(-this.ex), this.ey, this.ez, f(-this.et));\n    }\n    // Fast algo for doubling Extended Point.\n    // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#doubling-dbl-2008-hwcd\n    // Cost: 4M + 4S + 1*a + 6add + 1*2.\n    double() {\n      const { a: R } = t, { ex: z, ey: K, ez: Z } = this, Q = f(z * z), j = f(K * K), V = f(Qs * f(Z * Z)), ee = f(R * Q), G = z + K, N = f(f(G * G) - Q - j), O = ee + j, L = O - V, F = ee - j, d = f(N * L), s = f(O * F), u = f(N * F), h = f(L * O);\n      return new C(d, s, h, u);\n    }\n    // Fast algo for adding 2 Extended Points.\n    // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#addition-add-2008-hwcd\n    // Cost: 9M + 1*a + 1*d + 7add.\n    add(R) {\n      b(R);\n      const { a: z, d: K } = t, { ex: Z, ey: Q, ez: j, et: V } = this, { ex: ee, ey: G, ez: N, et: O } = R, L = f(Z * ee), F = f(Q * G), d = f(V * K * O), s = f(j * N), u = f((Z + Q) * (ee + G) - L - F), h = s - d, g = s + d, w = f(F - z * L), _ = f(u * h), A = f(g * w), p = f(u * w), a = f(h * g);\n      return new C(_, A, a, p);\n    }\n    subtract(R) {\n      return this.add(R.negate());\n    }\n    // Constant-time multiplication.\n    multiply(R) {\n      const z = R;\n      Sn(\"scalar\", z, Ot, i);\n      const { p: K, f: Z } = P.wNAFCached(this, z, C.normalizeZ);\n      return C.normalizeZ([K, Z])[0];\n    }\n    // Non-constant-time multiplication. Uses double-and-add algorithm.\n    // It's faster, but should only be used when you don't care about\n    // an exposed private key e.g. sig verification.\n    // Does NOT allow scalars higher than CURVE.n.\n    // Accepts optional accumulator to merge with multiply (important for sparse scalars)\n    multiplyUnsafe(R, z = C.ZERO) {\n      const K = R;\n      return Sn(\"scalar\", K, tr, i), K === tr ? C.ZERO : this.is0() || K === Ot ? this : P.wNAFCachedUnsafe(this, K, C.normalizeZ, z);\n    }\n    // Checks if point is of small order.\n    // If you add something to small order point, you will have \"dirty\"\n    // point with torsion component.\n    // Multiplies point by cofactor and checks if the result is 0.\n    isSmallOrder() {\n      return this.multiplyUnsafe(o).is0();\n    }\n    // Multiplies point by curve order and checks if the result is 0.\n    // Returns `false` is the point is dirty.\n    isTorsionFree() {\n      return P.wNAFCachedUnsafe(this, i).is0();\n    }\n    // Converts Extended point to default (x, y) coordinates.\n    // Can accept precomputed Z^-1 - for example, from invertBatch.\n    toAffine(R) {\n      return S(this, R);\n    }\n    clearCofactor() {\n      return o === Ot ? this : this.multiplyUnsafe(o);\n    }\n    static fromBytes(R, z = !1) {\n      return ar(R), this.fromHex(R, z);\n    }\n    // Converts hash string or Uint8Array to Point.\n    // Uses algo from RFC8032 5.1.3.\n    static fromHex(R, z = !1) {\n      const { d: K, a: Z } = t, Q = r.BYTES;\n      R = vt(\"pointHex\", R, Q), fn(\"zip215\", z);\n      const j = R.slice(), V = R[Q - 1];\n      j[Q - 1] = V & -129;\n      const ee = wi(j), G = z ? c : r.ORDER;\n      Sn(\"pointHex.y\", ee, tr, G);\n      const N = f(ee * ee), O = f(N - Ot), L = f(K * N - Z);\n      let { isValid: F, value: d } = v(O, L);\n      if (!F)\n        throw new Error(\"Point.fromHex: invalid y coordinate\");\n      const s = (d & Ot) === Ot, u = (V & 128) !== 0;\n      if (!z && d === tr && u)\n        throw new Error(\"Point.fromHex: x=0 and x_0=1\");\n      return u !== s && (d = f(-d)), C.fromAffine({ x: d, y: ee });\n    }\n    static fromPrivateScalar(R) {\n      return C.BASE.multiply(R);\n    }\n    toBytes() {\n      const { x: R, y: z } = this.toAffine(), K = Os(z, r.BYTES);\n      return K[K.length - 1] |= R & Ot ? 128 : 0, K;\n    }\n    /** @deprecated use `toBytes` */\n    toRawBytes() {\n      return this.toBytes();\n    }\n    toHex() {\n      return Nn(this.toBytes());\n    }\n    toString() {\n      return `<Point ${this.is0() ? \"ZERO\" : this.toHex()}>`;\n    }\n  }\n  C.BASE = new C(t.Gx, t.Gy, Ot, f(t.Gx * t.Gy)), C.ZERO = new C(tr, Ot, Ot, tr), C.Fp = r, C.Fn = n;\n  const P = Mc(C, n.BYTES * 8);\n  return C;\n}\nfunction bh(t, e) {\n  Ui(e, {\n    hash: \"function\"\n  }, {\n    adjustScalarBytes: \"function\",\n    randomBytes: \"function\",\n    domain: \"function\",\n    prehash: \"function\",\n    mapToCurve: \"function\"\n  });\n  const { prehash: r, hash: n } = e, { BASE: o, Fp: i, Fn: c } = t, f = c.ORDER, v = e.randomBytes || lc, x = e.adjustScalarBytes || ((j) => j), b = e.domain || ((j, V, ee) => {\n    if (fn(\"phflag\", ee), V.length || ee)\n      throw new Error(\"Contexts/pre-hash are not supported\");\n    return j;\n  });\n  function S(j) {\n    return c.create(j);\n  }\n  function T(j) {\n    return S(wi(j));\n  }\n  function C(j) {\n    const V = i.BYTES;\n    j = vt(\"private key\", j, V);\n    const ee = vt(\"hashed private key\", n(j), 2 * V), G = x(ee.slice(0, V)), N = ee.slice(V, 2 * V), O = T(G);\n    return { head: G, prefix: N, scalar: O };\n  }\n  function P(j) {\n    const { head: V, prefix: ee, scalar: G } = C(j), N = o.multiply(G), O = N.toBytes();\n    return { head: V, prefix: ee, scalar: G, point: N, pointBytes: O };\n  }\n  function B(j) {\n    return P(j).pointBytes;\n  }\n  function R(j = Uint8Array.of(), ...V) {\n    const ee = vr(...V);\n    return T(n(b(ee, vt(\"context\", j), !!r)));\n  }\n  function z(j, V, ee = {}) {\n    j = vt(\"message\", j), r && (j = r(j));\n    const { prefix: G, scalar: N, pointBytes: O } = P(V), L = R(ee.context, G, j), F = o.multiply(L).toBytes(), d = R(ee.context, F, O, j), s = S(L + d * N);\n    Sn(\"signature.s\", s, tr, f);\n    const u = i.BYTES, h = vr(F, Os(s, u));\n    return vt(\"result\", h, u * 2);\n  }\n  const K = vh;\n  function Z(j, V, ee, G = K) {\n    const { context: N, zip215: O } = G, L = i.BYTES;\n    j = vt(\"signature\", j, 2 * L), V = vt(\"message\", V), ee = vt(\"publicKey\", ee, L), O !== void 0 && fn(\"zip215\", O), r && (V = r(V));\n    const F = wi(j.slice(L, 2 * L));\n    let d, s, u;\n    try {\n      d = t.fromHex(ee, O), s = t.fromHex(j.slice(0, L), O), u = o.multiplyUnsafe(F);\n    } catch {\n      return !1;\n    }\n    if (!O && d.isSmallOrder())\n      return !1;\n    const h = R(N, s.toBytes(), d.toBytes(), V);\n    return s.add(d.multiplyUnsafe(h)).subtract(u).clearCofactor().is0();\n  }\n  return o.precompute(8), { getPublicKey: B, sign: z, verify: Z, utils: {\n    getExtendedPublicKey: P,\n    /** ed25519 priv keys are uniform 32b. No need to check for modulo bias, like in secp256k1. */\n    randomPrivateKey: () => v(i.BYTES),\n    /**\n     * We're doing scalar multiplication (used in getPublicKey etc) with precomputed BASE_POINT\n     * values. This slows down first getPublicKey() by milliseconds (see Speed section),\n     * but allows to speed-up subsequent getPublicKey() calls up to 20x.\n     * @param windowSize 2, 4, 8, 16\n     */\n    precompute(j = 8, V = t.BASE) {\n      return V.precompute(j, !1);\n    }\n  }, Point: t };\n}\nfunction _h(t) {\n  const e = {\n    a: t.a,\n    d: t.d,\n    p: t.Fp.ORDER,\n    n: t.n,\n    h: t.h,\n    Gx: t.Gx,\n    Gy: t.Gy\n  }, r = t.Fp, n = $n(e.n, t.nBitLength, !0), o = { Fp: r, Fn: n, uvRatio: t.uvRatio }, i = {\n    hash: t.hash,\n    randomBytes: t.randomBytes,\n    adjustScalarBytes: t.adjustScalarBytes,\n    domain: t.domain,\n    prehash: t.prehash,\n    mapToCurve: t.mapToCurve\n  };\n  return { CURVE: e, curveOpts: o, eddsaOpts: i };\n}\nfunction Eh(t, e) {\n  return Object.assign({}, e, { ExtendedPoint: e.Point, CURVE: t });\n}\nfunction Mh(t) {\n  const { CURVE: e, curveOpts: r, eddsaOpts: n } = _h(t), o = xh(e, r), i = bh(o, n);\n  return Eh(t, i);\n}\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nBigInt(0);\nconst Ch = BigInt(1), Za = BigInt(2);\nBigInt(3);\nconst Sh = BigInt(5), Ah = BigInt(8), js = {\n  p: BigInt(\"0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffed\"),\n  n: BigInt(\"0x1000000000000000000000000000000014def9dea2f79cd65812631a5cf5d3ed\"),\n  h: Ah,\n  a: BigInt(\"0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec\"),\n  d: BigInt(\"0x52036cee2b6ffe738cc740797779e89800700a4d4141d8ab75eb4dca135978a3\"),\n  Gx: BigInt(\"0x216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a\"),\n  Gy: BigInt(\"0x6666666666666666666666666666666666666666666666666666666666666658\")\n};\nfunction kh(t) {\n  const e = BigInt(10), r = BigInt(20), n = BigInt(40), o = BigInt(80), i = js.p, f = t * t % i * t % i, v = pt(f, Za, i) * f % i, x = pt(v, Ch, i) * t % i, b = pt(x, Sh, i) * x % i, S = pt(b, e, i) * b % i, T = pt(S, r, i) * S % i, C = pt(T, n, i) * T % i, P = pt(C, o, i) * C % i, B = pt(P, o, i) * C % i, R = pt(B, e, i) * b % i;\n  return { pow_p_5_8: pt(R, Za, i) * t % i, b2: f };\n}\nfunction Ih(t) {\n  return t[0] &= 248, t[31] &= 127, t[31] |= 64, t;\n}\nconst Va = /* @__PURE__ */ BigInt(\"19681161376707505956807079304988542015446066515923890162744021073123829784752\");\nfunction Bh(t, e) {\n  const r = js.p, n = wt(e * e * e, r), o = wt(n * n * e, r), i = kh(t * o).pow_p_5_8;\n  let c = wt(t * n * i, r);\n  const f = wt(e * c * c, r), v = c, x = wt(c * Va, r), b = f === t, S = f === wt(-t, r), T = f === wt(-t * Va, r);\n  return b && (c = v), (S || T) && (c = x), uh(c, r) && (c = wt(-c, r)), { isValid: b || S, value: c };\n}\nconst Rh = $n(js.p, void 0, !0), Th = {\n  ...js,\n  Fp: Rh,\n  hash: eh,\n  adjustScalarBytes: Ih,\n  // dom2\n  // Ratio of u to v. Allows us to combine inversion and square root. Uses algo from RFC8032 5.1.3.\n  // Constant-time, u/√v\n  uvRatio: Bh\n}, Fi = Mh(Th);\nvar rs = { exports: {} };\nconst Lh = {}, Oh = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  default: Lh\n}, Symbol.toStringTag, { value: \"Module\" })), Ac = /* @__PURE__ */ ea(Oh);\nvar Nh = rs.exports, Ha;\nfunction jh() {\n  return Ha || (Ha = 1, function(t) {\n    (function(e, r) {\n      function n(d, s) {\n        if (!d) throw new Error(s || \"Assertion failed\");\n      }\n      function o(d, s) {\n        d.super_ = s;\n        var u = function() {\n        };\n        u.prototype = s.prototype, d.prototype = new u(), d.prototype.constructor = d;\n      }\n      function i(d, s, u) {\n        if (i.isBN(d))\n          return d;\n        this.negative = 0, this.words = null, this.length = 0, this.red = null, d !== null && ((s === \"le\" || s === \"be\") && (u = s, s = 10), this._init(d || 0, s || 10, u || \"be\"));\n      }\n      typeof e == \"object\" ? e.exports = i : r.BN = i, i.BN = i, i.wordSize = 26;\n      var c;\n      try {\n        typeof window < \"u\" && typeof window.Buffer < \"u\" ? c = window.Buffer : c = Ac.Buffer;\n      } catch {\n      }\n      i.isBN = function(s) {\n        return s instanceof i ? !0 : s !== null && typeof s == \"object\" && s.constructor.wordSize === i.wordSize && Array.isArray(s.words);\n      }, i.max = function(s, u) {\n        return s.cmp(u) > 0 ? s : u;\n      }, i.min = function(s, u) {\n        return s.cmp(u) < 0 ? s : u;\n      }, i.prototype._init = function(s, u, h) {\n        if (typeof s == \"number\")\n          return this._initNumber(s, u, h);\n        if (typeof s == \"object\")\n          return this._initArray(s, u, h);\n        u === \"hex\" && (u = 16), n(u === (u | 0) && u >= 2 && u <= 36), s = s.toString().replace(/\\s+/g, \"\");\n        var g = 0;\n        s[0] === \"-\" && (g++, this.negative = 1), g < s.length && (u === 16 ? this._parseHex(s, g, h) : (this._parseBase(s, u, g), h === \"le\" && this._initArray(this.toArray(), u, h)));\n      }, i.prototype._initNumber = function(s, u, h) {\n        s < 0 && (this.negative = 1, s = -s), s < 67108864 ? (this.words = [s & 67108863], this.length = 1) : s < 4503599627370496 ? (this.words = [\n          s & 67108863,\n          s / 67108864 & 67108863\n        ], this.length = 2) : (n(s < 9007199254740992), this.words = [\n          s & 67108863,\n          s / 67108864 & 67108863,\n          1\n        ], this.length = 3), h === \"le\" && this._initArray(this.toArray(), u, h);\n      }, i.prototype._initArray = function(s, u, h) {\n        if (n(typeof s.length == \"number\"), s.length <= 0)\n          return this.words = [0], this.length = 1, this;\n        this.length = Math.ceil(s.length / 3), this.words = new Array(this.length);\n        for (var g = 0; g < this.length; g++)\n          this.words[g] = 0;\n        var w, _, A = 0;\n        if (h === \"be\")\n          for (g = s.length - 1, w = 0; g >= 0; g -= 3)\n            _ = s[g] | s[g - 1] << 8 | s[g - 2] << 16, this.words[w] |= _ << A & 67108863, this.words[w + 1] = _ >>> 26 - A & 67108863, A += 24, A >= 26 && (A -= 26, w++);\n        else if (h === \"le\")\n          for (g = 0, w = 0; g < s.length; g += 3)\n            _ = s[g] | s[g + 1] << 8 | s[g + 2] << 16, this.words[w] |= _ << A & 67108863, this.words[w + 1] = _ >>> 26 - A & 67108863, A += 24, A >= 26 && (A -= 26, w++);\n        return this._strip();\n      };\n      function f(d, s) {\n        var u = d.charCodeAt(s);\n        if (u >= 48 && u <= 57)\n          return u - 48;\n        if (u >= 65 && u <= 70)\n          return u - 55;\n        if (u >= 97 && u <= 102)\n          return u - 87;\n        n(!1, \"Invalid character in \" + d);\n      }\n      function v(d, s, u) {\n        var h = f(d, u);\n        return u - 1 >= s && (h |= f(d, u - 1) << 4), h;\n      }\n      i.prototype._parseHex = function(s, u, h) {\n        this.length = Math.ceil((s.length - u) / 6), this.words = new Array(this.length);\n        for (var g = 0; g < this.length; g++)\n          this.words[g] = 0;\n        var w = 0, _ = 0, A;\n        if (h === \"be\")\n          for (g = s.length - 1; g >= u; g -= 2)\n            A = v(s, u, g) << w, this.words[_] |= A & 67108863, w >= 18 ? (w -= 18, _ += 1, this.words[_] |= A >>> 26) : w += 8;\n        else {\n          var p = s.length - u;\n          for (g = p % 2 === 0 ? u + 1 : u; g < s.length; g += 2)\n            A = v(s, u, g) << w, this.words[_] |= A & 67108863, w >= 18 ? (w -= 18, _ += 1, this.words[_] |= A >>> 26) : w += 8;\n        }\n        this._strip();\n      };\n      function x(d, s, u, h) {\n        for (var g = 0, w = 0, _ = Math.min(d.length, u), A = s; A < _; A++) {\n          var p = d.charCodeAt(A) - 48;\n          g *= h, p >= 49 ? w = p - 49 + 10 : p >= 17 ? w = p - 17 + 10 : w = p, n(p >= 0 && w < h, \"Invalid character\"), g += w;\n        }\n        return g;\n      }\n      i.prototype._parseBase = function(s, u, h) {\n        this.words = [0], this.length = 1;\n        for (var g = 0, w = 1; w <= 67108863; w *= u)\n          g++;\n        g--, w = w / u | 0;\n        for (var _ = s.length - h, A = _ % g, p = Math.min(_, _ - A) + h, a = 0, l = h; l < p; l += g)\n          a = x(s, l, l + g, u), this.imuln(w), this.words[0] + a < 67108864 ? this.words[0] += a : this._iaddn(a);\n        if (A !== 0) {\n          var M = 1;\n          for (a = x(s, l, s.length, u), l = 0; l < A; l++)\n            M *= u;\n          this.imuln(M), this.words[0] + a < 67108864 ? this.words[0] += a : this._iaddn(a);\n        }\n        this._strip();\n      }, i.prototype.copy = function(s) {\n        s.words = new Array(this.length);\n        for (var u = 0; u < this.length; u++)\n          s.words[u] = this.words[u];\n        s.length = this.length, s.negative = this.negative, s.red = this.red;\n      };\n      function b(d, s) {\n        d.words = s.words, d.length = s.length, d.negative = s.negative, d.red = s.red;\n      }\n      if (i.prototype._move = function(s) {\n        b(s, this);\n      }, i.prototype.clone = function() {\n        var s = new i(null);\n        return this.copy(s), s;\n      }, i.prototype._expand = function(s) {\n        for (; this.length < s; )\n          this.words[this.length++] = 0;\n        return this;\n      }, i.prototype._strip = function() {\n        for (; this.length > 1 && this.words[this.length - 1] === 0; )\n          this.length--;\n        return this._normSign();\n      }, i.prototype._normSign = function() {\n        return this.length === 1 && this.words[0] === 0 && (this.negative = 0), this;\n      }, typeof Symbol < \"u\" && typeof Symbol.for == \"function\")\n        try {\n          i.prototype[Symbol.for(\"nodejs.util.inspect.custom\")] = S;\n        } catch {\n          i.prototype.inspect = S;\n        }\n      else\n        i.prototype.inspect = S;\n      function S() {\n        return (this.red ? \"<BN-R: \" : \"<BN: \") + this.toString(16) + \">\";\n      }\n      var T = [\n        \"\",\n        \"0\",\n        \"00\",\n        \"000\",\n        \"0000\",\n        \"00000\",\n        \"000000\",\n        \"0000000\",\n        \"00000000\",\n        \"000000000\",\n        \"0000000000\",\n        \"00000000000\",\n        \"000000000000\",\n        \"0000000000000\",\n        \"00000000000000\",\n        \"000000000000000\",\n        \"0000000000000000\",\n        \"00000000000000000\",\n        \"000000000000000000\",\n        \"0000000000000000000\",\n        \"00000000000000000000\",\n        \"000000000000000000000\",\n        \"0000000000000000000000\",\n        \"00000000000000000000000\",\n        \"000000000000000000000000\",\n        \"0000000000000000000000000\"\n      ], C = [\n        0,\n        0,\n        25,\n        16,\n        12,\n        11,\n        10,\n        9,\n        8,\n        8,\n        7,\n        7,\n        7,\n        7,\n        6,\n        6,\n        6,\n        6,\n        6,\n        6,\n        6,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5\n      ], P = [\n        0,\n        0,\n        33554432,\n        43046721,\n        16777216,\n        48828125,\n        60466176,\n        40353607,\n        16777216,\n        43046721,\n        1e7,\n        19487171,\n        35831808,\n        62748517,\n        7529536,\n        11390625,\n        16777216,\n        24137569,\n        34012224,\n        47045881,\n        64e6,\n        4084101,\n        5153632,\n        6436343,\n        7962624,\n        9765625,\n        11881376,\n        14348907,\n        17210368,\n        20511149,\n        243e5,\n        28629151,\n        33554432,\n        39135393,\n        45435424,\n        52521875,\n        60466176\n      ];\n      i.prototype.toString = function(s, u) {\n        s = s || 10, u = u | 0 || 1;\n        var h;\n        if (s === 16 || s === \"hex\") {\n          h = \"\";\n          for (var g = 0, w = 0, _ = 0; _ < this.length; _++) {\n            var A = this.words[_], p = ((A << g | w) & 16777215).toString(16);\n            w = A >>> 24 - g & 16777215, g += 2, g >= 26 && (g -= 26, _--), w !== 0 || _ !== this.length - 1 ? h = T[6 - p.length] + p + h : h = p + h;\n          }\n          for (w !== 0 && (h = w.toString(16) + h); h.length % u !== 0; )\n            h = \"0\" + h;\n          return this.negative !== 0 && (h = \"-\" + h), h;\n        }\n        if (s === (s | 0) && s >= 2 && s <= 36) {\n          var a = C[s], l = P[s];\n          h = \"\";\n          var M = this.clone();\n          for (M.negative = 0; !M.isZero(); ) {\n            var k = M.modrn(l).toString(s);\n            M = M.idivn(l), M.isZero() ? h = k + h : h = T[a - k.length] + k + h;\n          }\n          for (this.isZero() && (h = \"0\" + h); h.length % u !== 0; )\n            h = \"0\" + h;\n          return this.negative !== 0 && (h = \"-\" + h), h;\n        }\n        n(!1, \"Base should be between 2 and 36\");\n      }, i.prototype.toNumber = function() {\n        var s = this.words[0];\n        return this.length === 2 ? s += this.words[1] * 67108864 : this.length === 3 && this.words[2] === 1 ? s += 4503599627370496 + this.words[1] * 67108864 : this.length > 2 && n(!1, \"Number can only safely store up to 53 bits\"), this.negative !== 0 ? -s : s;\n      }, i.prototype.toJSON = function() {\n        return this.toString(16, 2);\n      }, c && (i.prototype.toBuffer = function(s, u) {\n        return this.toArrayLike(c, s, u);\n      }), i.prototype.toArray = function(s, u) {\n        return this.toArrayLike(Array, s, u);\n      };\n      var B = function(s, u) {\n        return s.allocUnsafe ? s.allocUnsafe(u) : new s(u);\n      };\n      i.prototype.toArrayLike = function(s, u, h) {\n        this._strip();\n        var g = this.byteLength(), w = h || Math.max(1, g);\n        n(g <= w, \"byte array longer than desired length\"), n(w > 0, \"Requested array length <= 0\");\n        var _ = B(s, w), A = u === \"le\" ? \"LE\" : \"BE\";\n        return this[\"_toArrayLike\" + A](_, g), _;\n      }, i.prototype._toArrayLikeLE = function(s, u) {\n        for (var h = 0, g = 0, w = 0, _ = 0; w < this.length; w++) {\n          var A = this.words[w] << _ | g;\n          s[h++] = A & 255, h < s.length && (s[h++] = A >> 8 & 255), h < s.length && (s[h++] = A >> 16 & 255), _ === 6 ? (h < s.length && (s[h++] = A >> 24 & 255), g = 0, _ = 0) : (g = A >>> 24, _ += 2);\n        }\n        if (h < s.length)\n          for (s[h++] = g; h < s.length; )\n            s[h++] = 0;\n      }, i.prototype._toArrayLikeBE = function(s, u) {\n        for (var h = s.length - 1, g = 0, w = 0, _ = 0; w < this.length; w++) {\n          var A = this.words[w] << _ | g;\n          s[h--] = A & 255, h >= 0 && (s[h--] = A >> 8 & 255), h >= 0 && (s[h--] = A >> 16 & 255), _ === 6 ? (h >= 0 && (s[h--] = A >> 24 & 255), g = 0, _ = 0) : (g = A >>> 24, _ += 2);\n        }\n        if (h >= 0)\n          for (s[h--] = g; h >= 0; )\n            s[h--] = 0;\n      }, Math.clz32 ? i.prototype._countBits = function(s) {\n        return 32 - Math.clz32(s);\n      } : i.prototype._countBits = function(s) {\n        var u = s, h = 0;\n        return u >= 4096 && (h += 13, u >>>= 13), u >= 64 && (h += 7, u >>>= 7), u >= 8 && (h += 4, u >>>= 4), u >= 2 && (h += 2, u >>>= 2), h + u;\n      }, i.prototype._zeroBits = function(s) {\n        if (s === 0) return 26;\n        var u = s, h = 0;\n        return (u & 8191) === 0 && (h += 13, u >>>= 13), (u & 127) === 0 && (h += 7, u >>>= 7), (u & 15) === 0 && (h += 4, u >>>= 4), (u & 3) === 0 && (h += 2, u >>>= 2), (u & 1) === 0 && h++, h;\n      }, i.prototype.bitLength = function() {\n        var s = this.words[this.length - 1], u = this._countBits(s);\n        return (this.length - 1) * 26 + u;\n      };\n      function R(d) {\n        for (var s = new Array(d.bitLength()), u = 0; u < s.length; u++) {\n          var h = u / 26 | 0, g = u % 26;\n          s[u] = d.words[h] >>> g & 1;\n        }\n        return s;\n      }\n      i.prototype.zeroBits = function() {\n        if (this.isZero()) return 0;\n        for (var s = 0, u = 0; u < this.length; u++) {\n          var h = this._zeroBits(this.words[u]);\n          if (s += h, h !== 26) break;\n        }\n        return s;\n      }, i.prototype.byteLength = function() {\n        return Math.ceil(this.bitLength() / 8);\n      }, i.prototype.toTwos = function(s) {\n        return this.negative !== 0 ? this.abs().inotn(s).iaddn(1) : this.clone();\n      }, i.prototype.fromTwos = function(s) {\n        return this.testn(s - 1) ? this.notn(s).iaddn(1).ineg() : this.clone();\n      }, i.prototype.isNeg = function() {\n        return this.negative !== 0;\n      }, i.prototype.neg = function() {\n        return this.clone().ineg();\n      }, i.prototype.ineg = function() {\n        return this.isZero() || (this.negative ^= 1), this;\n      }, i.prototype.iuor = function(s) {\n        for (; this.length < s.length; )\n          this.words[this.length++] = 0;\n        for (var u = 0; u < s.length; u++)\n          this.words[u] = this.words[u] | s.words[u];\n        return this._strip();\n      }, i.prototype.ior = function(s) {\n        return n((this.negative | s.negative) === 0), this.iuor(s);\n      }, i.prototype.or = function(s) {\n        return this.length > s.length ? this.clone().ior(s) : s.clone().ior(this);\n      }, i.prototype.uor = function(s) {\n        return this.length > s.length ? this.clone().iuor(s) : s.clone().iuor(this);\n      }, i.prototype.iuand = function(s) {\n        var u;\n        this.length > s.length ? u = s : u = this;\n        for (var h = 0; h < u.length; h++)\n          this.words[h] = this.words[h] & s.words[h];\n        return this.length = u.length, this._strip();\n      }, i.prototype.iand = function(s) {\n        return n((this.negative | s.negative) === 0), this.iuand(s);\n      }, i.prototype.and = function(s) {\n        return this.length > s.length ? this.clone().iand(s) : s.clone().iand(this);\n      }, i.prototype.uand = function(s) {\n        return this.length > s.length ? this.clone().iuand(s) : s.clone().iuand(this);\n      }, i.prototype.iuxor = function(s) {\n        var u, h;\n        this.length > s.length ? (u = this, h = s) : (u = s, h = this);\n        for (var g = 0; g < h.length; g++)\n          this.words[g] = u.words[g] ^ h.words[g];\n        if (this !== u)\n          for (; g < u.length; g++)\n            this.words[g] = u.words[g];\n        return this.length = u.length, this._strip();\n      }, i.prototype.ixor = function(s) {\n        return n((this.negative | s.negative) === 0), this.iuxor(s);\n      }, i.prototype.xor = function(s) {\n        return this.length > s.length ? this.clone().ixor(s) : s.clone().ixor(this);\n      }, i.prototype.uxor = function(s) {\n        return this.length > s.length ? this.clone().iuxor(s) : s.clone().iuxor(this);\n      }, i.prototype.inotn = function(s) {\n        n(typeof s == \"number\" && s >= 0);\n        var u = Math.ceil(s / 26) | 0, h = s % 26;\n        this._expand(u), h > 0 && u--;\n        for (var g = 0; g < u; g++)\n          this.words[g] = ~this.words[g] & 67108863;\n        return h > 0 && (this.words[g] = ~this.words[g] & 67108863 >> 26 - h), this._strip();\n      }, i.prototype.notn = function(s) {\n        return this.clone().inotn(s);\n      }, i.prototype.setn = function(s, u) {\n        n(typeof s == \"number\" && s >= 0);\n        var h = s / 26 | 0, g = s % 26;\n        return this._expand(h + 1), u ? this.words[h] = this.words[h] | 1 << g : this.words[h] = this.words[h] & ~(1 << g), this._strip();\n      }, i.prototype.iadd = function(s) {\n        var u;\n        if (this.negative !== 0 && s.negative === 0)\n          return this.negative = 0, u = this.isub(s), this.negative ^= 1, this._normSign();\n        if (this.negative === 0 && s.negative !== 0)\n          return s.negative = 0, u = this.isub(s), s.negative = 1, u._normSign();\n        var h, g;\n        this.length > s.length ? (h = this, g = s) : (h = s, g = this);\n        for (var w = 0, _ = 0; _ < g.length; _++)\n          u = (h.words[_] | 0) + (g.words[_] | 0) + w, this.words[_] = u & 67108863, w = u >>> 26;\n        for (; w !== 0 && _ < h.length; _++)\n          u = (h.words[_] | 0) + w, this.words[_] = u & 67108863, w = u >>> 26;\n        if (this.length = h.length, w !== 0)\n          this.words[this.length] = w, this.length++;\n        else if (h !== this)\n          for (; _ < h.length; _++)\n            this.words[_] = h.words[_];\n        return this;\n      }, i.prototype.add = function(s) {\n        var u;\n        return s.negative !== 0 && this.negative === 0 ? (s.negative = 0, u = this.sub(s), s.negative ^= 1, u) : s.negative === 0 && this.negative !== 0 ? (this.negative = 0, u = s.sub(this), this.negative = 1, u) : this.length > s.length ? this.clone().iadd(s) : s.clone().iadd(this);\n      }, i.prototype.isub = function(s) {\n        if (s.negative !== 0) {\n          s.negative = 0;\n          var u = this.iadd(s);\n          return s.negative = 1, u._normSign();\n        } else if (this.negative !== 0)\n          return this.negative = 0, this.iadd(s), this.negative = 1, this._normSign();\n        var h = this.cmp(s);\n        if (h === 0)\n          return this.negative = 0, this.length = 1, this.words[0] = 0, this;\n        var g, w;\n        h > 0 ? (g = this, w = s) : (g = s, w = this);\n        for (var _ = 0, A = 0; A < w.length; A++)\n          u = (g.words[A] | 0) - (w.words[A] | 0) + _, _ = u >> 26, this.words[A] = u & 67108863;\n        for (; _ !== 0 && A < g.length; A++)\n          u = (g.words[A] | 0) + _, _ = u >> 26, this.words[A] = u & 67108863;\n        if (_ === 0 && A < g.length && g !== this)\n          for (; A < g.length; A++)\n            this.words[A] = g.words[A];\n        return this.length = Math.max(this.length, A), g !== this && (this.negative = 1), this._strip();\n      }, i.prototype.sub = function(s) {\n        return this.clone().isub(s);\n      };\n      function z(d, s, u) {\n        u.negative = s.negative ^ d.negative;\n        var h = d.length + s.length | 0;\n        u.length = h, h = h - 1 | 0;\n        var g = d.words[0] | 0, w = s.words[0] | 0, _ = g * w, A = _ & 67108863, p = _ / 67108864 | 0;\n        u.words[0] = A;\n        for (var a = 1; a < h; a++) {\n          for (var l = p >>> 26, M = p & 67108863, k = Math.min(a, s.length - 1), $ = Math.max(0, a - d.length + 1); $ <= k; $++) {\n            var X = a - $ | 0;\n            g = d.words[X] | 0, w = s.words[$] | 0, _ = g * w + M, l += _ / 67108864 | 0, M = _ & 67108863;\n          }\n          u.words[a] = M | 0, p = l | 0;\n        }\n        return p !== 0 ? u.words[a] = p | 0 : u.length--, u._strip();\n      }\n      var K = function(s, u, h) {\n        var g = s.words, w = u.words, _ = h.words, A = 0, p, a, l, M = g[0] | 0, k = M & 8191, $ = M >>> 13, X = g[1] | 0, re = X & 8191, se = X >>> 13, ut = g[2] | 0, xe = ut & 8191, Ie = ut >>> 13, Xe = g[3] | 0, ae = Xe & 8191, ge = Xe >>> 13, it = g[4] | 0, we = it & 8191, Me = it >>> 13, ft = g[5] | 0, ye = ft & 8191, be = ft >>> 13, xt = g[6] | 0, Se = xt & 8191, ke = xt >>> 13, ct = g[7] | 0, _e = ct & 8191, E = ct >>> 13, m = g[8] | 0, y = m & 8191, I = m >>> 13, q = g[9] | 0, H = q & 8191, W = q >>> 13, Be = w[0] | 0, me = Be & 8191, de = Be >>> 13, ot = w[1] | 0, ce = ot & 8191, Le = ot >>> 13, Vn = w[2] | 0, Oe = Vn & 8191, Ne = Vn >>> 13, Hn = w[3] | 0, je = Hn & 8191, Ue = Hn >>> 13, Kn = w[4] | 0, Fe = Kn & 8191, Pe = Kn >>> 13, Wn = w[5] | 0, De = Wn & 8191, $e = Wn >>> 13, Gn = w[6] | 0, ze = Gn & 8191, qe = Gn >>> 13, Yn = w[7] | 0, Ze = Yn & 8191, Ve = Yn >>> 13, Jn = w[8] | 0, He = Jn & 8191, Ke = Jn >>> 13, Xn = w[9] | 0, We = Xn & 8191, Ge = Xn >>> 13;\n        h.negative = s.negative ^ u.negative, h.length = 19, p = Math.imul(k, me), a = Math.imul(k, de), a = a + Math.imul($, me) | 0, l = Math.imul($, de);\n        var Fr = (A + p | 0) + ((a & 8191) << 13) | 0;\n        A = (l + (a >>> 13) | 0) + (Fr >>> 26) | 0, Fr &= 67108863, p = Math.imul(re, me), a = Math.imul(re, de), a = a + Math.imul(se, me) | 0, l = Math.imul(se, de), p = p + Math.imul(k, ce) | 0, a = a + Math.imul(k, Le) | 0, a = a + Math.imul($, ce) | 0, l = l + Math.imul($, Le) | 0;\n        var Pr = (A + p | 0) + ((a & 8191) << 13) | 0;\n        A = (l + (a >>> 13) | 0) + (Pr >>> 26) | 0, Pr &= 67108863, p = Math.imul(xe, me), a = Math.imul(xe, de), a = a + Math.imul(Ie, me) | 0, l = Math.imul(Ie, de), p = p + Math.imul(re, ce) | 0, a = a + Math.imul(re, Le) | 0, a = a + Math.imul(se, ce) | 0, l = l + Math.imul(se, Le) | 0, p = p + Math.imul(k, Oe) | 0, a = a + Math.imul(k, Ne) | 0, a = a + Math.imul($, Oe) | 0, l = l + Math.imul($, Ne) | 0;\n        var Dr = (A + p | 0) + ((a & 8191) << 13) | 0;\n        A = (l + (a >>> 13) | 0) + (Dr >>> 26) | 0, Dr &= 67108863, p = Math.imul(ae, me), a = Math.imul(ae, de), a = a + Math.imul(ge, me) | 0, l = Math.imul(ge, de), p = p + Math.imul(xe, ce) | 0, a = a + Math.imul(xe, Le) | 0, a = a + Math.imul(Ie, ce) | 0, l = l + Math.imul(Ie, Le) | 0, p = p + Math.imul(re, Oe) | 0, a = a + Math.imul(re, Ne) | 0, a = a + Math.imul(se, Oe) | 0, l = l + Math.imul(se, Ne) | 0, p = p + Math.imul(k, je) | 0, a = a + Math.imul(k, Ue) | 0, a = a + Math.imul($, je) | 0, l = l + Math.imul($, Ue) | 0;\n        var $r = (A + p | 0) + ((a & 8191) << 13) | 0;\n        A = (l + (a >>> 13) | 0) + ($r >>> 26) | 0, $r &= 67108863, p = Math.imul(we, me), a = Math.imul(we, de), a = a + Math.imul(Me, me) | 0, l = Math.imul(Me, de), p = p + Math.imul(ae, ce) | 0, a = a + Math.imul(ae, Le) | 0, a = a + Math.imul(ge, ce) | 0, l = l + Math.imul(ge, Le) | 0, p = p + Math.imul(xe, Oe) | 0, a = a + Math.imul(xe, Ne) | 0, a = a + Math.imul(Ie, Oe) | 0, l = l + Math.imul(Ie, Ne) | 0, p = p + Math.imul(re, je) | 0, a = a + Math.imul(re, Ue) | 0, a = a + Math.imul(se, je) | 0, l = l + Math.imul(se, Ue) | 0, p = p + Math.imul(k, Fe) | 0, a = a + Math.imul(k, Pe) | 0, a = a + Math.imul($, Fe) | 0, l = l + Math.imul($, Pe) | 0;\n        var zr = (A + p | 0) + ((a & 8191) << 13) | 0;\n        A = (l + (a >>> 13) | 0) + (zr >>> 26) | 0, zr &= 67108863, p = Math.imul(ye, me), a = Math.imul(ye, de), a = a + Math.imul(be, me) | 0, l = Math.imul(be, de), p = p + Math.imul(we, ce) | 0, a = a + Math.imul(we, Le) | 0, a = a + Math.imul(Me, ce) | 0, l = l + Math.imul(Me, Le) | 0, p = p + Math.imul(ae, Oe) | 0, a = a + Math.imul(ae, Ne) | 0, a = a + Math.imul(ge, Oe) | 0, l = l + Math.imul(ge, Ne) | 0, p = p + Math.imul(xe, je) | 0, a = a + Math.imul(xe, Ue) | 0, a = a + Math.imul(Ie, je) | 0, l = l + Math.imul(Ie, Ue) | 0, p = p + Math.imul(re, Fe) | 0, a = a + Math.imul(re, Pe) | 0, a = a + Math.imul(se, Fe) | 0, l = l + Math.imul(se, Pe) | 0, p = p + Math.imul(k, De) | 0, a = a + Math.imul(k, $e) | 0, a = a + Math.imul($, De) | 0, l = l + Math.imul($, $e) | 0;\n        var qr = (A + p | 0) + ((a & 8191) << 13) | 0;\n        A = (l + (a >>> 13) | 0) + (qr >>> 26) | 0, qr &= 67108863, p = Math.imul(Se, me), a = Math.imul(Se, de), a = a + Math.imul(ke, me) | 0, l = Math.imul(ke, de), p = p + Math.imul(ye, ce) | 0, a = a + Math.imul(ye, Le) | 0, a = a + Math.imul(be, ce) | 0, l = l + Math.imul(be, Le) | 0, p = p + Math.imul(we, Oe) | 0, a = a + Math.imul(we, Ne) | 0, a = a + Math.imul(Me, Oe) | 0, l = l + Math.imul(Me, Ne) | 0, p = p + Math.imul(ae, je) | 0, a = a + Math.imul(ae, Ue) | 0, a = a + Math.imul(ge, je) | 0, l = l + Math.imul(ge, Ue) | 0, p = p + Math.imul(xe, Fe) | 0, a = a + Math.imul(xe, Pe) | 0, a = a + Math.imul(Ie, Fe) | 0, l = l + Math.imul(Ie, Pe) | 0, p = p + Math.imul(re, De) | 0, a = a + Math.imul(re, $e) | 0, a = a + Math.imul(se, De) | 0, l = l + Math.imul(se, $e) | 0, p = p + Math.imul(k, ze) | 0, a = a + Math.imul(k, qe) | 0, a = a + Math.imul($, ze) | 0, l = l + Math.imul($, qe) | 0;\n        var Zr = (A + p | 0) + ((a & 8191) << 13) | 0;\n        A = (l + (a >>> 13) | 0) + (Zr >>> 26) | 0, Zr &= 67108863, p = Math.imul(_e, me), a = Math.imul(_e, de), a = a + Math.imul(E, me) | 0, l = Math.imul(E, de), p = p + Math.imul(Se, ce) | 0, a = a + Math.imul(Se, Le) | 0, a = a + Math.imul(ke, ce) | 0, l = l + Math.imul(ke, Le) | 0, p = p + Math.imul(ye, Oe) | 0, a = a + Math.imul(ye, Ne) | 0, a = a + Math.imul(be, Oe) | 0, l = l + Math.imul(be, Ne) | 0, p = p + Math.imul(we, je) | 0, a = a + Math.imul(we, Ue) | 0, a = a + Math.imul(Me, je) | 0, l = l + Math.imul(Me, Ue) | 0, p = p + Math.imul(ae, Fe) | 0, a = a + Math.imul(ae, Pe) | 0, a = a + Math.imul(ge, Fe) | 0, l = l + Math.imul(ge, Pe) | 0, p = p + Math.imul(xe, De) | 0, a = a + Math.imul(xe, $e) | 0, a = a + Math.imul(Ie, De) | 0, l = l + Math.imul(Ie, $e) | 0, p = p + Math.imul(re, ze) | 0, a = a + Math.imul(re, qe) | 0, a = a + Math.imul(se, ze) | 0, l = l + Math.imul(se, qe) | 0, p = p + Math.imul(k, Ze) | 0, a = a + Math.imul(k, Ve) | 0, a = a + Math.imul($, Ze) | 0, l = l + Math.imul($, Ve) | 0;\n        var Vr = (A + p | 0) + ((a & 8191) << 13) | 0;\n        A = (l + (a >>> 13) | 0) + (Vr >>> 26) | 0, Vr &= 67108863, p = Math.imul(y, me), a = Math.imul(y, de), a = a + Math.imul(I, me) | 0, l = Math.imul(I, de), p = p + Math.imul(_e, ce) | 0, a = a + Math.imul(_e, Le) | 0, a = a + Math.imul(E, ce) | 0, l = l + Math.imul(E, Le) | 0, p = p + Math.imul(Se, Oe) | 0, a = a + Math.imul(Se, Ne) | 0, a = a + Math.imul(ke, Oe) | 0, l = l + Math.imul(ke, Ne) | 0, p = p + Math.imul(ye, je) | 0, a = a + Math.imul(ye, Ue) | 0, a = a + Math.imul(be, je) | 0, l = l + Math.imul(be, Ue) | 0, p = p + Math.imul(we, Fe) | 0, a = a + Math.imul(we, Pe) | 0, a = a + Math.imul(Me, Fe) | 0, l = l + Math.imul(Me, Pe) | 0, p = p + Math.imul(ae, De) | 0, a = a + Math.imul(ae, $e) | 0, a = a + Math.imul(ge, De) | 0, l = l + Math.imul(ge, $e) | 0, p = p + Math.imul(xe, ze) | 0, a = a + Math.imul(xe, qe) | 0, a = a + Math.imul(Ie, ze) | 0, l = l + Math.imul(Ie, qe) | 0, p = p + Math.imul(re, Ze) | 0, a = a + Math.imul(re, Ve) | 0, a = a + Math.imul(se, Ze) | 0, l = l + Math.imul(se, Ve) | 0, p = p + Math.imul(k, He) | 0, a = a + Math.imul(k, Ke) | 0, a = a + Math.imul($, He) | 0, l = l + Math.imul($, Ke) | 0;\n        var Hr = (A + p | 0) + ((a & 8191) << 13) | 0;\n        A = (l + (a >>> 13) | 0) + (Hr >>> 26) | 0, Hr &= 67108863, p = Math.imul(H, me), a = Math.imul(H, de), a = a + Math.imul(W, me) | 0, l = Math.imul(W, de), p = p + Math.imul(y, ce) | 0, a = a + Math.imul(y, Le) | 0, a = a + Math.imul(I, ce) | 0, l = l + Math.imul(I, Le) | 0, p = p + Math.imul(_e, Oe) | 0, a = a + Math.imul(_e, Ne) | 0, a = a + Math.imul(E, Oe) | 0, l = l + Math.imul(E, Ne) | 0, p = p + Math.imul(Se, je) | 0, a = a + Math.imul(Se, Ue) | 0, a = a + Math.imul(ke, je) | 0, l = l + Math.imul(ke, Ue) | 0, p = p + Math.imul(ye, Fe) | 0, a = a + Math.imul(ye, Pe) | 0, a = a + Math.imul(be, Fe) | 0, l = l + Math.imul(be, Pe) | 0, p = p + Math.imul(we, De) | 0, a = a + Math.imul(we, $e) | 0, a = a + Math.imul(Me, De) | 0, l = l + Math.imul(Me, $e) | 0, p = p + Math.imul(ae, ze) | 0, a = a + Math.imul(ae, qe) | 0, a = a + Math.imul(ge, ze) | 0, l = l + Math.imul(ge, qe) | 0, p = p + Math.imul(xe, Ze) | 0, a = a + Math.imul(xe, Ve) | 0, a = a + Math.imul(Ie, Ze) | 0, l = l + Math.imul(Ie, Ve) | 0, p = p + Math.imul(re, He) | 0, a = a + Math.imul(re, Ke) | 0, a = a + Math.imul(se, He) | 0, l = l + Math.imul(se, Ke) | 0, p = p + Math.imul(k, We) | 0, a = a + Math.imul(k, Ge) | 0, a = a + Math.imul($, We) | 0, l = l + Math.imul($, Ge) | 0;\n        var Kr = (A + p | 0) + ((a & 8191) << 13) | 0;\n        A = (l + (a >>> 13) | 0) + (Kr >>> 26) | 0, Kr &= 67108863, p = Math.imul(H, ce), a = Math.imul(H, Le), a = a + Math.imul(W, ce) | 0, l = Math.imul(W, Le), p = p + Math.imul(y, Oe) | 0, a = a + Math.imul(y, Ne) | 0, a = a + Math.imul(I, Oe) | 0, l = l + Math.imul(I, Ne) | 0, p = p + Math.imul(_e, je) | 0, a = a + Math.imul(_e, Ue) | 0, a = a + Math.imul(E, je) | 0, l = l + Math.imul(E, Ue) | 0, p = p + Math.imul(Se, Fe) | 0, a = a + Math.imul(Se, Pe) | 0, a = a + Math.imul(ke, Fe) | 0, l = l + Math.imul(ke, Pe) | 0, p = p + Math.imul(ye, De) | 0, a = a + Math.imul(ye, $e) | 0, a = a + Math.imul(be, De) | 0, l = l + Math.imul(be, $e) | 0, p = p + Math.imul(we, ze) | 0, a = a + Math.imul(we, qe) | 0, a = a + Math.imul(Me, ze) | 0, l = l + Math.imul(Me, qe) | 0, p = p + Math.imul(ae, Ze) | 0, a = a + Math.imul(ae, Ve) | 0, a = a + Math.imul(ge, Ze) | 0, l = l + Math.imul(ge, Ve) | 0, p = p + Math.imul(xe, He) | 0, a = a + Math.imul(xe, Ke) | 0, a = a + Math.imul(Ie, He) | 0, l = l + Math.imul(Ie, Ke) | 0, p = p + Math.imul(re, We) | 0, a = a + Math.imul(re, Ge) | 0, a = a + Math.imul(se, We) | 0, l = l + Math.imul(se, Ge) | 0;\n        var Wr = (A + p | 0) + ((a & 8191) << 13) | 0;\n        A = (l + (a >>> 13) | 0) + (Wr >>> 26) | 0, Wr &= 67108863, p = Math.imul(H, Oe), a = Math.imul(H, Ne), a = a + Math.imul(W, Oe) | 0, l = Math.imul(W, Ne), p = p + Math.imul(y, je) | 0, a = a + Math.imul(y, Ue) | 0, a = a + Math.imul(I, je) | 0, l = l + Math.imul(I, Ue) | 0, p = p + Math.imul(_e, Fe) | 0, a = a + Math.imul(_e, Pe) | 0, a = a + Math.imul(E, Fe) | 0, l = l + Math.imul(E, Pe) | 0, p = p + Math.imul(Se, De) | 0, a = a + Math.imul(Se, $e) | 0, a = a + Math.imul(ke, De) | 0, l = l + Math.imul(ke, $e) | 0, p = p + Math.imul(ye, ze) | 0, a = a + Math.imul(ye, qe) | 0, a = a + Math.imul(be, ze) | 0, l = l + Math.imul(be, qe) | 0, p = p + Math.imul(we, Ze) | 0, a = a + Math.imul(we, Ve) | 0, a = a + Math.imul(Me, Ze) | 0, l = l + Math.imul(Me, Ve) | 0, p = p + Math.imul(ae, He) | 0, a = a + Math.imul(ae, Ke) | 0, a = a + Math.imul(ge, He) | 0, l = l + Math.imul(ge, Ke) | 0, p = p + Math.imul(xe, We) | 0, a = a + Math.imul(xe, Ge) | 0, a = a + Math.imul(Ie, We) | 0, l = l + Math.imul(Ie, Ge) | 0;\n        var Gr = (A + p | 0) + ((a & 8191) << 13) | 0;\n        A = (l + (a >>> 13) | 0) + (Gr >>> 26) | 0, Gr &= 67108863, p = Math.imul(H, je), a = Math.imul(H, Ue), a = a + Math.imul(W, je) | 0, l = Math.imul(W, Ue), p = p + Math.imul(y, Fe) | 0, a = a + Math.imul(y, Pe) | 0, a = a + Math.imul(I, Fe) | 0, l = l + Math.imul(I, Pe) | 0, p = p + Math.imul(_e, De) | 0, a = a + Math.imul(_e, $e) | 0, a = a + Math.imul(E, De) | 0, l = l + Math.imul(E, $e) | 0, p = p + Math.imul(Se, ze) | 0, a = a + Math.imul(Se, qe) | 0, a = a + Math.imul(ke, ze) | 0, l = l + Math.imul(ke, qe) | 0, p = p + Math.imul(ye, Ze) | 0, a = a + Math.imul(ye, Ve) | 0, a = a + Math.imul(be, Ze) | 0, l = l + Math.imul(be, Ve) | 0, p = p + Math.imul(we, He) | 0, a = a + Math.imul(we, Ke) | 0, a = a + Math.imul(Me, He) | 0, l = l + Math.imul(Me, Ke) | 0, p = p + Math.imul(ae, We) | 0, a = a + Math.imul(ae, Ge) | 0, a = a + Math.imul(ge, We) | 0, l = l + Math.imul(ge, Ge) | 0;\n        var Yr = (A + p | 0) + ((a & 8191) << 13) | 0;\n        A = (l + (a >>> 13) | 0) + (Yr >>> 26) | 0, Yr &= 67108863, p = Math.imul(H, Fe), a = Math.imul(H, Pe), a = a + Math.imul(W, Fe) | 0, l = Math.imul(W, Pe), p = p + Math.imul(y, De) | 0, a = a + Math.imul(y, $e) | 0, a = a + Math.imul(I, De) | 0, l = l + Math.imul(I, $e) | 0, p = p + Math.imul(_e, ze) | 0, a = a + Math.imul(_e, qe) | 0, a = a + Math.imul(E, ze) | 0, l = l + Math.imul(E, qe) | 0, p = p + Math.imul(Se, Ze) | 0, a = a + Math.imul(Se, Ve) | 0, a = a + Math.imul(ke, Ze) | 0, l = l + Math.imul(ke, Ve) | 0, p = p + Math.imul(ye, He) | 0, a = a + Math.imul(ye, Ke) | 0, a = a + Math.imul(be, He) | 0, l = l + Math.imul(be, Ke) | 0, p = p + Math.imul(we, We) | 0, a = a + Math.imul(we, Ge) | 0, a = a + Math.imul(Me, We) | 0, l = l + Math.imul(Me, Ge) | 0;\n        var Jr = (A + p | 0) + ((a & 8191) << 13) | 0;\n        A = (l + (a >>> 13) | 0) + (Jr >>> 26) | 0, Jr &= 67108863, p = Math.imul(H, De), a = Math.imul(H, $e), a = a + Math.imul(W, De) | 0, l = Math.imul(W, $e), p = p + Math.imul(y, ze) | 0, a = a + Math.imul(y, qe) | 0, a = a + Math.imul(I, ze) | 0, l = l + Math.imul(I, qe) | 0, p = p + Math.imul(_e, Ze) | 0, a = a + Math.imul(_e, Ve) | 0, a = a + Math.imul(E, Ze) | 0, l = l + Math.imul(E, Ve) | 0, p = p + Math.imul(Se, He) | 0, a = a + Math.imul(Se, Ke) | 0, a = a + Math.imul(ke, He) | 0, l = l + Math.imul(ke, Ke) | 0, p = p + Math.imul(ye, We) | 0, a = a + Math.imul(ye, Ge) | 0, a = a + Math.imul(be, We) | 0, l = l + Math.imul(be, Ge) | 0;\n        var Xr = (A + p | 0) + ((a & 8191) << 13) | 0;\n        A = (l + (a >>> 13) | 0) + (Xr >>> 26) | 0, Xr &= 67108863, p = Math.imul(H, ze), a = Math.imul(H, qe), a = a + Math.imul(W, ze) | 0, l = Math.imul(W, qe), p = p + Math.imul(y, Ze) | 0, a = a + Math.imul(y, Ve) | 0, a = a + Math.imul(I, Ze) | 0, l = l + Math.imul(I, Ve) | 0, p = p + Math.imul(_e, He) | 0, a = a + Math.imul(_e, Ke) | 0, a = a + Math.imul(E, He) | 0, l = l + Math.imul(E, Ke) | 0, p = p + Math.imul(Se, We) | 0, a = a + Math.imul(Se, Ge) | 0, a = a + Math.imul(ke, We) | 0, l = l + Math.imul(ke, Ge) | 0;\n        var Qr = (A + p | 0) + ((a & 8191) << 13) | 0;\n        A = (l + (a >>> 13) | 0) + (Qr >>> 26) | 0, Qr &= 67108863, p = Math.imul(H, Ze), a = Math.imul(H, Ve), a = a + Math.imul(W, Ze) | 0, l = Math.imul(W, Ve), p = p + Math.imul(y, He) | 0, a = a + Math.imul(y, Ke) | 0, a = a + Math.imul(I, He) | 0, l = l + Math.imul(I, Ke) | 0, p = p + Math.imul(_e, We) | 0, a = a + Math.imul(_e, Ge) | 0, a = a + Math.imul(E, We) | 0, l = l + Math.imul(E, Ge) | 0;\n        var en = (A + p | 0) + ((a & 8191) << 13) | 0;\n        A = (l + (a >>> 13) | 0) + (en >>> 26) | 0, en &= 67108863, p = Math.imul(H, He), a = Math.imul(H, Ke), a = a + Math.imul(W, He) | 0, l = Math.imul(W, Ke), p = p + Math.imul(y, We) | 0, a = a + Math.imul(y, Ge) | 0, a = a + Math.imul(I, We) | 0, l = l + Math.imul(I, Ge) | 0;\n        var tn = (A + p | 0) + ((a & 8191) << 13) | 0;\n        A = (l + (a >>> 13) | 0) + (tn >>> 26) | 0, tn &= 67108863, p = Math.imul(H, We), a = Math.imul(H, Ge), a = a + Math.imul(W, We) | 0, l = Math.imul(W, Ge);\n        var rn = (A + p | 0) + ((a & 8191) << 13) | 0;\n        return A = (l + (a >>> 13) | 0) + (rn >>> 26) | 0, rn &= 67108863, _[0] = Fr, _[1] = Pr, _[2] = Dr, _[3] = $r, _[4] = zr, _[5] = qr, _[6] = Zr, _[7] = Vr, _[8] = Hr, _[9] = Kr, _[10] = Wr, _[11] = Gr, _[12] = Yr, _[13] = Jr, _[14] = Xr, _[15] = Qr, _[16] = en, _[17] = tn, _[18] = rn, A !== 0 && (_[19] = A, h.length++), h;\n      };\n      Math.imul || (K = z);\n      function Z(d, s, u) {\n        u.negative = s.negative ^ d.negative, u.length = d.length + s.length;\n        for (var h = 0, g = 0, w = 0; w < u.length - 1; w++) {\n          var _ = g;\n          g = 0;\n          for (var A = h & 67108863, p = Math.min(w, s.length - 1), a = Math.max(0, w - d.length + 1); a <= p; a++) {\n            var l = w - a, M = d.words[l] | 0, k = s.words[a] | 0, $ = M * k, X = $ & 67108863;\n            _ = _ + ($ / 67108864 | 0) | 0, X = X + A | 0, A = X & 67108863, _ = _ + (X >>> 26) | 0, g += _ >>> 26, _ &= 67108863;\n          }\n          u.words[w] = A, h = _, _ = g;\n        }\n        return h !== 0 ? u.words[w] = h : u.length--, u._strip();\n      }\n      function Q(d, s, u) {\n        return Z(d, s, u);\n      }\n      i.prototype.mulTo = function(s, u) {\n        var h, g = this.length + s.length;\n        return this.length === 10 && s.length === 10 ? h = K(this, s, u) : g < 63 ? h = z(this, s, u) : g < 1024 ? h = Z(this, s, u) : h = Q(this, s, u), h;\n      }, i.prototype.mul = function(s) {\n        var u = new i(null);\n        return u.words = new Array(this.length + s.length), this.mulTo(s, u);\n      }, i.prototype.mulf = function(s) {\n        var u = new i(null);\n        return u.words = new Array(this.length + s.length), Q(this, s, u);\n      }, i.prototype.imul = function(s) {\n        return this.clone().mulTo(s, this);\n      }, i.prototype.imuln = function(s) {\n        var u = s < 0;\n        u && (s = -s), n(typeof s == \"number\"), n(s < 67108864);\n        for (var h = 0, g = 0; g < this.length; g++) {\n          var w = (this.words[g] | 0) * s, _ = (w & 67108863) + (h & 67108863);\n          h >>= 26, h += w / 67108864 | 0, h += _ >>> 26, this.words[g] = _ & 67108863;\n        }\n        return h !== 0 && (this.words[g] = h, this.length++), u ? this.ineg() : this;\n      }, i.prototype.muln = function(s) {\n        return this.clone().imuln(s);\n      }, i.prototype.sqr = function() {\n        return this.mul(this);\n      }, i.prototype.isqr = function() {\n        return this.imul(this.clone());\n      }, i.prototype.pow = function(s) {\n        var u = R(s);\n        if (u.length === 0) return new i(1);\n        for (var h = this, g = 0; g < u.length && u[g] === 0; g++, h = h.sqr())\n          ;\n        if (++g < u.length)\n          for (var w = h.sqr(); g < u.length; g++, w = w.sqr())\n            u[g] !== 0 && (h = h.mul(w));\n        return h;\n      }, i.prototype.iushln = function(s) {\n        n(typeof s == \"number\" && s >= 0);\n        var u = s % 26, h = (s - u) / 26, g = 67108863 >>> 26 - u << 26 - u, w;\n        if (u !== 0) {\n          var _ = 0;\n          for (w = 0; w < this.length; w++) {\n            var A = this.words[w] & g, p = (this.words[w] | 0) - A << u;\n            this.words[w] = p | _, _ = A >>> 26 - u;\n          }\n          _ && (this.words[w] = _, this.length++);\n        }\n        if (h !== 0) {\n          for (w = this.length - 1; w >= 0; w--)\n            this.words[w + h] = this.words[w];\n          for (w = 0; w < h; w++)\n            this.words[w] = 0;\n          this.length += h;\n        }\n        return this._strip();\n      }, i.prototype.ishln = function(s) {\n        return n(this.negative === 0), this.iushln(s);\n      }, i.prototype.iushrn = function(s, u, h) {\n        n(typeof s == \"number\" && s >= 0);\n        var g;\n        u ? g = (u - u % 26) / 26 : g = 0;\n        var w = s % 26, _ = Math.min((s - w) / 26, this.length), A = 67108863 ^ 67108863 >>> w << w, p = h;\n        if (g -= _, g = Math.max(0, g), p) {\n          for (var a = 0; a < _; a++)\n            p.words[a] = this.words[a];\n          p.length = _;\n        }\n        if (_ !== 0) if (this.length > _)\n          for (this.length -= _, a = 0; a < this.length; a++)\n            this.words[a] = this.words[a + _];\n        else\n          this.words[0] = 0, this.length = 1;\n        var l = 0;\n        for (a = this.length - 1; a >= 0 && (l !== 0 || a >= g); a--) {\n          var M = this.words[a] | 0;\n          this.words[a] = l << 26 - w | M >>> w, l = M & A;\n        }\n        return p && l !== 0 && (p.words[p.length++] = l), this.length === 0 && (this.words[0] = 0, this.length = 1), this._strip();\n      }, i.prototype.ishrn = function(s, u, h) {\n        return n(this.negative === 0), this.iushrn(s, u, h);\n      }, i.prototype.shln = function(s) {\n        return this.clone().ishln(s);\n      }, i.prototype.ushln = function(s) {\n        return this.clone().iushln(s);\n      }, i.prototype.shrn = function(s) {\n        return this.clone().ishrn(s);\n      }, i.prototype.ushrn = function(s) {\n        return this.clone().iushrn(s);\n      }, i.prototype.testn = function(s) {\n        n(typeof s == \"number\" && s >= 0);\n        var u = s % 26, h = (s - u) / 26, g = 1 << u;\n        if (this.length <= h) return !1;\n        var w = this.words[h];\n        return !!(w & g);\n      }, i.prototype.imaskn = function(s) {\n        n(typeof s == \"number\" && s >= 0);\n        var u = s % 26, h = (s - u) / 26;\n        if (n(this.negative === 0, \"imaskn works only with positive numbers\"), this.length <= h)\n          return this;\n        if (u !== 0 && h++, this.length = Math.min(h, this.length), u !== 0) {\n          var g = 67108863 ^ 67108863 >>> u << u;\n          this.words[this.length - 1] &= g;\n        }\n        return this._strip();\n      }, i.prototype.maskn = function(s) {\n        return this.clone().imaskn(s);\n      }, i.prototype.iaddn = function(s) {\n        return n(typeof s == \"number\"), n(s < 67108864), s < 0 ? this.isubn(-s) : this.negative !== 0 ? this.length === 1 && (this.words[0] | 0) <= s ? (this.words[0] = s - (this.words[0] | 0), this.negative = 0, this) : (this.negative = 0, this.isubn(s), this.negative = 1, this) : this._iaddn(s);\n      }, i.prototype._iaddn = function(s) {\n        this.words[0] += s;\n        for (var u = 0; u < this.length && this.words[u] >= 67108864; u++)\n          this.words[u] -= 67108864, u === this.length - 1 ? this.words[u + 1] = 1 : this.words[u + 1]++;\n        return this.length = Math.max(this.length, u + 1), this;\n      }, i.prototype.isubn = function(s) {\n        if (n(typeof s == \"number\"), n(s < 67108864), s < 0) return this.iaddn(-s);\n        if (this.negative !== 0)\n          return this.negative = 0, this.iaddn(s), this.negative = 1, this;\n        if (this.words[0] -= s, this.length === 1 && this.words[0] < 0)\n          this.words[0] = -this.words[0], this.negative = 1;\n        else\n          for (var u = 0; u < this.length && this.words[u] < 0; u++)\n            this.words[u] += 67108864, this.words[u + 1] -= 1;\n        return this._strip();\n      }, i.prototype.addn = function(s) {\n        return this.clone().iaddn(s);\n      }, i.prototype.subn = function(s) {\n        return this.clone().isubn(s);\n      }, i.prototype.iabs = function() {\n        return this.negative = 0, this;\n      }, i.prototype.abs = function() {\n        return this.clone().iabs();\n      }, i.prototype._ishlnsubmul = function(s, u, h) {\n        var g = s.length + h, w;\n        this._expand(g);\n        var _, A = 0;\n        for (w = 0; w < s.length; w++) {\n          _ = (this.words[w + h] | 0) + A;\n          var p = (s.words[w] | 0) * u;\n          _ -= p & 67108863, A = (_ >> 26) - (p / 67108864 | 0), this.words[w + h] = _ & 67108863;\n        }\n        for (; w < this.length - h; w++)\n          _ = (this.words[w + h] | 0) + A, A = _ >> 26, this.words[w + h] = _ & 67108863;\n        if (A === 0) return this._strip();\n        for (n(A === -1), A = 0, w = 0; w < this.length; w++)\n          _ = -(this.words[w] | 0) + A, A = _ >> 26, this.words[w] = _ & 67108863;\n        return this.negative = 1, this._strip();\n      }, i.prototype._wordDiv = function(s, u) {\n        var h = this.length - s.length, g = this.clone(), w = s, _ = w.words[w.length - 1] | 0, A = this._countBits(_);\n        h = 26 - A, h !== 0 && (w = w.ushln(h), g.iushln(h), _ = w.words[w.length - 1] | 0);\n        var p = g.length - w.length, a;\n        if (u !== \"mod\") {\n          a = new i(null), a.length = p + 1, a.words = new Array(a.length);\n          for (var l = 0; l < a.length; l++)\n            a.words[l] = 0;\n        }\n        var M = g.clone()._ishlnsubmul(w, 1, p);\n        M.negative === 0 && (g = M, a && (a.words[p] = 1));\n        for (var k = p - 1; k >= 0; k--) {\n          var $ = (g.words[w.length + k] | 0) * 67108864 + (g.words[w.length + k - 1] | 0);\n          for ($ = Math.min($ / _ | 0, 67108863), g._ishlnsubmul(w, $, k); g.negative !== 0; )\n            $--, g.negative = 0, g._ishlnsubmul(w, 1, k), g.isZero() || (g.negative ^= 1);\n          a && (a.words[k] = $);\n        }\n        return a && a._strip(), g._strip(), u !== \"div\" && h !== 0 && g.iushrn(h), {\n          div: a || null,\n          mod: g\n        };\n      }, i.prototype.divmod = function(s, u, h) {\n        if (n(!s.isZero()), this.isZero())\n          return {\n            div: new i(0),\n            mod: new i(0)\n          };\n        var g, w, _;\n        return this.negative !== 0 && s.negative === 0 ? (_ = this.neg().divmod(s, u), u !== \"mod\" && (g = _.div.neg()), u !== \"div\" && (w = _.mod.neg(), h && w.negative !== 0 && w.iadd(s)), {\n          div: g,\n          mod: w\n        }) : this.negative === 0 && s.negative !== 0 ? (_ = this.divmod(s.neg(), u), u !== \"mod\" && (g = _.div.neg()), {\n          div: g,\n          mod: _.mod\n        }) : (this.negative & s.negative) !== 0 ? (_ = this.neg().divmod(s.neg(), u), u !== \"div\" && (w = _.mod.neg(), h && w.negative !== 0 && w.isub(s)), {\n          div: _.div,\n          mod: w\n        }) : s.length > this.length || this.cmp(s) < 0 ? {\n          div: new i(0),\n          mod: this\n        } : s.length === 1 ? u === \"div\" ? {\n          div: this.divn(s.words[0]),\n          mod: null\n        } : u === \"mod\" ? {\n          div: null,\n          mod: new i(this.modrn(s.words[0]))\n        } : {\n          div: this.divn(s.words[0]),\n          mod: new i(this.modrn(s.words[0]))\n        } : this._wordDiv(s, u);\n      }, i.prototype.div = function(s) {\n        return this.divmod(s, \"div\", !1).div;\n      }, i.prototype.mod = function(s) {\n        return this.divmod(s, \"mod\", !1).mod;\n      }, i.prototype.umod = function(s) {\n        return this.divmod(s, \"mod\", !0).mod;\n      }, i.prototype.divRound = function(s) {\n        var u = this.divmod(s);\n        if (u.mod.isZero()) return u.div;\n        var h = u.div.negative !== 0 ? u.mod.isub(s) : u.mod, g = s.ushrn(1), w = s.andln(1), _ = h.cmp(g);\n        return _ < 0 || w === 1 && _ === 0 ? u.div : u.div.negative !== 0 ? u.div.isubn(1) : u.div.iaddn(1);\n      }, i.prototype.modrn = function(s) {\n        var u = s < 0;\n        u && (s = -s), n(s <= 67108863);\n        for (var h = (1 << 26) % s, g = 0, w = this.length - 1; w >= 0; w--)\n          g = (h * g + (this.words[w] | 0)) % s;\n        return u ? -g : g;\n      }, i.prototype.modn = function(s) {\n        return this.modrn(s);\n      }, i.prototype.idivn = function(s) {\n        var u = s < 0;\n        u && (s = -s), n(s <= 67108863);\n        for (var h = 0, g = this.length - 1; g >= 0; g--) {\n          var w = (this.words[g] | 0) + h * 67108864;\n          this.words[g] = w / s | 0, h = w % s;\n        }\n        return this._strip(), u ? this.ineg() : this;\n      }, i.prototype.divn = function(s) {\n        return this.clone().idivn(s);\n      }, i.prototype.egcd = function(s) {\n        n(s.negative === 0), n(!s.isZero());\n        var u = this, h = s.clone();\n        u.negative !== 0 ? u = u.umod(s) : u = u.clone();\n        for (var g = new i(1), w = new i(0), _ = new i(0), A = new i(1), p = 0; u.isEven() && h.isEven(); )\n          u.iushrn(1), h.iushrn(1), ++p;\n        for (var a = h.clone(), l = u.clone(); !u.isZero(); ) {\n          for (var M = 0, k = 1; (u.words[0] & k) === 0 && M < 26; ++M, k <<= 1) ;\n          if (M > 0)\n            for (u.iushrn(M); M-- > 0; )\n              (g.isOdd() || w.isOdd()) && (g.iadd(a), w.isub(l)), g.iushrn(1), w.iushrn(1);\n          for (var $ = 0, X = 1; (h.words[0] & X) === 0 && $ < 26; ++$, X <<= 1) ;\n          if ($ > 0)\n            for (h.iushrn($); $-- > 0; )\n              (_.isOdd() || A.isOdd()) && (_.iadd(a), A.isub(l)), _.iushrn(1), A.iushrn(1);\n          u.cmp(h) >= 0 ? (u.isub(h), g.isub(_), w.isub(A)) : (h.isub(u), _.isub(g), A.isub(w));\n        }\n        return {\n          a: _,\n          b: A,\n          gcd: h.iushln(p)\n        };\n      }, i.prototype._invmp = function(s) {\n        n(s.negative === 0), n(!s.isZero());\n        var u = this, h = s.clone();\n        u.negative !== 0 ? u = u.umod(s) : u = u.clone();\n        for (var g = new i(1), w = new i(0), _ = h.clone(); u.cmpn(1) > 0 && h.cmpn(1) > 0; ) {\n          for (var A = 0, p = 1; (u.words[0] & p) === 0 && A < 26; ++A, p <<= 1) ;\n          if (A > 0)\n            for (u.iushrn(A); A-- > 0; )\n              g.isOdd() && g.iadd(_), g.iushrn(1);\n          for (var a = 0, l = 1; (h.words[0] & l) === 0 && a < 26; ++a, l <<= 1) ;\n          if (a > 0)\n            for (h.iushrn(a); a-- > 0; )\n              w.isOdd() && w.iadd(_), w.iushrn(1);\n          u.cmp(h) >= 0 ? (u.isub(h), g.isub(w)) : (h.isub(u), w.isub(g));\n        }\n        var M;\n        return u.cmpn(1) === 0 ? M = g : M = w, M.cmpn(0) < 0 && M.iadd(s), M;\n      }, i.prototype.gcd = function(s) {\n        if (this.isZero()) return s.abs();\n        if (s.isZero()) return this.abs();\n        var u = this.clone(), h = s.clone();\n        u.negative = 0, h.negative = 0;\n        for (var g = 0; u.isEven() && h.isEven(); g++)\n          u.iushrn(1), h.iushrn(1);\n        do {\n          for (; u.isEven(); )\n            u.iushrn(1);\n          for (; h.isEven(); )\n            h.iushrn(1);\n          var w = u.cmp(h);\n          if (w < 0) {\n            var _ = u;\n            u = h, h = _;\n          } else if (w === 0 || h.cmpn(1) === 0)\n            break;\n          u.isub(h);\n        } while (!0);\n        return h.iushln(g);\n      }, i.prototype.invm = function(s) {\n        return this.egcd(s).a.umod(s);\n      }, i.prototype.isEven = function() {\n        return (this.words[0] & 1) === 0;\n      }, i.prototype.isOdd = function() {\n        return (this.words[0] & 1) === 1;\n      }, i.prototype.andln = function(s) {\n        return this.words[0] & s;\n      }, i.prototype.bincn = function(s) {\n        n(typeof s == \"number\");\n        var u = s % 26, h = (s - u) / 26, g = 1 << u;\n        if (this.length <= h)\n          return this._expand(h + 1), this.words[h] |= g, this;\n        for (var w = g, _ = h; w !== 0 && _ < this.length; _++) {\n          var A = this.words[_] | 0;\n          A += w, w = A >>> 26, A &= 67108863, this.words[_] = A;\n        }\n        return w !== 0 && (this.words[_] = w, this.length++), this;\n      }, i.prototype.isZero = function() {\n        return this.length === 1 && this.words[0] === 0;\n      }, i.prototype.cmpn = function(s) {\n        var u = s < 0;\n        if (this.negative !== 0 && !u) return -1;\n        if (this.negative === 0 && u) return 1;\n        this._strip();\n        var h;\n        if (this.length > 1)\n          h = 1;\n        else {\n          u && (s = -s), n(s <= 67108863, \"Number is too big\");\n          var g = this.words[0] | 0;\n          h = g === s ? 0 : g < s ? -1 : 1;\n        }\n        return this.negative !== 0 ? -h | 0 : h;\n      }, i.prototype.cmp = function(s) {\n        if (this.negative !== 0 && s.negative === 0) return -1;\n        if (this.negative === 0 && s.negative !== 0) return 1;\n        var u = this.ucmp(s);\n        return this.negative !== 0 ? -u | 0 : u;\n      }, i.prototype.ucmp = function(s) {\n        if (this.length > s.length) return 1;\n        if (this.length < s.length) return -1;\n        for (var u = 0, h = this.length - 1; h >= 0; h--) {\n          var g = this.words[h] | 0, w = s.words[h] | 0;\n          if (g !== w) {\n            g < w ? u = -1 : g > w && (u = 1);\n            break;\n          }\n        }\n        return u;\n      }, i.prototype.gtn = function(s) {\n        return this.cmpn(s) === 1;\n      }, i.prototype.gt = function(s) {\n        return this.cmp(s) === 1;\n      }, i.prototype.gten = function(s) {\n        return this.cmpn(s) >= 0;\n      }, i.prototype.gte = function(s) {\n        return this.cmp(s) >= 0;\n      }, i.prototype.ltn = function(s) {\n        return this.cmpn(s) === -1;\n      }, i.prototype.lt = function(s) {\n        return this.cmp(s) === -1;\n      }, i.prototype.lten = function(s) {\n        return this.cmpn(s) <= 0;\n      }, i.prototype.lte = function(s) {\n        return this.cmp(s) <= 0;\n      }, i.prototype.eqn = function(s) {\n        return this.cmpn(s) === 0;\n      }, i.prototype.eq = function(s) {\n        return this.cmp(s) === 0;\n      }, i.red = function(s) {\n        return new L(s);\n      }, i.prototype.toRed = function(s) {\n        return n(!this.red, \"Already a number in reduction context\"), n(this.negative === 0, \"red works only with positives\"), s.convertTo(this)._forceRed(s);\n      }, i.prototype.fromRed = function() {\n        return n(this.red, \"fromRed works only with numbers in reduction context\"), this.red.convertFrom(this);\n      }, i.prototype._forceRed = function(s) {\n        return this.red = s, this;\n      }, i.prototype.forceRed = function(s) {\n        return n(!this.red, \"Already a number in reduction context\"), this._forceRed(s);\n      }, i.prototype.redAdd = function(s) {\n        return n(this.red, \"redAdd works only with red numbers\"), this.red.add(this, s);\n      }, i.prototype.redIAdd = function(s) {\n        return n(this.red, \"redIAdd works only with red numbers\"), this.red.iadd(this, s);\n      }, i.prototype.redSub = function(s) {\n        return n(this.red, \"redSub works only with red numbers\"), this.red.sub(this, s);\n      }, i.prototype.redISub = function(s) {\n        return n(this.red, \"redISub works only with red numbers\"), this.red.isub(this, s);\n      }, i.prototype.redShl = function(s) {\n        return n(this.red, \"redShl works only with red numbers\"), this.red.shl(this, s);\n      }, i.prototype.redMul = function(s) {\n        return n(this.red, \"redMul works only with red numbers\"), this.red._verify2(this, s), this.red.mul(this, s);\n      }, i.prototype.redIMul = function(s) {\n        return n(this.red, \"redMul works only with red numbers\"), this.red._verify2(this, s), this.red.imul(this, s);\n      }, i.prototype.redSqr = function() {\n        return n(this.red, \"redSqr works only with red numbers\"), this.red._verify1(this), this.red.sqr(this);\n      }, i.prototype.redISqr = function() {\n        return n(this.red, \"redISqr works only with red numbers\"), this.red._verify1(this), this.red.isqr(this);\n      }, i.prototype.redSqrt = function() {\n        return n(this.red, \"redSqrt works only with red numbers\"), this.red._verify1(this), this.red.sqrt(this);\n      }, i.prototype.redInvm = function() {\n        return n(this.red, \"redInvm works only with red numbers\"), this.red._verify1(this), this.red.invm(this);\n      }, i.prototype.redNeg = function() {\n        return n(this.red, \"redNeg works only with red numbers\"), this.red._verify1(this), this.red.neg(this);\n      }, i.prototype.redPow = function(s) {\n        return n(this.red && !s.red, \"redPow(normalNum)\"), this.red._verify1(this), this.red.pow(this, s);\n      };\n      var j = {\n        k256: null,\n        p224: null,\n        p192: null,\n        p25519: null\n      };\n      function V(d, s) {\n        this.name = d, this.p = new i(s, 16), this.n = this.p.bitLength(), this.k = new i(1).iushln(this.n).isub(this.p), this.tmp = this._tmp();\n      }\n      V.prototype._tmp = function() {\n        var s = new i(null);\n        return s.words = new Array(Math.ceil(this.n / 13)), s;\n      }, V.prototype.ireduce = function(s) {\n        var u = s, h;\n        do\n          this.split(u, this.tmp), u = this.imulK(u), u = u.iadd(this.tmp), h = u.bitLength();\n        while (h > this.n);\n        var g = h < this.n ? -1 : u.ucmp(this.p);\n        return g === 0 ? (u.words[0] = 0, u.length = 1) : g > 0 ? u.isub(this.p) : u.strip !== void 0 ? u.strip() : u._strip(), u;\n      }, V.prototype.split = function(s, u) {\n        s.iushrn(this.n, 0, u);\n      }, V.prototype.imulK = function(s) {\n        return s.imul(this.k);\n      };\n      function ee() {\n        V.call(\n          this,\n          \"k256\",\n          \"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f\"\n        );\n      }\n      o(ee, V), ee.prototype.split = function(s, u) {\n        for (var h = 4194303, g = Math.min(s.length, 9), w = 0; w < g; w++)\n          u.words[w] = s.words[w];\n        if (u.length = g, s.length <= 9) {\n          s.words[0] = 0, s.length = 1;\n          return;\n        }\n        var _ = s.words[9];\n        for (u.words[u.length++] = _ & h, w = 10; w < s.length; w++) {\n          var A = s.words[w] | 0;\n          s.words[w - 10] = (A & h) << 4 | _ >>> 22, _ = A;\n        }\n        _ >>>= 22, s.words[w - 10] = _, _ === 0 && s.length > 10 ? s.length -= 10 : s.length -= 9;\n      }, ee.prototype.imulK = function(s) {\n        s.words[s.length] = 0, s.words[s.length + 1] = 0, s.length += 2;\n        for (var u = 0, h = 0; h < s.length; h++) {\n          var g = s.words[h] | 0;\n          u += g * 977, s.words[h] = u & 67108863, u = g * 64 + (u / 67108864 | 0);\n        }\n        return s.words[s.length - 1] === 0 && (s.length--, s.words[s.length - 1] === 0 && s.length--), s;\n      };\n      function G() {\n        V.call(\n          this,\n          \"p224\",\n          \"ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001\"\n        );\n      }\n      o(G, V);\n      function N() {\n        V.call(\n          this,\n          \"p192\",\n          \"ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff\"\n        );\n      }\n      o(N, V);\n      function O() {\n        V.call(\n          this,\n          \"25519\",\n          \"7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed\"\n        );\n      }\n      o(O, V), O.prototype.imulK = function(s) {\n        for (var u = 0, h = 0; h < s.length; h++) {\n          var g = (s.words[h] | 0) * 19 + u, w = g & 67108863;\n          g >>>= 26, s.words[h] = w, u = g;\n        }\n        return u !== 0 && (s.words[s.length++] = u), s;\n      }, i._prime = function(s) {\n        if (j[s]) return j[s];\n        var u;\n        if (s === \"k256\")\n          u = new ee();\n        else if (s === \"p224\")\n          u = new G();\n        else if (s === \"p192\")\n          u = new N();\n        else if (s === \"p25519\")\n          u = new O();\n        else\n          throw new Error(\"Unknown prime \" + s);\n        return j[s] = u, u;\n      };\n      function L(d) {\n        if (typeof d == \"string\") {\n          var s = i._prime(d);\n          this.m = s.p, this.prime = s;\n        } else\n          n(d.gtn(1), \"modulus must be greater than 1\"), this.m = d, this.prime = null;\n      }\n      L.prototype._verify1 = function(s) {\n        n(s.negative === 0, \"red works only with positives\"), n(s.red, \"red works only with red numbers\");\n      }, L.prototype._verify2 = function(s, u) {\n        n((s.negative | u.negative) === 0, \"red works only with positives\"), n(\n          s.red && s.red === u.red,\n          \"red works only with red numbers\"\n        );\n      }, L.prototype.imod = function(s) {\n        return this.prime ? this.prime.ireduce(s)._forceRed(this) : (b(s, s.umod(this.m)._forceRed(this)), s);\n      }, L.prototype.neg = function(s) {\n        return s.isZero() ? s.clone() : this.m.sub(s)._forceRed(this);\n      }, L.prototype.add = function(s, u) {\n        this._verify2(s, u);\n        var h = s.add(u);\n        return h.cmp(this.m) >= 0 && h.isub(this.m), h._forceRed(this);\n      }, L.prototype.iadd = function(s, u) {\n        this._verify2(s, u);\n        var h = s.iadd(u);\n        return h.cmp(this.m) >= 0 && h.isub(this.m), h;\n      }, L.prototype.sub = function(s, u) {\n        this._verify2(s, u);\n        var h = s.sub(u);\n        return h.cmpn(0) < 0 && h.iadd(this.m), h._forceRed(this);\n      }, L.prototype.isub = function(s, u) {\n        this._verify2(s, u);\n        var h = s.isub(u);\n        return h.cmpn(0) < 0 && h.iadd(this.m), h;\n      }, L.prototype.shl = function(s, u) {\n        return this._verify1(s), this.imod(s.ushln(u));\n      }, L.prototype.imul = function(s, u) {\n        return this._verify2(s, u), this.imod(s.imul(u));\n      }, L.prototype.mul = function(s, u) {\n        return this._verify2(s, u), this.imod(s.mul(u));\n      }, L.prototype.isqr = function(s) {\n        return this.imul(s, s.clone());\n      }, L.prototype.sqr = function(s) {\n        return this.mul(s, s);\n      }, L.prototype.sqrt = function(s) {\n        if (s.isZero()) return s.clone();\n        var u = this.m.andln(3);\n        if (n(u % 2 === 1), u === 3) {\n          var h = this.m.add(new i(1)).iushrn(2);\n          return this.pow(s, h);\n        }\n        for (var g = this.m.subn(1), w = 0; !g.isZero() && g.andln(1) === 0; )\n          w++, g.iushrn(1);\n        n(!g.isZero());\n        var _ = new i(1).toRed(this), A = _.redNeg(), p = this.m.subn(1).iushrn(1), a = this.m.bitLength();\n        for (a = new i(2 * a * a).toRed(this); this.pow(a, p).cmp(A) !== 0; )\n          a.redIAdd(A);\n        for (var l = this.pow(a, g), M = this.pow(s, g.addn(1).iushrn(1)), k = this.pow(s, g), $ = w; k.cmp(_) !== 0; ) {\n          for (var X = k, re = 0; X.cmp(_) !== 0; re++)\n            X = X.redSqr();\n          n(re < $);\n          var se = this.pow(l, new i(1).iushln($ - re - 1));\n          M = M.redMul(se), l = se.redSqr(), k = k.redMul(l), $ = re;\n        }\n        return M;\n      }, L.prototype.invm = function(s) {\n        var u = s._invmp(this.m);\n        return u.negative !== 0 ? (u.negative = 0, this.imod(u).redNeg()) : this.imod(u);\n      }, L.prototype.pow = function(s, u) {\n        if (u.isZero()) return new i(1).toRed(this);\n        if (u.cmpn(1) === 0) return s.clone();\n        var h = 4, g = new Array(1 << h);\n        g[0] = new i(1).toRed(this), g[1] = s;\n        for (var w = 2; w < g.length; w++)\n          g[w] = this.mul(g[w - 1], s);\n        var _ = g[0], A = 0, p = 0, a = u.bitLength() % 26;\n        for (a === 0 && (a = 26), w = u.length - 1; w >= 0; w--) {\n          for (var l = u.words[w], M = a - 1; M >= 0; M--) {\n            var k = l >> M & 1;\n            if (_ !== g[0] && (_ = this.sqr(_)), k === 0 && A === 0) {\n              p = 0;\n              continue;\n            }\n            A <<= 1, A |= k, p++, !(p !== h && (w !== 0 || M !== 0)) && (_ = this.mul(_, g[A]), p = 0, A = 0);\n          }\n          a = 26;\n        }\n        return _;\n      }, L.prototype.convertTo = function(s) {\n        var u = s.umod(this.m);\n        return u === s ? u.clone() : u;\n      }, L.prototype.convertFrom = function(s) {\n        var u = s.clone();\n        return u.red = null, u;\n      }, i.mont = function(s) {\n        return new F(s);\n      };\n      function F(d) {\n        L.call(this, d), this.shift = this.m.bitLength(), this.shift % 26 !== 0 && (this.shift += 26 - this.shift % 26), this.r = new i(1).iushln(this.shift), this.r2 = this.imod(this.r.sqr()), this.rinv = this.r._invmp(this.m), this.minv = this.rinv.mul(this.r).isubn(1).div(this.m), this.minv = this.minv.umod(this.r), this.minv = this.r.sub(this.minv);\n      }\n      o(F, L), F.prototype.convertTo = function(s) {\n        return this.imod(s.ushln(this.shift));\n      }, F.prototype.convertFrom = function(s) {\n        var u = this.imod(s.mul(this.rinv));\n        return u.red = null, u;\n      }, F.prototype.imul = function(s, u) {\n        if (s.isZero() || u.isZero())\n          return s.words[0] = 0, s.length = 1, s;\n        var h = s.imul(u), g = h.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m), w = h.isub(g).iushrn(this.shift), _ = w;\n        return w.cmp(this.m) >= 0 ? _ = w.isub(this.m) : w.cmpn(0) < 0 && (_ = w.iadd(this.m)), _._forceRed(this);\n      }, F.prototype.mul = function(s, u) {\n        if (s.isZero() || u.isZero()) return new i(0)._forceRed(this);\n        var h = s.mul(u), g = h.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m), w = h.isub(g).iushrn(this.shift), _ = w;\n        return w.cmp(this.m) >= 0 ? _ = w.isub(this.m) : w.cmpn(0) < 0 && (_ = w.iadd(this.m)), _._forceRed(this);\n      }, F.prototype.invm = function(s) {\n        var u = this.imod(s._invmp(this.m).mul(this.r2));\n        return u._forceRed(this);\n      };\n    })(t, Nh);\n  }(rs)), rs.exports;\n}\nvar Uh = jh();\nconst Ka = /* @__PURE__ */ Qo(Uh);\nvar Wi = { exports: {} };\n/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */\nvar Wa;\nfunction kc() {\n  return Wa || (Wa = 1, function(t, e) {\n    var r = na(), n = r.Buffer;\n    function o(c, f) {\n      for (var v in c)\n        f[v] = c[v];\n    }\n    n.from && n.alloc && n.allocUnsafe && n.allocUnsafeSlow ? t.exports = r : (o(r, e), e.Buffer = i);\n    function i(c, f, v) {\n      return n(c, f, v);\n    }\n    i.prototype = Object.create(n.prototype), o(n, i), i.from = function(c, f, v) {\n      if (typeof c == \"number\")\n        throw new TypeError(\"Argument must not be a number\");\n      return n(c, f, v);\n    }, i.alloc = function(c, f, v) {\n      if (typeof c != \"number\")\n        throw new TypeError(\"Argument must be a number\");\n      var x = n(c);\n      return f !== void 0 ? typeof v == \"string\" ? x.fill(f, v) : x.fill(f) : x.fill(0), x;\n    }, i.allocUnsafe = function(c) {\n      if (typeof c != \"number\")\n        throw new TypeError(\"Argument must be a number\");\n      return n(c);\n    }, i.allocUnsafeSlow = function(c) {\n      if (typeof c != \"number\")\n        throw new TypeError(\"Argument must be a number\");\n      return r.SlowBuffer(c);\n    };\n  }(Wi, Wi.exports)), Wi.exports;\n}\nvar eo, Ga;\nfunction Fh() {\n  if (Ga) return eo;\n  Ga = 1;\n  var t = kc().Buffer;\n  function e(r) {\n    if (r.length >= 255)\n      throw new TypeError(\"Alphabet too long\");\n    for (var n = new Uint8Array(256), o = 0; o < n.length; o++)\n      n[o] = 255;\n    for (var i = 0; i < r.length; i++) {\n      var c = r.charAt(i), f = c.charCodeAt(0);\n      if (n[f] !== 255)\n        throw new TypeError(c + \" is ambiguous\");\n      n[f] = i;\n    }\n    var v = r.length, x = r.charAt(0), b = Math.log(v) / Math.log(256), S = Math.log(256) / Math.log(v);\n    function T(B) {\n      if ((Array.isArray(B) || B instanceof Uint8Array) && (B = t.from(B)), !t.isBuffer(B))\n        throw new TypeError(\"Expected Buffer\");\n      if (B.length === 0)\n        return \"\";\n      for (var R = 0, z = 0, K = 0, Z = B.length; K !== Z && B[K] === 0; )\n        K++, R++;\n      for (var Q = (Z - K) * S + 1 >>> 0, j = new Uint8Array(Q); K !== Z; ) {\n        for (var V = B[K], ee = 0, G = Q - 1; (V !== 0 || ee < z) && G !== -1; G--, ee++)\n          V += 256 * j[G] >>> 0, j[G] = V % v >>> 0, V = V / v >>> 0;\n        if (V !== 0)\n          throw new Error(\"Non-zero carry\");\n        z = ee, K++;\n      }\n      for (var N = Q - z; N !== Q && j[N] === 0; )\n        N++;\n      for (var O = x.repeat(R); N < Q; ++N)\n        O += r.charAt(j[N]);\n      return O;\n    }\n    function C(B) {\n      if (typeof B != \"string\")\n        throw new TypeError(\"Expected String\");\n      if (B.length === 0)\n        return t.alloc(0);\n      for (var R = 0, z = 0, K = 0; B[R] === x; )\n        z++, R++;\n      for (var Z = (B.length - R) * b + 1 >>> 0, Q = new Uint8Array(Z); R < B.length; ) {\n        var j = B.charCodeAt(R);\n        if (j > 255)\n          return;\n        var V = n[j];\n        if (V === 255)\n          return;\n        for (var ee = 0, G = Z - 1; (V !== 0 || ee < K) && G !== -1; G--, ee++)\n          V += v * Q[G] >>> 0, Q[G] = V % 256 >>> 0, V = V / 256 >>> 0;\n        if (V !== 0)\n          throw new Error(\"Non-zero carry\");\n        K = ee, R++;\n      }\n      for (var N = Z - K; N !== Z && Q[N] === 0; )\n        N++;\n      var O = t.allocUnsafe(z + (Z - N));\n      O.fill(0, 0, z);\n      for (var L = z; N !== Z; )\n        O[L++] = Q[N++];\n      return O;\n    }\n    function P(B) {\n      var R = C(B);\n      if (R)\n        return R;\n      throw new Error(\"Non-base\" + v + \" character\");\n    }\n    return {\n      encode: T,\n      decodeUnsafe: C,\n      decode: P\n    };\n  }\n  return eo = e, eo;\n}\nvar to, Ya;\nfunction Ph() {\n  if (Ya) return to;\n  Ya = 1;\n  var t = Fh(), e = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\";\n  return to = t(e), to;\n}\nvar Dh = Ph();\nconst Nt = /* @__PURE__ */ Qo(Dh);\nfunction $h(t) {\n  return t instanceof Uint8Array || ArrayBuffer.isView(t) && t.constructor.name === \"Uint8Array\";\n}\nfunction Ic(t, ...e) {\n  if (!$h(t))\n    throw new Error(\"Uint8Array expected\");\n  if (e.length > 0 && !e.includes(t.length))\n    throw new Error(\"Uint8Array expected of length \" + e + \", got length=\" + t.length);\n}\nfunction Ja(t, e = !0) {\n  if (t.destroyed)\n    throw new Error(\"Hash instance has been destroyed\");\n  if (e && t.finished)\n    throw new Error(\"Hash#digest() has already been called\");\n}\nfunction zh(t, e) {\n  Ic(t);\n  const r = e.outputLen;\n  if (t.length < r)\n    throw new Error(\"digestInto() expects output buffer of length at least \" + r);\n}\n/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nfunction ro(t) {\n  return new DataView(t.buffer, t.byteOffset, t.byteLength);\n}\nfunction er(t, e) {\n  return t << 32 - e | t >>> e;\n}\nfunction qh(t) {\n  if (typeof t != \"string\")\n    throw new Error(\"utf8ToBytes expected string, got \" + typeof t);\n  return new Uint8Array(new TextEncoder().encode(t));\n}\nfunction Bc(t) {\n  return typeof t == \"string\" && (t = qh(t)), Ic(t), t;\n}\nclass Zh {\n  // Safe version that clones internal state\n  clone() {\n    return this._cloneInto();\n  }\n}\nfunction Vh(t) {\n  const e = (n) => t().update(Bc(n)).digest(), r = t();\n  return e.outputLen = r.outputLen, e.blockLen = r.blockLen, e.create = () => t(), e;\n}\nfunction Hh(t, e, r, n) {\n  if (typeof t.setBigUint64 == \"function\")\n    return t.setBigUint64(e, r, n);\n  const o = BigInt(32), i = BigInt(4294967295), c = Number(r >> o & i), f = Number(r & i), v = n ? 4 : 0, x = n ? 0 : 4;\n  t.setUint32(e + v, c, n), t.setUint32(e + x, f, n);\n}\nfunction Kh(t, e, r) {\n  return t & e ^ ~t & r;\n}\nfunction Wh(t, e, r) {\n  return t & e ^ t & r ^ e & r;\n}\nclass Gh extends Zh {\n  constructor(e, r, n, o) {\n    super(), this.blockLen = e, this.outputLen = r, this.padOffset = n, this.isLE = o, this.finished = !1, this.length = 0, this.pos = 0, this.destroyed = !1, this.buffer = new Uint8Array(e), this.view = ro(this.buffer);\n  }\n  update(e) {\n    Ja(this);\n    const { view: r, buffer: n, blockLen: o } = this;\n    e = Bc(e);\n    const i = e.length;\n    for (let c = 0; c < i; ) {\n      const f = Math.min(o - this.pos, i - c);\n      if (f === o) {\n        const v = ro(e);\n        for (; o <= i - c; c += o)\n          this.process(v, c);\n        continue;\n      }\n      n.set(e.subarray(c, c + f), this.pos), this.pos += f, c += f, this.pos === o && (this.process(r, 0), this.pos = 0);\n    }\n    return this.length += e.length, this.roundClean(), this;\n  }\n  digestInto(e) {\n    Ja(this), zh(e, this), this.finished = !0;\n    const { buffer: r, view: n, blockLen: o, isLE: i } = this;\n    let { pos: c } = this;\n    r[c++] = 128, this.buffer.subarray(c).fill(0), this.padOffset > o - c && (this.process(n, 0), c = 0);\n    for (let S = c; S < o; S++)\n      r[S] = 0;\n    Hh(n, o - 8, BigInt(this.length * 8), i), this.process(n, 0);\n    const f = ro(e), v = this.outputLen;\n    if (v % 4)\n      throw new Error(\"_sha2: outputLen should be aligned to 32bit\");\n    const x = v / 4, b = this.get();\n    if (x > b.length)\n      throw new Error(\"_sha2: outputLen bigger than state\");\n    for (let S = 0; S < x; S++)\n      f.setUint32(4 * S, b[S], i);\n  }\n  digest() {\n    const { buffer: e, outputLen: r } = this;\n    this.digestInto(e);\n    const n = e.slice(0, r);\n    return this.destroy(), n;\n  }\n  _cloneInto(e) {\n    e || (e = new this.constructor()), e.set(...this.get());\n    const { blockLen: r, buffer: n, length: o, finished: i, destroyed: c, pos: f } = this;\n    return e.length = o, e.pos = f, e.finished = i, e.destroyed = c, o % r && e.buffer.set(n), e;\n  }\n}\nconst Yh = /* @__PURE__ */ new Uint32Array([\n  1116352408,\n  1899447441,\n  3049323471,\n  3921009573,\n  961987163,\n  1508970993,\n  2453635748,\n  2870763221,\n  3624381080,\n  310598401,\n  607225278,\n  1426881987,\n  1925078388,\n  2162078206,\n  2614888103,\n  3248222580,\n  3835390401,\n  4022224774,\n  264347078,\n  604807628,\n  770255983,\n  1249150122,\n  1555081692,\n  1996064986,\n  2554220882,\n  2821834349,\n  2952996808,\n  3210313671,\n  3336571891,\n  3584528711,\n  113926993,\n  338241895,\n  666307205,\n  773529912,\n  1294757372,\n  1396182291,\n  1695183700,\n  1986661051,\n  2177026350,\n  2456956037,\n  2730485921,\n  2820302411,\n  3259730800,\n  3345764771,\n  3516065817,\n  3600352804,\n  4094571909,\n  275423344,\n  430227734,\n  506948616,\n  659060556,\n  883997877,\n  958139571,\n  1322822218,\n  1537002063,\n  1747873779,\n  1955562222,\n  2024104815,\n  2227730452,\n  2361852424,\n  2428436474,\n  2756734187,\n  3204031479,\n  3329325298\n]), Sr = /* @__PURE__ */ new Uint32Array([\n  1779033703,\n  3144134277,\n  1013904242,\n  2773480762,\n  1359893119,\n  2600822924,\n  528734635,\n  1541459225\n]), Ar = /* @__PURE__ */ new Uint32Array(64);\nclass Jh extends Gh {\n  constructor() {\n    super(64, 32, 8, !1), this.A = Sr[0] | 0, this.B = Sr[1] | 0, this.C = Sr[2] | 0, this.D = Sr[3] | 0, this.E = Sr[4] | 0, this.F = Sr[5] | 0, this.G = Sr[6] | 0, this.H = Sr[7] | 0;\n  }\n  get() {\n    const { A: e, B: r, C: n, D: o, E: i, F: c, G: f, H: v } = this;\n    return [e, r, n, o, i, c, f, v];\n  }\n  // prettier-ignore\n  set(e, r, n, o, i, c, f, v) {\n    this.A = e | 0, this.B = r | 0, this.C = n | 0, this.D = o | 0, this.E = i | 0, this.F = c | 0, this.G = f | 0, this.H = v | 0;\n  }\n  process(e, r) {\n    for (let S = 0; S < 16; S++, r += 4)\n      Ar[S] = e.getUint32(r, !1);\n    for (let S = 16; S < 64; S++) {\n      const T = Ar[S - 15], C = Ar[S - 2], P = er(T, 7) ^ er(T, 18) ^ T >>> 3, B = er(C, 17) ^ er(C, 19) ^ C >>> 10;\n      Ar[S] = B + Ar[S - 7] + P + Ar[S - 16] | 0;\n    }\n    let { A: n, B: o, C: i, D: c, E: f, F: v, G: x, H: b } = this;\n    for (let S = 0; S < 64; S++) {\n      const T = er(f, 6) ^ er(f, 11) ^ er(f, 25), C = b + T + Kh(f, v, x) + Yh[S] + Ar[S] | 0, B = (er(n, 2) ^ er(n, 13) ^ er(n, 22)) + Wh(n, o, i) | 0;\n      b = x, x = v, v = f, f = c + C | 0, c = i, i = o, o = n, n = C + B | 0;\n    }\n    n = n + this.A | 0, o = o + this.B | 0, i = i + this.C | 0, c = c + this.D | 0, f = f + this.E | 0, v = v + this.F | 0, x = x + this.G | 0, b = b + this.H | 0, this.set(n, o, i, c, f, v, x, b);\n  }\n  roundClean() {\n    Ar.fill(0);\n  }\n  destroy() {\n    this.set(0, 0, 0, 0, 0, 0, 0, 0), this.buffer.fill(0);\n  }\n}\nconst Xa = /* @__PURE__ */ Vh(() => new Jh());\nvar st = {}, ns = { exports: {} }, Xh = ns.exports, Qa;\nfunction Qh() {\n  return Qa || (Qa = 1, function(t) {\n    (function(e, r) {\n      function n(d, s) {\n        if (!d) throw new Error(s || \"Assertion failed\");\n      }\n      function o(d, s) {\n        d.super_ = s;\n        var u = function() {\n        };\n        u.prototype = s.prototype, d.prototype = new u(), d.prototype.constructor = d;\n      }\n      function i(d, s, u) {\n        if (i.isBN(d))\n          return d;\n        this.negative = 0, this.words = null, this.length = 0, this.red = null, d !== null && ((s === \"le\" || s === \"be\") && (u = s, s = 10), this._init(d || 0, s || 10, u || \"be\"));\n      }\n      typeof e == \"object\" ? e.exports = i : r.BN = i, i.BN = i, i.wordSize = 26;\n      var c;\n      try {\n        typeof window < \"u\" && typeof window.Buffer < \"u\" ? c = window.Buffer : c = Ac.Buffer;\n      } catch {\n      }\n      i.isBN = function(s) {\n        return s instanceof i ? !0 : s !== null && typeof s == \"object\" && s.constructor.wordSize === i.wordSize && Array.isArray(s.words);\n      }, i.max = function(s, u) {\n        return s.cmp(u) > 0 ? s : u;\n      }, i.min = function(s, u) {\n        return s.cmp(u) < 0 ? s : u;\n      }, i.prototype._init = function(s, u, h) {\n        if (typeof s == \"number\")\n          return this._initNumber(s, u, h);\n        if (typeof s == \"object\")\n          return this._initArray(s, u, h);\n        u === \"hex\" && (u = 16), n(u === (u | 0) && u >= 2 && u <= 36), s = s.toString().replace(/\\s+/g, \"\");\n        var g = 0;\n        s[0] === \"-\" && (g++, this.negative = 1), g < s.length && (u === 16 ? this._parseHex(s, g, h) : (this._parseBase(s, u, g), h === \"le\" && this._initArray(this.toArray(), u, h)));\n      }, i.prototype._initNumber = function(s, u, h) {\n        s < 0 && (this.negative = 1, s = -s), s < 67108864 ? (this.words = [s & 67108863], this.length = 1) : s < 4503599627370496 ? (this.words = [\n          s & 67108863,\n          s / 67108864 & 67108863\n        ], this.length = 2) : (n(s < 9007199254740992), this.words = [\n          s & 67108863,\n          s / 67108864 & 67108863,\n          1\n        ], this.length = 3), h === \"le\" && this._initArray(this.toArray(), u, h);\n      }, i.prototype._initArray = function(s, u, h) {\n        if (n(typeof s.length == \"number\"), s.length <= 0)\n          return this.words = [0], this.length = 1, this;\n        this.length = Math.ceil(s.length / 3), this.words = new Array(this.length);\n        for (var g = 0; g < this.length; g++)\n          this.words[g] = 0;\n        var w, _, A = 0;\n        if (h === \"be\")\n          for (g = s.length - 1, w = 0; g >= 0; g -= 3)\n            _ = s[g] | s[g - 1] << 8 | s[g - 2] << 16, this.words[w] |= _ << A & 67108863, this.words[w + 1] = _ >>> 26 - A & 67108863, A += 24, A >= 26 && (A -= 26, w++);\n        else if (h === \"le\")\n          for (g = 0, w = 0; g < s.length; g += 3)\n            _ = s[g] | s[g + 1] << 8 | s[g + 2] << 16, this.words[w] |= _ << A & 67108863, this.words[w + 1] = _ >>> 26 - A & 67108863, A += 24, A >= 26 && (A -= 26, w++);\n        return this._strip();\n      };\n      function f(d, s) {\n        var u = d.charCodeAt(s);\n        if (u >= 48 && u <= 57)\n          return u - 48;\n        if (u >= 65 && u <= 70)\n          return u - 55;\n        if (u >= 97 && u <= 102)\n          return u - 87;\n        n(!1, \"Invalid character in \" + d);\n      }\n      function v(d, s, u) {\n        var h = f(d, u);\n        return u - 1 >= s && (h |= f(d, u - 1) << 4), h;\n      }\n      i.prototype._parseHex = function(s, u, h) {\n        this.length = Math.ceil((s.length - u) / 6), this.words = new Array(this.length);\n        for (var g = 0; g < this.length; g++)\n          this.words[g] = 0;\n        var w = 0, _ = 0, A;\n        if (h === \"be\")\n          for (g = s.length - 1; g >= u; g -= 2)\n            A = v(s, u, g) << w, this.words[_] |= A & 67108863, w >= 18 ? (w -= 18, _ += 1, this.words[_] |= A >>> 26) : w += 8;\n        else {\n          var p = s.length - u;\n          for (g = p % 2 === 0 ? u + 1 : u; g < s.length; g += 2)\n            A = v(s, u, g) << w, this.words[_] |= A & 67108863, w >= 18 ? (w -= 18, _ += 1, this.words[_] |= A >>> 26) : w += 8;\n        }\n        this._strip();\n      };\n      function x(d, s, u, h) {\n        for (var g = 0, w = 0, _ = Math.min(d.length, u), A = s; A < _; A++) {\n          var p = d.charCodeAt(A) - 48;\n          g *= h, p >= 49 ? w = p - 49 + 10 : p >= 17 ? w = p - 17 + 10 : w = p, n(p >= 0 && w < h, \"Invalid character\"), g += w;\n        }\n        return g;\n      }\n      i.prototype._parseBase = function(s, u, h) {\n        this.words = [0], this.length = 1;\n        for (var g = 0, w = 1; w <= 67108863; w *= u)\n          g++;\n        g--, w = w / u | 0;\n        for (var _ = s.length - h, A = _ % g, p = Math.min(_, _ - A) + h, a = 0, l = h; l < p; l += g)\n          a = x(s, l, l + g, u), this.imuln(w), this.words[0] + a < 67108864 ? this.words[0] += a : this._iaddn(a);\n        if (A !== 0) {\n          var M = 1;\n          for (a = x(s, l, s.length, u), l = 0; l < A; l++)\n            M *= u;\n          this.imuln(M), this.words[0] + a < 67108864 ? this.words[0] += a : this._iaddn(a);\n        }\n        this._strip();\n      }, i.prototype.copy = function(s) {\n        s.words = new Array(this.length);\n        for (var u = 0; u < this.length; u++)\n          s.words[u] = this.words[u];\n        s.length = this.length, s.negative = this.negative, s.red = this.red;\n      };\n      function b(d, s) {\n        d.words = s.words, d.length = s.length, d.negative = s.negative, d.red = s.red;\n      }\n      if (i.prototype._move = function(s) {\n        b(s, this);\n      }, i.prototype.clone = function() {\n        var s = new i(null);\n        return this.copy(s), s;\n      }, i.prototype._expand = function(s) {\n        for (; this.length < s; )\n          this.words[this.length++] = 0;\n        return this;\n      }, i.prototype._strip = function() {\n        for (; this.length > 1 && this.words[this.length - 1] === 0; )\n          this.length--;\n        return this._normSign();\n      }, i.prototype._normSign = function() {\n        return this.length === 1 && this.words[0] === 0 && (this.negative = 0), this;\n      }, typeof Symbol < \"u\" && typeof Symbol.for == \"function\")\n        try {\n          i.prototype[Symbol.for(\"nodejs.util.inspect.custom\")] = S;\n        } catch {\n          i.prototype.inspect = S;\n        }\n      else\n        i.prototype.inspect = S;\n      function S() {\n        return (this.red ? \"<BN-R: \" : \"<BN: \") + this.toString(16) + \">\";\n      }\n      var T = [\n        \"\",\n        \"0\",\n        \"00\",\n        \"000\",\n        \"0000\",\n        \"00000\",\n        \"000000\",\n        \"0000000\",\n        \"00000000\",\n        \"000000000\",\n        \"0000000000\",\n        \"00000000000\",\n        \"000000000000\",\n        \"0000000000000\",\n        \"00000000000000\",\n        \"000000000000000\",\n        \"0000000000000000\",\n        \"00000000000000000\",\n        \"000000000000000000\",\n        \"0000000000000000000\",\n        \"00000000000000000000\",\n        \"000000000000000000000\",\n        \"0000000000000000000000\",\n        \"00000000000000000000000\",\n        \"000000000000000000000000\",\n        \"0000000000000000000000000\"\n      ], C = [\n        0,\n        0,\n        25,\n        16,\n        12,\n        11,\n        10,\n        9,\n        8,\n        8,\n        7,\n        7,\n        7,\n        7,\n        6,\n        6,\n        6,\n        6,\n        6,\n        6,\n        6,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5,\n        5\n      ], P = [\n        0,\n        0,\n        33554432,\n        43046721,\n        16777216,\n        48828125,\n        60466176,\n        40353607,\n        16777216,\n        43046721,\n        1e7,\n        19487171,\n        35831808,\n        62748517,\n        7529536,\n        11390625,\n        16777216,\n        24137569,\n        34012224,\n        47045881,\n        64e6,\n        4084101,\n        5153632,\n        6436343,\n        7962624,\n        9765625,\n        11881376,\n        14348907,\n        17210368,\n        20511149,\n        243e5,\n        28629151,\n        33554432,\n        39135393,\n        45435424,\n        52521875,\n        60466176\n      ];\n      i.prototype.toString = function(s, u) {\n        s = s || 10, u = u | 0 || 1;\n        var h;\n        if (s === 16 || s === \"hex\") {\n          h = \"\";\n          for (var g = 0, w = 0, _ = 0; _ < this.length; _++) {\n            var A = this.words[_], p = ((A << g | w) & 16777215).toString(16);\n            w = A >>> 24 - g & 16777215, g += 2, g >= 26 && (g -= 26, _--), w !== 0 || _ !== this.length - 1 ? h = T[6 - p.length] + p + h : h = p + h;\n          }\n          for (w !== 0 && (h = w.toString(16) + h); h.length % u !== 0; )\n            h = \"0\" + h;\n          return this.negative !== 0 && (h = \"-\" + h), h;\n        }\n        if (s === (s | 0) && s >= 2 && s <= 36) {\n          var a = C[s], l = P[s];\n          h = \"\";\n          var M = this.clone();\n          for (M.negative = 0; !M.isZero(); ) {\n            var k = M.modrn(l).toString(s);\n            M = M.idivn(l), M.isZero() ? h = k + h : h = T[a - k.length] + k + h;\n          }\n          for (this.isZero() && (h = \"0\" + h); h.length % u !== 0; )\n            h = \"0\" + h;\n          return this.negative !== 0 && (h = \"-\" + h), h;\n        }\n        n(!1, \"Base should be between 2 and 36\");\n      }, i.prototype.toNumber = function() {\n        var s = this.words[0];\n        return this.length === 2 ? s += this.words[1] * 67108864 : this.length === 3 && this.words[2] === 1 ? s += 4503599627370496 + this.words[1] * 67108864 : this.length > 2 && n(!1, \"Number can only safely store up to 53 bits\"), this.negative !== 0 ? -s : s;\n      }, i.prototype.toJSON = function() {\n        return this.toString(16, 2);\n      }, c && (i.prototype.toBuffer = function(s, u) {\n        return this.toArrayLike(c, s, u);\n      }), i.prototype.toArray = function(s, u) {\n        return this.toArrayLike(Array, s, u);\n      };\n      var B = function(s, u) {\n        return s.allocUnsafe ? s.allocUnsafe(u) : new s(u);\n      };\n      i.prototype.toArrayLike = function(s, u, h) {\n        this._strip();\n        var g = this.byteLength(), w = h || Math.max(1, g);\n        n(g <= w, \"byte array longer than desired length\"), n(w > 0, \"Requested array length <= 0\");\n        var _ = B(s, w), A = u === \"le\" ? \"LE\" : \"BE\";\n        return this[\"_toArrayLike\" + A](_, g), _;\n      }, i.prototype._toArrayLikeLE = function(s, u) {\n        for (var h = 0, g = 0, w = 0, _ = 0; w < this.length; w++) {\n          var A = this.words[w] << _ | g;\n          s[h++] = A & 255, h < s.length && (s[h++] = A >> 8 & 255), h < s.length && (s[h++] = A >> 16 & 255), _ === 6 ? (h < s.length && (s[h++] = A >> 24 & 255), g = 0, _ = 0) : (g = A >>> 24, _ += 2);\n        }\n        if (h < s.length)\n          for (s[h++] = g; h < s.length; )\n            s[h++] = 0;\n      }, i.prototype._toArrayLikeBE = function(s, u) {\n        for (var h = s.length - 1, g = 0, w = 0, _ = 0; w < this.length; w++) {\n          var A = this.words[w] << _ | g;\n          s[h--] = A & 255, h >= 0 && (s[h--] = A >> 8 & 255), h >= 0 && (s[h--] = A >> 16 & 255), _ === 6 ? (h >= 0 && (s[h--] = A >> 24 & 255), g = 0, _ = 0) : (g = A >>> 24, _ += 2);\n        }\n        if (h >= 0)\n          for (s[h--] = g; h >= 0; )\n            s[h--] = 0;\n      }, Math.clz32 ? i.prototype._countBits = function(s) {\n        return 32 - Math.clz32(s);\n      } : i.prototype._countBits = function(s) {\n        var u = s, h = 0;\n        return u >= 4096 && (h += 13, u >>>= 13), u >= 64 && (h += 7, u >>>= 7), u >= 8 && (h += 4, u >>>= 4), u >= 2 && (h += 2, u >>>= 2), h + u;\n      }, i.prototype._zeroBits = function(s) {\n        if (s === 0) return 26;\n        var u = s, h = 0;\n        return (u & 8191) === 0 && (h += 13, u >>>= 13), (u & 127) === 0 && (h += 7, u >>>= 7), (u & 15) === 0 && (h += 4, u >>>= 4), (u & 3) === 0 && (h += 2, u >>>= 2), (u & 1) === 0 && h++, h;\n      }, i.prototype.bitLength = function() {\n        var s = this.words[this.length - 1], u = this._countBits(s);\n        return (this.length - 1) * 26 + u;\n      };\n      function R(d) {\n        for (var s = new Array(d.bitLength()), u = 0; u < s.length; u++) {\n          var h = u / 26 | 0, g = u % 26;\n          s[u] = d.words[h] >>> g & 1;\n        }\n        return s;\n      }\n      i.prototype.zeroBits = function() {\n        if (this.isZero()) return 0;\n        for (var s = 0, u = 0; u < this.length; u++) {\n          var h = this._zeroBits(this.words[u]);\n          if (s += h, h !== 26) break;\n        }\n        return s;\n      }, i.prototype.byteLength = function() {\n        return Math.ceil(this.bitLength() / 8);\n      }, i.prototype.toTwos = function(s) {\n        return this.negative !== 0 ? this.abs().inotn(s).iaddn(1) : this.clone();\n      }, i.prototype.fromTwos = function(s) {\n        return this.testn(s - 1) ? this.notn(s).iaddn(1).ineg() : this.clone();\n      }, i.prototype.isNeg = function() {\n        return this.negative !== 0;\n      }, i.prototype.neg = function() {\n        return this.clone().ineg();\n      }, i.prototype.ineg = function() {\n        return this.isZero() || (this.negative ^= 1), this;\n      }, i.prototype.iuor = function(s) {\n        for (; this.length < s.length; )\n          this.words[this.length++] = 0;\n        for (var u = 0; u < s.length; u++)\n          this.words[u] = this.words[u] | s.words[u];\n        return this._strip();\n      }, i.prototype.ior = function(s) {\n        return n((this.negative | s.negative) === 0), this.iuor(s);\n      }, i.prototype.or = function(s) {\n        return this.length > s.length ? this.clone().ior(s) : s.clone().ior(this);\n      }, i.prototype.uor = function(s) {\n        return this.length > s.length ? this.clone().iuor(s) : s.clone().iuor(this);\n      }, i.prototype.iuand = function(s) {\n        var u;\n        this.length > s.length ? u = s : u = this;\n        for (var h = 0; h < u.length; h++)\n          this.words[h] = this.words[h] & s.words[h];\n        return this.length = u.length, this._strip();\n      }, i.prototype.iand = function(s) {\n        return n((this.negative | s.negative) === 0), this.iuand(s);\n      }, i.prototype.and = function(s) {\n        return this.length > s.length ? this.clone().iand(s) : s.clone().iand(this);\n      }, i.prototype.uand = function(s) {\n        return this.length > s.length ? this.clone().iuand(s) : s.clone().iuand(this);\n      }, i.prototype.iuxor = function(s) {\n        var u, h;\n        this.length > s.length ? (u = this, h = s) : (u = s, h = this);\n        for (var g = 0; g < h.length; g++)\n          this.words[g] = u.words[g] ^ h.words[g];\n        if (this !== u)\n          for (; g < u.length; g++)\n            this.words[g] = u.words[g];\n        return this.length = u.length, this._strip();\n      }, i.prototype.ixor = function(s) {\n        return n((this.negative | s.negative) === 0), this.iuxor(s);\n      }, i.prototype.xor = function(s) {\n        return this.length > s.length ? this.clone().ixor(s) : s.clone().ixor(this);\n      }, i.prototype.uxor = function(s) {\n        return this.length > s.length ? this.clone().iuxor(s) : s.clone().iuxor(this);\n      }, i.prototype.inotn = function(s) {\n        n(typeof s == \"number\" && s >= 0);\n        var u = Math.ceil(s / 26) | 0, h = s % 26;\n        this._expand(u), h > 0 && u--;\n        for (var g = 0; g < u; g++)\n          this.words[g] = ~this.words[g] & 67108863;\n        return h > 0 && (this.words[g] = ~this.words[g] & 67108863 >> 26 - h), this._strip();\n      }, i.prototype.notn = function(s) {\n        return this.clone().inotn(s);\n      }, i.prototype.setn = function(s, u) {\n        n(typeof s == \"number\" && s >= 0);\n        var h = s / 26 | 0, g = s % 26;\n        return this._expand(h + 1), u ? this.words[h] = this.words[h] | 1 << g : this.words[h] = this.words[h] & ~(1 << g), this._strip();\n      }, i.prototype.iadd = function(s) {\n        var u;\n        if (this.negative !== 0 && s.negative === 0)\n          return this.negative = 0, u = this.isub(s), this.negative ^= 1, this._normSign();\n        if (this.negative === 0 && s.negative !== 0)\n          return s.negative = 0, u = this.isub(s), s.negative = 1, u._normSign();\n        var h, g;\n        this.length > s.length ? (h = this, g = s) : (h = s, g = this);\n        for (var w = 0, _ = 0; _ < g.length; _++)\n          u = (h.words[_] | 0) + (g.words[_] | 0) + w, this.words[_] = u & 67108863, w = u >>> 26;\n        for (; w !== 0 && _ < h.length; _++)\n          u = (h.words[_] | 0) + w, this.words[_] = u & 67108863, w = u >>> 26;\n        if (this.length = h.length, w !== 0)\n          this.words[this.length] = w, this.length++;\n        else if (h !== this)\n          for (; _ < h.length; _++)\n            this.words[_] = h.words[_];\n        return this;\n      }, i.prototype.add = function(s) {\n        var u;\n        return s.negative !== 0 && this.negative === 0 ? (s.negative = 0, u = this.sub(s), s.negative ^= 1, u) : s.negative === 0 && this.negative !== 0 ? (this.negative = 0, u = s.sub(this), this.negative = 1, u) : this.length > s.length ? this.clone().iadd(s) : s.clone().iadd(this);\n      }, i.prototype.isub = function(s) {\n        if (s.negative !== 0) {\n          s.negative = 0;\n          var u = this.iadd(s);\n          return s.negative = 1, u._normSign();\n        } else if (this.negative !== 0)\n          return this.negative = 0, this.iadd(s), this.negative = 1, this._normSign();\n        var h = this.cmp(s);\n        if (h === 0)\n          return this.negative = 0, this.length = 1, this.words[0] = 0, this;\n        var g, w;\n        h > 0 ? (g = this, w = s) : (g = s, w = this);\n        for (var _ = 0, A = 0; A < w.length; A++)\n          u = (g.words[A] | 0) - (w.words[A] | 0) + _, _ = u >> 26, this.words[A] = u & 67108863;\n        for (; _ !== 0 && A < g.length; A++)\n          u = (g.words[A] | 0) + _, _ = u >> 26, this.words[A] = u & 67108863;\n        if (_ === 0 && A < g.length && g !== this)\n          for (; A < g.length; A++)\n            this.words[A] = g.words[A];\n        return this.length = Math.max(this.length, A), g !== this && (this.negative = 1), this._strip();\n      }, i.prototype.sub = function(s) {\n        return this.clone().isub(s);\n      };\n      function z(d, s, u) {\n        u.negative = s.negative ^ d.negative;\n        var h = d.length + s.length | 0;\n        u.length = h, h = h - 1 | 0;\n        var g = d.words[0] | 0, w = s.words[0] | 0, _ = g * w, A = _ & 67108863, p = _ / 67108864 | 0;\n        u.words[0] = A;\n        for (var a = 1; a < h; a++) {\n          for (var l = p >>> 26, M = p & 67108863, k = Math.min(a, s.length - 1), $ = Math.max(0, a - d.length + 1); $ <= k; $++) {\n            var X = a - $ | 0;\n            g = d.words[X] | 0, w = s.words[$] | 0, _ = g * w + M, l += _ / 67108864 | 0, M = _ & 67108863;\n          }\n          u.words[a] = M | 0, p = l | 0;\n        }\n        return p !== 0 ? u.words[a] = p | 0 : u.length--, u._strip();\n      }\n      var K = function(s, u, h) {\n        var g = s.words, w = u.words, _ = h.words, A = 0, p, a, l, M = g[0] | 0, k = M & 8191, $ = M >>> 13, X = g[1] | 0, re = X & 8191, se = X >>> 13, ut = g[2] | 0, xe = ut & 8191, Ie = ut >>> 13, Xe = g[3] | 0, ae = Xe & 8191, ge = Xe >>> 13, it = g[4] | 0, we = it & 8191, Me = it >>> 13, ft = g[5] | 0, ye = ft & 8191, be = ft >>> 13, xt = g[6] | 0, Se = xt & 8191, ke = xt >>> 13, ct = g[7] | 0, _e = ct & 8191, E = ct >>> 13, m = g[8] | 0, y = m & 8191, I = m >>> 13, q = g[9] | 0, H = q & 8191, W = q >>> 13, Be = w[0] | 0, me = Be & 8191, de = Be >>> 13, ot = w[1] | 0, ce = ot & 8191, Le = ot >>> 13, Vn = w[2] | 0, Oe = Vn & 8191, Ne = Vn >>> 13, Hn = w[3] | 0, je = Hn & 8191, Ue = Hn >>> 13, Kn = w[4] | 0, Fe = Kn & 8191, Pe = Kn >>> 13, Wn = w[5] | 0, De = Wn & 8191, $e = Wn >>> 13, Gn = w[6] | 0, ze = Gn & 8191, qe = Gn >>> 13, Yn = w[7] | 0, Ze = Yn & 8191, Ve = Yn >>> 13, Jn = w[8] | 0, He = Jn & 8191, Ke = Jn >>> 13, Xn = w[9] | 0, We = Xn & 8191, Ge = Xn >>> 13;\n        h.negative = s.negative ^ u.negative, h.length = 19, p = Math.imul(k, me), a = Math.imul(k, de), a = a + Math.imul($, me) | 0, l = Math.imul($, de);\n        var Fr = (A + p | 0) + ((a & 8191) << 13) | 0;\n        A = (l + (a >>> 13) | 0) + (Fr >>> 26) | 0, Fr &= 67108863, p = Math.imul(re, me), a = Math.imul(re, de), a = a + Math.imul(se, me) | 0, l = Math.imul(se, de), p = p + Math.imul(k, ce) | 0, a = a + Math.imul(k, Le) | 0, a = a + Math.imul($, ce) | 0, l = l + Math.imul($, Le) | 0;\n        var Pr = (A + p | 0) + ((a & 8191) << 13) | 0;\n        A = (l + (a >>> 13) | 0) + (Pr >>> 26) | 0, Pr &= 67108863, p = Math.imul(xe, me), a = Math.imul(xe, de), a = a + Math.imul(Ie, me) | 0, l = Math.imul(Ie, de), p = p + Math.imul(re, ce) | 0, a = a + Math.imul(re, Le) | 0, a = a + Math.imul(se, ce) | 0, l = l + Math.imul(se, Le) | 0, p = p + Math.imul(k, Oe) | 0, a = a + Math.imul(k, Ne) | 0, a = a + Math.imul($, Oe) | 0, l = l + Math.imul($, Ne) | 0;\n        var Dr = (A + p | 0) + ((a & 8191) << 13) | 0;\n        A = (l + (a >>> 13) | 0) + (Dr >>> 26) | 0, Dr &= 67108863, p = Math.imul(ae, me), a = Math.imul(ae, de), a = a + Math.imul(ge, me) | 0, l = Math.imul(ge, de), p = p + Math.imul(xe, ce) | 0, a = a + Math.imul(xe, Le) | 0, a = a + Math.imul(Ie, ce) | 0, l = l + Math.imul(Ie, Le) | 0, p = p + Math.imul(re, Oe) | 0, a = a + Math.imul(re, Ne) | 0, a = a + Math.imul(se, Oe) | 0, l = l + Math.imul(se, Ne) | 0, p = p + Math.imul(k, je) | 0, a = a + Math.imul(k, Ue) | 0, a = a + Math.imul($, je) | 0, l = l + Math.imul($, Ue) | 0;\n        var $r = (A + p | 0) + ((a & 8191) << 13) | 0;\n        A = (l + (a >>> 13) | 0) + ($r >>> 26) | 0, $r &= 67108863, p = Math.imul(we, me), a = Math.imul(we, de), a = a + Math.imul(Me, me) | 0, l = Math.imul(Me, de), p = p + Math.imul(ae, ce) | 0, a = a + Math.imul(ae, Le) | 0, a = a + Math.imul(ge, ce) | 0, l = l + Math.imul(ge, Le) | 0, p = p + Math.imul(xe, Oe) | 0, a = a + Math.imul(xe, Ne) | 0, a = a + Math.imul(Ie, Oe) | 0, l = l + Math.imul(Ie, Ne) | 0, p = p + Math.imul(re, je) | 0, a = a + Math.imul(re, Ue) | 0, a = a + Math.imul(se, je) | 0, l = l + Math.imul(se, Ue) | 0, p = p + Math.imul(k, Fe) | 0, a = a + Math.imul(k, Pe) | 0, a = a + Math.imul($, Fe) | 0, l = l + Math.imul($, Pe) | 0;\n        var zr = (A + p | 0) + ((a & 8191) << 13) | 0;\n        A = (l + (a >>> 13) | 0) + (zr >>> 26) | 0, zr &= 67108863, p = Math.imul(ye, me), a = Math.imul(ye, de), a = a + Math.imul(be, me) | 0, l = Math.imul(be, de), p = p + Math.imul(we, ce) | 0, a = a + Math.imul(we, Le) | 0, a = a + Math.imul(Me, ce) | 0, l = l + Math.imul(Me, Le) | 0, p = p + Math.imul(ae, Oe) | 0, a = a + Math.imul(ae, Ne) | 0, a = a + Math.imul(ge, Oe) | 0, l = l + Math.imul(ge, Ne) | 0, p = p + Math.imul(xe, je) | 0, a = a + Math.imul(xe, Ue) | 0, a = a + Math.imul(Ie, je) | 0, l = l + Math.imul(Ie, Ue) | 0, p = p + Math.imul(re, Fe) | 0, a = a + Math.imul(re, Pe) | 0, a = a + Math.imul(se, Fe) | 0, l = l + Math.imul(se, Pe) | 0, p = p + Math.imul(k, De) | 0, a = a + Math.imul(k, $e) | 0, a = a + Math.imul($, De) | 0, l = l + Math.imul($, $e) | 0;\n        var qr = (A + p | 0) + ((a & 8191) << 13) | 0;\n        A = (l + (a >>> 13) | 0) + (qr >>> 26) | 0, qr &= 67108863, p = Math.imul(Se, me), a = Math.imul(Se, de), a = a + Math.imul(ke, me) | 0, l = Math.imul(ke, de), p = p + Math.imul(ye, ce) | 0, a = a + Math.imul(ye, Le) | 0, a = a + Math.imul(be, ce) | 0, l = l + Math.imul(be, Le) | 0, p = p + Math.imul(we, Oe) | 0, a = a + Math.imul(we, Ne) | 0, a = a + Math.imul(Me, Oe) | 0, l = l + Math.imul(Me, Ne) | 0, p = p + Math.imul(ae, je) | 0, a = a + Math.imul(ae, Ue) | 0, a = a + Math.imul(ge, je) | 0, l = l + Math.imul(ge, Ue) | 0, p = p + Math.imul(xe, Fe) | 0, a = a + Math.imul(xe, Pe) | 0, a = a + Math.imul(Ie, Fe) | 0, l = l + Math.imul(Ie, Pe) | 0, p = p + Math.imul(re, De) | 0, a = a + Math.imul(re, $e) | 0, a = a + Math.imul(se, De) | 0, l = l + Math.imul(se, $e) | 0, p = p + Math.imul(k, ze) | 0, a = a + Math.imul(k, qe) | 0, a = a + Math.imul($, ze) | 0, l = l + Math.imul($, qe) | 0;\n        var Zr = (A + p | 0) + ((a & 8191) << 13) | 0;\n        A = (l + (a >>> 13) | 0) + (Zr >>> 26) | 0, Zr &= 67108863, p = Math.imul(_e, me), a = Math.imul(_e, de), a = a + Math.imul(E, me) | 0, l = Math.imul(E, de), p = p + Math.imul(Se, ce) | 0, a = a + Math.imul(Se, Le) | 0, a = a + Math.imul(ke, ce) | 0, l = l + Math.imul(ke, Le) | 0, p = p + Math.imul(ye, Oe) | 0, a = a + Math.imul(ye, Ne) | 0, a = a + Math.imul(be, Oe) | 0, l = l + Math.imul(be, Ne) | 0, p = p + Math.imul(we, je) | 0, a = a + Math.imul(we, Ue) | 0, a = a + Math.imul(Me, je) | 0, l = l + Math.imul(Me, Ue) | 0, p = p + Math.imul(ae, Fe) | 0, a = a + Math.imul(ae, Pe) | 0, a = a + Math.imul(ge, Fe) | 0, l = l + Math.imul(ge, Pe) | 0, p = p + Math.imul(xe, De) | 0, a = a + Math.imul(xe, $e) | 0, a = a + Math.imul(Ie, De) | 0, l = l + Math.imul(Ie, $e) | 0, p = p + Math.imul(re, ze) | 0, a = a + Math.imul(re, qe) | 0, a = a + Math.imul(se, ze) | 0, l = l + Math.imul(se, qe) | 0, p = p + Math.imul(k, Ze) | 0, a = a + Math.imul(k, Ve) | 0, a = a + Math.imul($, Ze) | 0, l = l + Math.imul($, Ve) | 0;\n        var Vr = (A + p | 0) + ((a & 8191) << 13) | 0;\n        A = (l + (a >>> 13) | 0) + (Vr >>> 26) | 0, Vr &= 67108863, p = Math.imul(y, me), a = Math.imul(y, de), a = a + Math.imul(I, me) | 0, l = Math.imul(I, de), p = p + Math.imul(_e, ce) | 0, a = a + Math.imul(_e, Le) | 0, a = a + Math.imul(E, ce) | 0, l = l + Math.imul(E, Le) | 0, p = p + Math.imul(Se, Oe) | 0, a = a + Math.imul(Se, Ne) | 0, a = a + Math.imul(ke, Oe) | 0, l = l + Math.imul(ke, Ne) | 0, p = p + Math.imul(ye, je) | 0, a = a + Math.imul(ye, Ue) | 0, a = a + Math.imul(be, je) | 0, l = l + Math.imul(be, Ue) | 0, p = p + Math.imul(we, Fe) | 0, a = a + Math.imul(we, Pe) | 0, a = a + Math.imul(Me, Fe) | 0, l = l + Math.imul(Me, Pe) | 0, p = p + Math.imul(ae, De) | 0, a = a + Math.imul(ae, $e) | 0, a = a + Math.imul(ge, De) | 0, l = l + Math.imul(ge, $e) | 0, p = p + Math.imul(xe, ze) | 0, a = a + Math.imul(xe, qe) | 0, a = a + Math.imul(Ie, ze) | 0, l = l + Math.imul(Ie, qe) | 0, p = p + Math.imul(re, Ze) | 0, a = a + Math.imul(re, Ve) | 0, a = a + Math.imul(se, Ze) | 0, l = l + Math.imul(se, Ve) | 0, p = p + Math.imul(k, He) | 0, a = a + Math.imul(k, Ke) | 0, a = a + Math.imul($, He) | 0, l = l + Math.imul($, Ke) | 0;\n        var Hr = (A + p | 0) + ((a & 8191) << 13) | 0;\n        A = (l + (a >>> 13) | 0) + (Hr >>> 26) | 0, Hr &= 67108863, p = Math.imul(H, me), a = Math.imul(H, de), a = a + Math.imul(W, me) | 0, l = Math.imul(W, de), p = p + Math.imul(y, ce) | 0, a = a + Math.imul(y, Le) | 0, a = a + Math.imul(I, ce) | 0, l = l + Math.imul(I, Le) | 0, p = p + Math.imul(_e, Oe) | 0, a = a + Math.imul(_e, Ne) | 0, a = a + Math.imul(E, Oe) | 0, l = l + Math.imul(E, Ne) | 0, p = p + Math.imul(Se, je) | 0, a = a + Math.imul(Se, Ue) | 0, a = a + Math.imul(ke, je) | 0, l = l + Math.imul(ke, Ue) | 0, p = p + Math.imul(ye, Fe) | 0, a = a + Math.imul(ye, Pe) | 0, a = a + Math.imul(be, Fe) | 0, l = l + Math.imul(be, Pe) | 0, p = p + Math.imul(we, De) | 0, a = a + Math.imul(we, $e) | 0, a = a + Math.imul(Me, De) | 0, l = l + Math.imul(Me, $e) | 0, p = p + Math.imul(ae, ze) | 0, a = a + Math.imul(ae, qe) | 0, a = a + Math.imul(ge, ze) | 0, l = l + Math.imul(ge, qe) | 0, p = p + Math.imul(xe, Ze) | 0, a = a + Math.imul(xe, Ve) | 0, a = a + Math.imul(Ie, Ze) | 0, l = l + Math.imul(Ie, Ve) | 0, p = p + Math.imul(re, He) | 0, a = a + Math.imul(re, Ke) | 0, a = a + Math.imul(se, He) | 0, l = l + Math.imul(se, Ke) | 0, p = p + Math.imul(k, We) | 0, a = a + Math.imul(k, Ge) | 0, a = a + Math.imul($, We) | 0, l = l + Math.imul($, Ge) | 0;\n        var Kr = (A + p | 0) + ((a & 8191) << 13) | 0;\n        A = (l + (a >>> 13) | 0) + (Kr >>> 26) | 0, Kr &= 67108863, p = Math.imul(H, ce), a = Math.imul(H, Le), a = a + Math.imul(W, ce) | 0, l = Math.imul(W, Le), p = p + Math.imul(y, Oe) | 0, a = a + Math.imul(y, Ne) | 0, a = a + Math.imul(I, Oe) | 0, l = l + Math.imul(I, Ne) | 0, p = p + Math.imul(_e, je) | 0, a = a + Math.imul(_e, Ue) | 0, a = a + Math.imul(E, je) | 0, l = l + Math.imul(E, Ue) | 0, p = p + Math.imul(Se, Fe) | 0, a = a + Math.imul(Se, Pe) | 0, a = a + Math.imul(ke, Fe) | 0, l = l + Math.imul(ke, Pe) | 0, p = p + Math.imul(ye, De) | 0, a = a + Math.imul(ye, $e) | 0, a = a + Math.imul(be, De) | 0, l = l + Math.imul(be, $e) | 0, p = p + Math.imul(we, ze) | 0, a = a + Math.imul(we, qe) | 0, a = a + Math.imul(Me, ze) | 0, l = l + Math.imul(Me, qe) | 0, p = p + Math.imul(ae, Ze) | 0, a = a + Math.imul(ae, Ve) | 0, a = a + Math.imul(ge, Ze) | 0, l = l + Math.imul(ge, Ve) | 0, p = p + Math.imul(xe, He) | 0, a = a + Math.imul(xe, Ke) | 0, a = a + Math.imul(Ie, He) | 0, l = l + Math.imul(Ie, Ke) | 0, p = p + Math.imul(re, We) | 0, a = a + Math.imul(re, Ge) | 0, a = a + Math.imul(se, We) | 0, l = l + Math.imul(se, Ge) | 0;\n        var Wr = (A + p | 0) + ((a & 8191) << 13) | 0;\n        A = (l + (a >>> 13) | 0) + (Wr >>> 26) | 0, Wr &= 67108863, p = Math.imul(H, Oe), a = Math.imul(H, Ne), a = a + Math.imul(W, Oe) | 0, l = Math.imul(W, Ne), p = p + Math.imul(y, je) | 0, a = a + Math.imul(y, Ue) | 0, a = a + Math.imul(I, je) | 0, l = l + Math.imul(I, Ue) | 0, p = p + Math.imul(_e, Fe) | 0, a = a + Math.imul(_e, Pe) | 0, a = a + Math.imul(E, Fe) | 0, l = l + Math.imul(E, Pe) | 0, p = p + Math.imul(Se, De) | 0, a = a + Math.imul(Se, $e) | 0, a = a + Math.imul(ke, De) | 0, l = l + Math.imul(ke, $e) | 0, p = p + Math.imul(ye, ze) | 0, a = a + Math.imul(ye, qe) | 0, a = a + Math.imul(be, ze) | 0, l = l + Math.imul(be, qe) | 0, p = p + Math.imul(we, Ze) | 0, a = a + Math.imul(we, Ve) | 0, a = a + Math.imul(Me, Ze) | 0, l = l + Math.imul(Me, Ve) | 0, p = p + Math.imul(ae, He) | 0, a = a + Math.imul(ae, Ke) | 0, a = a + Math.imul(ge, He) | 0, l = l + Math.imul(ge, Ke) | 0, p = p + Math.imul(xe, We) | 0, a = a + Math.imul(xe, Ge) | 0, a = a + Math.imul(Ie, We) | 0, l = l + Math.imul(Ie, Ge) | 0;\n        var Gr = (A + p | 0) + ((a & 8191) << 13) | 0;\n        A = (l + (a >>> 13) | 0) + (Gr >>> 26) | 0, Gr &= 67108863, p = Math.imul(H, je), a = Math.imul(H, Ue), a = a + Math.imul(W, je) | 0, l = Math.imul(W, Ue), p = p + Math.imul(y, Fe) | 0, a = a + Math.imul(y, Pe) | 0, a = a + Math.imul(I, Fe) | 0, l = l + Math.imul(I, Pe) | 0, p = p + Math.imul(_e, De) | 0, a = a + Math.imul(_e, $e) | 0, a = a + Math.imul(E, De) | 0, l = l + Math.imul(E, $e) | 0, p = p + Math.imul(Se, ze) | 0, a = a + Math.imul(Se, qe) | 0, a = a + Math.imul(ke, ze) | 0, l = l + Math.imul(ke, qe) | 0, p = p + Math.imul(ye, Ze) | 0, a = a + Math.imul(ye, Ve) | 0, a = a + Math.imul(be, Ze) | 0, l = l + Math.imul(be, Ve) | 0, p = p + Math.imul(we, He) | 0, a = a + Math.imul(we, Ke) | 0, a = a + Math.imul(Me, He) | 0, l = l + Math.imul(Me, Ke) | 0, p = p + Math.imul(ae, We) | 0, a = a + Math.imul(ae, Ge) | 0, a = a + Math.imul(ge, We) | 0, l = l + Math.imul(ge, Ge) | 0;\n        var Yr = (A + p | 0) + ((a & 8191) << 13) | 0;\n        A = (l + (a >>> 13) | 0) + (Yr >>> 26) | 0, Yr &= 67108863, p = Math.imul(H, Fe), a = Math.imul(H, Pe), a = a + Math.imul(W, Fe) | 0, l = Math.imul(W, Pe), p = p + Math.imul(y, De) | 0, a = a + Math.imul(y, $e) | 0, a = a + Math.imul(I, De) | 0, l = l + Math.imul(I, $e) | 0, p = p + Math.imul(_e, ze) | 0, a = a + Math.imul(_e, qe) | 0, a = a + Math.imul(E, ze) | 0, l = l + Math.imul(E, qe) | 0, p = p + Math.imul(Se, Ze) | 0, a = a + Math.imul(Se, Ve) | 0, a = a + Math.imul(ke, Ze) | 0, l = l + Math.imul(ke, Ve) | 0, p = p + Math.imul(ye, He) | 0, a = a + Math.imul(ye, Ke) | 0, a = a + Math.imul(be, He) | 0, l = l + Math.imul(be, Ke) | 0, p = p + Math.imul(we, We) | 0, a = a + Math.imul(we, Ge) | 0, a = a + Math.imul(Me, We) | 0, l = l + Math.imul(Me, Ge) | 0;\n        var Jr = (A + p | 0) + ((a & 8191) << 13) | 0;\n        A = (l + (a >>> 13) | 0) + (Jr >>> 26) | 0, Jr &= 67108863, p = Math.imul(H, De), a = Math.imul(H, $e), a = a + Math.imul(W, De) | 0, l = Math.imul(W, $e), p = p + Math.imul(y, ze) | 0, a = a + Math.imul(y, qe) | 0, a = a + Math.imul(I, ze) | 0, l = l + Math.imul(I, qe) | 0, p = p + Math.imul(_e, Ze) | 0, a = a + Math.imul(_e, Ve) | 0, a = a + Math.imul(E, Ze) | 0, l = l + Math.imul(E, Ve) | 0, p = p + Math.imul(Se, He) | 0, a = a + Math.imul(Se, Ke) | 0, a = a + Math.imul(ke, He) | 0, l = l + Math.imul(ke, Ke) | 0, p = p + Math.imul(ye, We) | 0, a = a + Math.imul(ye, Ge) | 0, a = a + Math.imul(be, We) | 0, l = l + Math.imul(be, Ge) | 0;\n        var Xr = (A + p | 0) + ((a & 8191) << 13) | 0;\n        A = (l + (a >>> 13) | 0) + (Xr >>> 26) | 0, Xr &= 67108863, p = Math.imul(H, ze), a = Math.imul(H, qe), a = a + Math.imul(W, ze) | 0, l = Math.imul(W, qe), p = p + Math.imul(y, Ze) | 0, a = a + Math.imul(y, Ve) | 0, a = a + Math.imul(I, Ze) | 0, l = l + Math.imul(I, Ve) | 0, p = p + Math.imul(_e, He) | 0, a = a + Math.imul(_e, Ke) | 0, a = a + Math.imul(E, He) | 0, l = l + Math.imul(E, Ke) | 0, p = p + Math.imul(Se, We) | 0, a = a + Math.imul(Se, Ge) | 0, a = a + Math.imul(ke, We) | 0, l = l + Math.imul(ke, Ge) | 0;\n        var Qr = (A + p | 0) + ((a & 8191) << 13) | 0;\n        A = (l + (a >>> 13) | 0) + (Qr >>> 26) | 0, Qr &= 67108863, p = Math.imul(H, Ze), a = Math.imul(H, Ve), a = a + Math.imul(W, Ze) | 0, l = Math.imul(W, Ve), p = p + Math.imul(y, He) | 0, a = a + Math.imul(y, Ke) | 0, a = a + Math.imul(I, He) | 0, l = l + Math.imul(I, Ke) | 0, p = p + Math.imul(_e, We) | 0, a = a + Math.imul(_e, Ge) | 0, a = a + Math.imul(E, We) | 0, l = l + Math.imul(E, Ge) | 0;\n        var en = (A + p | 0) + ((a & 8191) << 13) | 0;\n        A = (l + (a >>> 13) | 0) + (en >>> 26) | 0, en &= 67108863, p = Math.imul(H, He), a = Math.imul(H, Ke), a = a + Math.imul(W, He) | 0, l = Math.imul(W, Ke), p = p + Math.imul(y, We) | 0, a = a + Math.imul(y, Ge) | 0, a = a + Math.imul(I, We) | 0, l = l + Math.imul(I, Ge) | 0;\n        var tn = (A + p | 0) + ((a & 8191) << 13) | 0;\n        A = (l + (a >>> 13) | 0) + (tn >>> 26) | 0, tn &= 67108863, p = Math.imul(H, We), a = Math.imul(H, Ge), a = a + Math.imul(W, We) | 0, l = Math.imul(W, Ge);\n        var rn = (A + p | 0) + ((a & 8191) << 13) | 0;\n        return A = (l + (a >>> 13) | 0) + (rn >>> 26) | 0, rn &= 67108863, _[0] = Fr, _[1] = Pr, _[2] = Dr, _[3] = $r, _[4] = zr, _[5] = qr, _[6] = Zr, _[7] = Vr, _[8] = Hr, _[9] = Kr, _[10] = Wr, _[11] = Gr, _[12] = Yr, _[13] = Jr, _[14] = Xr, _[15] = Qr, _[16] = en, _[17] = tn, _[18] = rn, A !== 0 && (_[19] = A, h.length++), h;\n      };\n      Math.imul || (K = z);\n      function Z(d, s, u) {\n        u.negative = s.negative ^ d.negative, u.length = d.length + s.length;\n        for (var h = 0, g = 0, w = 0; w < u.length - 1; w++) {\n          var _ = g;\n          g = 0;\n          for (var A = h & 67108863, p = Math.min(w, s.length - 1), a = Math.max(0, w - d.length + 1); a <= p; a++) {\n            var l = w - a, M = d.words[l] | 0, k = s.words[a] | 0, $ = M * k, X = $ & 67108863;\n            _ = _ + ($ / 67108864 | 0) | 0, X = X + A | 0, A = X & 67108863, _ = _ + (X >>> 26) | 0, g += _ >>> 26, _ &= 67108863;\n          }\n          u.words[w] = A, h = _, _ = g;\n        }\n        return h !== 0 ? u.words[w] = h : u.length--, u._strip();\n      }\n      function Q(d, s, u) {\n        return Z(d, s, u);\n      }\n      i.prototype.mulTo = function(s, u) {\n        var h, g = this.length + s.length;\n        return this.length === 10 && s.length === 10 ? h = K(this, s, u) : g < 63 ? h = z(this, s, u) : g < 1024 ? h = Z(this, s, u) : h = Q(this, s, u), h;\n      }, i.prototype.mul = function(s) {\n        var u = new i(null);\n        return u.words = new Array(this.length + s.length), this.mulTo(s, u);\n      }, i.prototype.mulf = function(s) {\n        var u = new i(null);\n        return u.words = new Array(this.length + s.length), Q(this, s, u);\n      }, i.prototype.imul = function(s) {\n        return this.clone().mulTo(s, this);\n      }, i.prototype.imuln = function(s) {\n        var u = s < 0;\n        u && (s = -s), n(typeof s == \"number\"), n(s < 67108864);\n        for (var h = 0, g = 0; g < this.length; g++) {\n          var w = (this.words[g] | 0) * s, _ = (w & 67108863) + (h & 67108863);\n          h >>= 26, h += w / 67108864 | 0, h += _ >>> 26, this.words[g] = _ & 67108863;\n        }\n        return h !== 0 && (this.words[g] = h, this.length++), this.length = s === 0 ? 1 : this.length, u ? this.ineg() : this;\n      }, i.prototype.muln = function(s) {\n        return this.clone().imuln(s);\n      }, i.prototype.sqr = function() {\n        return this.mul(this);\n      }, i.prototype.isqr = function() {\n        return this.imul(this.clone());\n      }, i.prototype.pow = function(s) {\n        var u = R(s);\n        if (u.length === 0) return new i(1);\n        for (var h = this, g = 0; g < u.length && u[g] === 0; g++, h = h.sqr())\n          ;\n        if (++g < u.length)\n          for (var w = h.sqr(); g < u.length; g++, w = w.sqr())\n            u[g] !== 0 && (h = h.mul(w));\n        return h;\n      }, i.prototype.iushln = function(s) {\n        n(typeof s == \"number\" && s >= 0);\n        var u = s % 26, h = (s - u) / 26, g = 67108863 >>> 26 - u << 26 - u, w;\n        if (u !== 0) {\n          var _ = 0;\n          for (w = 0; w < this.length; w++) {\n            var A = this.words[w] & g, p = (this.words[w] | 0) - A << u;\n            this.words[w] = p | _, _ = A >>> 26 - u;\n          }\n          _ && (this.words[w] = _, this.length++);\n        }\n        if (h !== 0) {\n          for (w = this.length - 1; w >= 0; w--)\n            this.words[w + h] = this.words[w];\n          for (w = 0; w < h; w++)\n            this.words[w] = 0;\n          this.length += h;\n        }\n        return this._strip();\n      }, i.prototype.ishln = function(s) {\n        return n(this.negative === 0), this.iushln(s);\n      }, i.prototype.iushrn = function(s, u, h) {\n        n(typeof s == \"number\" && s >= 0);\n        var g;\n        u ? g = (u - u % 26) / 26 : g = 0;\n        var w = s % 26, _ = Math.min((s - w) / 26, this.length), A = 67108863 ^ 67108863 >>> w << w, p = h;\n        if (g -= _, g = Math.max(0, g), p) {\n          for (var a = 0; a < _; a++)\n            p.words[a] = this.words[a];\n          p.length = _;\n        }\n        if (_ !== 0) if (this.length > _)\n          for (this.length -= _, a = 0; a < this.length; a++)\n            this.words[a] = this.words[a + _];\n        else\n          this.words[0] = 0, this.length = 1;\n        var l = 0;\n        for (a = this.length - 1; a >= 0 && (l !== 0 || a >= g); a--) {\n          var M = this.words[a] | 0;\n          this.words[a] = l << 26 - w | M >>> w, l = M & A;\n        }\n        return p && l !== 0 && (p.words[p.length++] = l), this.length === 0 && (this.words[0] = 0, this.length = 1), this._strip();\n      }, i.prototype.ishrn = function(s, u, h) {\n        return n(this.negative === 0), this.iushrn(s, u, h);\n      }, i.prototype.shln = function(s) {\n        return this.clone().ishln(s);\n      }, i.prototype.ushln = function(s) {\n        return this.clone().iushln(s);\n      }, i.prototype.shrn = function(s) {\n        return this.clone().ishrn(s);\n      }, i.prototype.ushrn = function(s) {\n        return this.clone().iushrn(s);\n      }, i.prototype.testn = function(s) {\n        n(typeof s == \"number\" && s >= 0);\n        var u = s % 26, h = (s - u) / 26, g = 1 << u;\n        if (this.length <= h) return !1;\n        var w = this.words[h];\n        return !!(w & g);\n      }, i.prototype.imaskn = function(s) {\n        n(typeof s == \"number\" && s >= 0);\n        var u = s % 26, h = (s - u) / 26;\n        if (n(this.negative === 0, \"imaskn works only with positive numbers\"), this.length <= h)\n          return this;\n        if (u !== 0 && h++, this.length = Math.min(h, this.length), u !== 0) {\n          var g = 67108863 ^ 67108863 >>> u << u;\n          this.words[this.length - 1] &= g;\n        }\n        return this._strip();\n      }, i.prototype.maskn = function(s) {\n        return this.clone().imaskn(s);\n      }, i.prototype.iaddn = function(s) {\n        return n(typeof s == \"number\"), n(s < 67108864), s < 0 ? this.isubn(-s) : this.negative !== 0 ? this.length === 1 && (this.words[0] | 0) <= s ? (this.words[0] = s - (this.words[0] | 0), this.negative = 0, this) : (this.negative = 0, this.isubn(s), this.negative = 1, this) : this._iaddn(s);\n      }, i.prototype._iaddn = function(s) {\n        this.words[0] += s;\n        for (var u = 0; u < this.length && this.words[u] >= 67108864; u++)\n          this.words[u] -= 67108864, u === this.length - 1 ? this.words[u + 1] = 1 : this.words[u + 1]++;\n        return this.length = Math.max(this.length, u + 1), this;\n      }, i.prototype.isubn = function(s) {\n        if (n(typeof s == \"number\"), n(s < 67108864), s < 0) return this.iaddn(-s);\n        if (this.negative !== 0)\n          return this.negative = 0, this.iaddn(s), this.negative = 1, this;\n        if (this.words[0] -= s, this.length === 1 && this.words[0] < 0)\n          this.words[0] = -this.words[0], this.negative = 1;\n        else\n          for (var u = 0; u < this.length && this.words[u] < 0; u++)\n            this.words[u] += 67108864, this.words[u + 1] -= 1;\n        return this._strip();\n      }, i.prototype.addn = function(s) {\n        return this.clone().iaddn(s);\n      }, i.prototype.subn = function(s) {\n        return this.clone().isubn(s);\n      }, i.prototype.iabs = function() {\n        return this.negative = 0, this;\n      }, i.prototype.abs = function() {\n        return this.clone().iabs();\n      }, i.prototype._ishlnsubmul = function(s, u, h) {\n        var g = s.length + h, w;\n        this._expand(g);\n        var _, A = 0;\n        for (w = 0; w < s.length; w++) {\n          _ = (this.words[w + h] | 0) + A;\n          var p = (s.words[w] | 0) * u;\n          _ -= p & 67108863, A = (_ >> 26) - (p / 67108864 | 0), this.words[w + h] = _ & 67108863;\n        }\n        for (; w < this.length - h; w++)\n          _ = (this.words[w + h] | 0) + A, A = _ >> 26, this.words[w + h] = _ & 67108863;\n        if (A === 0) return this._strip();\n        for (n(A === -1), A = 0, w = 0; w < this.length; w++)\n          _ = -(this.words[w] | 0) + A, A = _ >> 26, this.words[w] = _ & 67108863;\n        return this.negative = 1, this._strip();\n      }, i.prototype._wordDiv = function(s, u) {\n        var h = this.length - s.length, g = this.clone(), w = s, _ = w.words[w.length - 1] | 0, A = this._countBits(_);\n        h = 26 - A, h !== 0 && (w = w.ushln(h), g.iushln(h), _ = w.words[w.length - 1] | 0);\n        var p = g.length - w.length, a;\n        if (u !== \"mod\") {\n          a = new i(null), a.length = p + 1, a.words = new Array(a.length);\n          for (var l = 0; l < a.length; l++)\n            a.words[l] = 0;\n        }\n        var M = g.clone()._ishlnsubmul(w, 1, p);\n        M.negative === 0 && (g = M, a && (a.words[p] = 1));\n        for (var k = p - 1; k >= 0; k--) {\n          var $ = (g.words[w.length + k] | 0) * 67108864 + (g.words[w.length + k - 1] | 0);\n          for ($ = Math.min($ / _ | 0, 67108863), g._ishlnsubmul(w, $, k); g.negative !== 0; )\n            $--, g.negative = 0, g._ishlnsubmul(w, 1, k), g.isZero() || (g.negative ^= 1);\n          a && (a.words[k] = $);\n        }\n        return a && a._strip(), g._strip(), u !== \"div\" && h !== 0 && g.iushrn(h), {\n          div: a || null,\n          mod: g\n        };\n      }, i.prototype.divmod = function(s, u, h) {\n        if (n(!s.isZero()), this.isZero())\n          return {\n            div: new i(0),\n            mod: new i(0)\n          };\n        var g, w, _;\n        return this.negative !== 0 && s.negative === 0 ? (_ = this.neg().divmod(s, u), u !== \"mod\" && (g = _.div.neg()), u !== \"div\" && (w = _.mod.neg(), h && w.negative !== 0 && w.iadd(s)), {\n          div: g,\n          mod: w\n        }) : this.negative === 0 && s.negative !== 0 ? (_ = this.divmod(s.neg(), u), u !== \"mod\" && (g = _.div.neg()), {\n          div: g,\n          mod: _.mod\n        }) : (this.negative & s.negative) !== 0 ? (_ = this.neg().divmod(s.neg(), u), u !== \"div\" && (w = _.mod.neg(), h && w.negative !== 0 && w.isub(s)), {\n          div: _.div,\n          mod: w\n        }) : s.length > this.length || this.cmp(s) < 0 ? {\n          div: new i(0),\n          mod: this\n        } : s.length === 1 ? u === \"div\" ? {\n          div: this.divn(s.words[0]),\n          mod: null\n        } : u === \"mod\" ? {\n          div: null,\n          mod: new i(this.modrn(s.words[0]))\n        } : {\n          div: this.divn(s.words[0]),\n          mod: new i(this.modrn(s.words[0]))\n        } : this._wordDiv(s, u);\n      }, i.prototype.div = function(s) {\n        return this.divmod(s, \"div\", !1).div;\n      }, i.prototype.mod = function(s) {\n        return this.divmod(s, \"mod\", !1).mod;\n      }, i.prototype.umod = function(s) {\n        return this.divmod(s, \"mod\", !0).mod;\n      }, i.prototype.divRound = function(s) {\n        var u = this.divmod(s);\n        if (u.mod.isZero()) return u.div;\n        var h = u.div.negative !== 0 ? u.mod.isub(s) : u.mod, g = s.ushrn(1), w = s.andln(1), _ = h.cmp(g);\n        return _ < 0 || w === 1 && _ === 0 ? u.div : u.div.negative !== 0 ? u.div.isubn(1) : u.div.iaddn(1);\n      }, i.prototype.modrn = function(s) {\n        var u = s < 0;\n        u && (s = -s), n(s <= 67108863);\n        for (var h = (1 << 26) % s, g = 0, w = this.length - 1; w >= 0; w--)\n          g = (h * g + (this.words[w] | 0)) % s;\n        return u ? -g : g;\n      }, i.prototype.modn = function(s) {\n        return this.modrn(s);\n      }, i.prototype.idivn = function(s) {\n        var u = s < 0;\n        u && (s = -s), n(s <= 67108863);\n        for (var h = 0, g = this.length - 1; g >= 0; g--) {\n          var w = (this.words[g] | 0) + h * 67108864;\n          this.words[g] = w / s | 0, h = w % s;\n        }\n        return this._strip(), u ? this.ineg() : this;\n      }, i.prototype.divn = function(s) {\n        return this.clone().idivn(s);\n      }, i.prototype.egcd = function(s) {\n        n(s.negative === 0), n(!s.isZero());\n        var u = this, h = s.clone();\n        u.negative !== 0 ? u = u.umod(s) : u = u.clone();\n        for (var g = new i(1), w = new i(0), _ = new i(0), A = new i(1), p = 0; u.isEven() && h.isEven(); )\n          u.iushrn(1), h.iushrn(1), ++p;\n        for (var a = h.clone(), l = u.clone(); !u.isZero(); ) {\n          for (var M = 0, k = 1; (u.words[0] & k) === 0 && M < 26; ++M, k <<= 1) ;\n          if (M > 0)\n            for (u.iushrn(M); M-- > 0; )\n              (g.isOdd() || w.isOdd()) && (g.iadd(a), w.isub(l)), g.iushrn(1), w.iushrn(1);\n          for (var $ = 0, X = 1; (h.words[0] & X) === 0 && $ < 26; ++$, X <<= 1) ;\n          if ($ > 0)\n            for (h.iushrn($); $-- > 0; )\n              (_.isOdd() || A.isOdd()) && (_.iadd(a), A.isub(l)), _.iushrn(1), A.iushrn(1);\n          u.cmp(h) >= 0 ? (u.isub(h), g.isub(_), w.isub(A)) : (h.isub(u), _.isub(g), A.isub(w));\n        }\n        return {\n          a: _,\n          b: A,\n          gcd: h.iushln(p)\n        };\n      }, i.prototype._invmp = function(s) {\n        n(s.negative === 0), n(!s.isZero());\n        var u = this, h = s.clone();\n        u.negative !== 0 ? u = u.umod(s) : u = u.clone();\n        for (var g = new i(1), w = new i(0), _ = h.clone(); u.cmpn(1) > 0 && h.cmpn(1) > 0; ) {\n          for (var A = 0, p = 1; (u.words[0] & p) === 0 && A < 26; ++A, p <<= 1) ;\n          if (A > 0)\n            for (u.iushrn(A); A-- > 0; )\n              g.isOdd() && g.iadd(_), g.iushrn(1);\n          for (var a = 0, l = 1; (h.words[0] & l) === 0 && a < 26; ++a, l <<= 1) ;\n          if (a > 0)\n            for (h.iushrn(a); a-- > 0; )\n              w.isOdd() && w.iadd(_), w.iushrn(1);\n          u.cmp(h) >= 0 ? (u.isub(h), g.isub(w)) : (h.isub(u), w.isub(g));\n        }\n        var M;\n        return u.cmpn(1) === 0 ? M = g : M = w, M.cmpn(0) < 0 && M.iadd(s), M;\n      }, i.prototype.gcd = function(s) {\n        if (this.isZero()) return s.abs();\n        if (s.isZero()) return this.abs();\n        var u = this.clone(), h = s.clone();\n        u.negative = 0, h.negative = 0;\n        for (var g = 0; u.isEven() && h.isEven(); g++)\n          u.iushrn(1), h.iushrn(1);\n        do {\n          for (; u.isEven(); )\n            u.iushrn(1);\n          for (; h.isEven(); )\n            h.iushrn(1);\n          var w = u.cmp(h);\n          if (w < 0) {\n            var _ = u;\n            u = h, h = _;\n          } else if (w === 0 || h.cmpn(1) === 0)\n            break;\n          u.isub(h);\n        } while (!0);\n        return h.iushln(g);\n      }, i.prototype.invm = function(s) {\n        return this.egcd(s).a.umod(s);\n      }, i.prototype.isEven = function() {\n        return (this.words[0] & 1) === 0;\n      }, i.prototype.isOdd = function() {\n        return (this.words[0] & 1) === 1;\n      }, i.prototype.andln = function(s) {\n        return this.words[0] & s;\n      }, i.prototype.bincn = function(s) {\n        n(typeof s == \"number\");\n        var u = s % 26, h = (s - u) / 26, g = 1 << u;\n        if (this.length <= h)\n          return this._expand(h + 1), this.words[h] |= g, this;\n        for (var w = g, _ = h; w !== 0 && _ < this.length; _++) {\n          var A = this.words[_] | 0;\n          A += w, w = A >>> 26, A &= 67108863, this.words[_] = A;\n        }\n        return w !== 0 && (this.words[_] = w, this.length++), this;\n      }, i.prototype.isZero = function() {\n        return this.length === 1 && this.words[0] === 0;\n      }, i.prototype.cmpn = function(s) {\n        var u = s < 0;\n        if (this.negative !== 0 && !u) return -1;\n        if (this.negative === 0 && u) return 1;\n        this._strip();\n        var h;\n        if (this.length > 1)\n          h = 1;\n        else {\n          u && (s = -s), n(s <= 67108863, \"Number is too big\");\n          var g = this.words[0] | 0;\n          h = g === s ? 0 : g < s ? -1 : 1;\n        }\n        return this.negative !== 0 ? -h | 0 : h;\n      }, i.prototype.cmp = function(s) {\n        if (this.negative !== 0 && s.negative === 0) return -1;\n        if (this.negative === 0 && s.negative !== 0) return 1;\n        var u = this.ucmp(s);\n        return this.negative !== 0 ? -u | 0 : u;\n      }, i.prototype.ucmp = function(s) {\n        if (this.length > s.length) return 1;\n        if (this.length < s.length) return -1;\n        for (var u = 0, h = this.length - 1; h >= 0; h--) {\n          var g = this.words[h] | 0, w = s.words[h] | 0;\n          if (g !== w) {\n            g < w ? u = -1 : g > w && (u = 1);\n            break;\n          }\n        }\n        return u;\n      }, i.prototype.gtn = function(s) {\n        return this.cmpn(s) === 1;\n      }, i.prototype.gt = function(s) {\n        return this.cmp(s) === 1;\n      }, i.prototype.gten = function(s) {\n        return this.cmpn(s) >= 0;\n      }, i.prototype.gte = function(s) {\n        return this.cmp(s) >= 0;\n      }, i.prototype.ltn = function(s) {\n        return this.cmpn(s) === -1;\n      }, i.prototype.lt = function(s) {\n        return this.cmp(s) === -1;\n      }, i.prototype.lten = function(s) {\n        return this.cmpn(s) <= 0;\n      }, i.prototype.lte = function(s) {\n        return this.cmp(s) <= 0;\n      }, i.prototype.eqn = function(s) {\n        return this.cmpn(s) === 0;\n      }, i.prototype.eq = function(s) {\n        return this.cmp(s) === 0;\n      }, i.red = function(s) {\n        return new L(s);\n      }, i.prototype.toRed = function(s) {\n        return n(!this.red, \"Already a number in reduction context\"), n(this.negative === 0, \"red works only with positives\"), s.convertTo(this)._forceRed(s);\n      }, i.prototype.fromRed = function() {\n        return n(this.red, \"fromRed works only with numbers in reduction context\"), this.red.convertFrom(this);\n      }, i.prototype._forceRed = function(s) {\n        return this.red = s, this;\n      }, i.prototype.forceRed = function(s) {\n        return n(!this.red, \"Already a number in reduction context\"), this._forceRed(s);\n      }, i.prototype.redAdd = function(s) {\n        return n(this.red, \"redAdd works only with red numbers\"), this.red.add(this, s);\n      }, i.prototype.redIAdd = function(s) {\n        return n(this.red, \"redIAdd works only with red numbers\"), this.red.iadd(this, s);\n      }, i.prototype.redSub = function(s) {\n        return n(this.red, \"redSub works only with red numbers\"), this.red.sub(this, s);\n      }, i.prototype.redISub = function(s) {\n        return n(this.red, \"redISub works only with red numbers\"), this.red.isub(this, s);\n      }, i.prototype.redShl = function(s) {\n        return n(this.red, \"redShl works only with red numbers\"), this.red.shl(this, s);\n      }, i.prototype.redMul = function(s) {\n        return n(this.red, \"redMul works only with red numbers\"), this.red._verify2(this, s), this.red.mul(this, s);\n      }, i.prototype.redIMul = function(s) {\n        return n(this.red, \"redMul works only with red numbers\"), this.red._verify2(this, s), this.red.imul(this, s);\n      }, i.prototype.redSqr = function() {\n        return n(this.red, \"redSqr works only with red numbers\"), this.red._verify1(this), this.red.sqr(this);\n      }, i.prototype.redISqr = function() {\n        return n(this.red, \"redISqr works only with red numbers\"), this.red._verify1(this), this.red.isqr(this);\n      }, i.prototype.redSqrt = function() {\n        return n(this.red, \"redSqrt works only with red numbers\"), this.red._verify1(this), this.red.sqrt(this);\n      }, i.prototype.redInvm = function() {\n        return n(this.red, \"redInvm works only with red numbers\"), this.red._verify1(this), this.red.invm(this);\n      }, i.prototype.redNeg = function() {\n        return n(this.red, \"redNeg works only with red numbers\"), this.red._verify1(this), this.red.neg(this);\n      }, i.prototype.redPow = function(s) {\n        return n(this.red && !s.red, \"redPow(normalNum)\"), this.red._verify1(this), this.red.pow(this, s);\n      };\n      var j = {\n        k256: null,\n        p224: null,\n        p192: null,\n        p25519: null\n      };\n      function V(d, s) {\n        this.name = d, this.p = new i(s, 16), this.n = this.p.bitLength(), this.k = new i(1).iushln(this.n).isub(this.p), this.tmp = this._tmp();\n      }\n      V.prototype._tmp = function() {\n        var s = new i(null);\n        return s.words = new Array(Math.ceil(this.n / 13)), s;\n      }, V.prototype.ireduce = function(s) {\n        var u = s, h;\n        do\n          this.split(u, this.tmp), u = this.imulK(u), u = u.iadd(this.tmp), h = u.bitLength();\n        while (h > this.n);\n        var g = h < this.n ? -1 : u.ucmp(this.p);\n        return g === 0 ? (u.words[0] = 0, u.length = 1) : g > 0 ? u.isub(this.p) : u.strip !== void 0 ? u.strip() : u._strip(), u;\n      }, V.prototype.split = function(s, u) {\n        s.iushrn(this.n, 0, u);\n      }, V.prototype.imulK = function(s) {\n        return s.imul(this.k);\n      };\n      function ee() {\n        V.call(\n          this,\n          \"k256\",\n          \"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f\"\n        );\n      }\n      o(ee, V), ee.prototype.split = function(s, u) {\n        for (var h = 4194303, g = Math.min(s.length, 9), w = 0; w < g; w++)\n          u.words[w] = s.words[w];\n        if (u.length = g, s.length <= 9) {\n          s.words[0] = 0, s.length = 1;\n          return;\n        }\n        var _ = s.words[9];\n        for (u.words[u.length++] = _ & h, w = 10; w < s.length; w++) {\n          var A = s.words[w] | 0;\n          s.words[w - 10] = (A & h) << 4 | _ >>> 22, _ = A;\n        }\n        _ >>>= 22, s.words[w - 10] = _, _ === 0 && s.length > 10 ? s.length -= 10 : s.length -= 9;\n      }, ee.prototype.imulK = function(s) {\n        s.words[s.length] = 0, s.words[s.length + 1] = 0, s.length += 2;\n        for (var u = 0, h = 0; h < s.length; h++) {\n          var g = s.words[h] | 0;\n          u += g * 977, s.words[h] = u & 67108863, u = g * 64 + (u / 67108864 | 0);\n        }\n        return s.words[s.length - 1] === 0 && (s.length--, s.words[s.length - 1] === 0 && s.length--), s;\n      };\n      function G() {\n        V.call(\n          this,\n          \"p224\",\n          \"ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001\"\n        );\n      }\n      o(G, V);\n      function N() {\n        V.call(\n          this,\n          \"p192\",\n          \"ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff\"\n        );\n      }\n      o(N, V);\n      function O() {\n        V.call(\n          this,\n          \"25519\",\n          \"7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed\"\n        );\n      }\n      o(O, V), O.prototype.imulK = function(s) {\n        for (var u = 0, h = 0; h < s.length; h++) {\n          var g = (s.words[h] | 0) * 19 + u, w = g & 67108863;\n          g >>>= 26, s.words[h] = w, u = g;\n        }\n        return u !== 0 && (s.words[s.length++] = u), s;\n      }, i._prime = function(s) {\n        if (j[s]) return j[s];\n        var u;\n        if (s === \"k256\")\n          u = new ee();\n        else if (s === \"p224\")\n          u = new G();\n        else if (s === \"p192\")\n          u = new N();\n        else if (s === \"p25519\")\n          u = new O();\n        else\n          throw new Error(\"Unknown prime \" + s);\n        return j[s] = u, u;\n      };\n      function L(d) {\n        if (typeof d == \"string\") {\n          var s = i._prime(d);\n          this.m = s.p, this.prime = s;\n        } else\n          n(d.gtn(1), \"modulus must be greater than 1\"), this.m = d, this.prime = null;\n      }\n      L.prototype._verify1 = function(s) {\n        n(s.negative === 0, \"red works only with positives\"), n(s.red, \"red works only with red numbers\");\n      }, L.prototype._verify2 = function(s, u) {\n        n((s.negative | u.negative) === 0, \"red works only with positives\"), n(\n          s.red && s.red === u.red,\n          \"red works only with red numbers\"\n        );\n      }, L.prototype.imod = function(s) {\n        return this.prime ? this.prime.ireduce(s)._forceRed(this) : (b(s, s.umod(this.m)._forceRed(this)), s);\n      }, L.prototype.neg = function(s) {\n        return s.isZero() ? s.clone() : this.m.sub(s)._forceRed(this);\n      }, L.prototype.add = function(s, u) {\n        this._verify2(s, u);\n        var h = s.add(u);\n        return h.cmp(this.m) >= 0 && h.isub(this.m), h._forceRed(this);\n      }, L.prototype.iadd = function(s, u) {\n        this._verify2(s, u);\n        var h = s.iadd(u);\n        return h.cmp(this.m) >= 0 && h.isub(this.m), h;\n      }, L.prototype.sub = function(s, u) {\n        this._verify2(s, u);\n        var h = s.sub(u);\n        return h.cmpn(0) < 0 && h.iadd(this.m), h._forceRed(this);\n      }, L.prototype.isub = function(s, u) {\n        this._verify2(s, u);\n        var h = s.isub(u);\n        return h.cmpn(0) < 0 && h.iadd(this.m), h;\n      }, L.prototype.shl = function(s, u) {\n        return this._verify1(s), this.imod(s.ushln(u));\n      }, L.prototype.imul = function(s, u) {\n        return this._verify2(s, u), this.imod(s.imul(u));\n      }, L.prototype.mul = function(s, u) {\n        return this._verify2(s, u), this.imod(s.mul(u));\n      }, L.prototype.isqr = function(s) {\n        return this.imul(s, s.clone());\n      }, L.prototype.sqr = function(s) {\n        return this.mul(s, s);\n      }, L.prototype.sqrt = function(s) {\n        if (s.isZero()) return s.clone();\n        var u = this.m.andln(3);\n        if (n(u % 2 === 1), u === 3) {\n          var h = this.m.add(new i(1)).iushrn(2);\n          return this.pow(s, h);\n        }\n        for (var g = this.m.subn(1), w = 0; !g.isZero() && g.andln(1) === 0; )\n          w++, g.iushrn(1);\n        n(!g.isZero());\n        var _ = new i(1).toRed(this), A = _.redNeg(), p = this.m.subn(1).iushrn(1), a = this.m.bitLength();\n        for (a = new i(2 * a * a).toRed(this); this.pow(a, p).cmp(A) !== 0; )\n          a.redIAdd(A);\n        for (var l = this.pow(a, g), M = this.pow(s, g.addn(1).iushrn(1)), k = this.pow(s, g), $ = w; k.cmp(_) !== 0; ) {\n          for (var X = k, re = 0; X.cmp(_) !== 0; re++)\n            X = X.redSqr();\n          n(re < $);\n          var se = this.pow(l, new i(1).iushln($ - re - 1));\n          M = M.redMul(se), l = se.redSqr(), k = k.redMul(l), $ = re;\n        }\n        return M;\n      }, L.prototype.invm = function(s) {\n        var u = s._invmp(this.m);\n        return u.negative !== 0 ? (u.negative = 0, this.imod(u).redNeg()) : this.imod(u);\n      }, L.prototype.pow = function(s, u) {\n        if (u.isZero()) return new i(1).toRed(this);\n        if (u.cmpn(1) === 0) return s.clone();\n        var h = 4, g = new Array(1 << h);\n        g[0] = new i(1).toRed(this), g[1] = s;\n        for (var w = 2; w < g.length; w++)\n          g[w] = this.mul(g[w - 1], s);\n        var _ = g[0], A = 0, p = 0, a = u.bitLength() % 26;\n        for (a === 0 && (a = 26), w = u.length - 1; w >= 0; w--) {\n          for (var l = u.words[w], M = a - 1; M >= 0; M--) {\n            var k = l >> M & 1;\n            if (_ !== g[0] && (_ = this.sqr(_)), k === 0 && A === 0) {\n              p = 0;\n              continue;\n            }\n            A <<= 1, A |= k, p++, !(p !== h && (w !== 0 || M !== 0)) && (_ = this.mul(_, g[A]), p = 0, A = 0);\n          }\n          a = 26;\n        }\n        return _;\n      }, L.prototype.convertTo = function(s) {\n        var u = s.umod(this.m);\n        return u === s ? u.clone() : u;\n      }, L.prototype.convertFrom = function(s) {\n        var u = s.clone();\n        return u.red = null, u;\n      }, i.mont = function(s) {\n        return new F(s);\n      };\n      function F(d) {\n        L.call(this, d), this.shift = this.m.bitLength(), this.shift % 26 !== 0 && (this.shift += 26 - this.shift % 26), this.r = new i(1).iushln(this.shift), this.r2 = this.imod(this.r.sqr()), this.rinv = this.r._invmp(this.m), this.minv = this.rinv.mul(this.r).isubn(1).div(this.m), this.minv = this.minv.umod(this.r), this.minv = this.r.sub(this.minv);\n      }\n      o(F, L), F.prototype.convertTo = function(s) {\n        return this.imod(s.ushln(this.shift));\n      }, F.prototype.convertFrom = function(s) {\n        var u = this.imod(s.mul(this.rinv));\n        return u.red = null, u;\n      }, F.prototype.imul = function(s, u) {\n        if (s.isZero() || u.isZero())\n          return s.words[0] = 0, s.length = 1, s;\n        var h = s.imul(u), g = h.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m), w = h.isub(g).iushrn(this.shift), _ = w;\n        return w.cmp(this.m) >= 0 ? _ = w.isub(this.m) : w.cmpn(0) < 0 && (_ = w.iadd(this.m)), _._forceRed(this);\n      }, F.prototype.mul = function(s, u) {\n        if (s.isZero() || u.isZero()) return new i(0)._forceRed(this);\n        var h = s.mul(u), g = h.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m), w = h.isub(g).iushrn(this.shift), _ = w;\n        return w.cmp(this.m) >= 0 ? _ = w.isub(this.m) : w.cmpn(0) < 0 && (_ = w.iadd(this.m)), _._forceRed(this);\n      }, F.prototype.invm = function(s) {\n        var u = this.imod(s._invmp(this.m).mul(this.r2));\n        return u._forceRed(this);\n      };\n    })(t, Xh);\n  }(ns)), ns.exports;\n}\nvar no, eu;\nfunction ed() {\n  if (eu) return no;\n  eu = 1;\n  var t = kc().Buffer;\n  function e(r) {\n    if (r.length >= 255)\n      throw new TypeError(\"Alphabet too long\");\n    for (var n = new Uint8Array(256), o = 0; o < n.length; o++)\n      n[o] = 255;\n    for (var i = 0; i < r.length; i++) {\n      var c = r.charAt(i), f = c.charCodeAt(0);\n      if (n[f] !== 255)\n        throw new TypeError(c + \" is ambiguous\");\n      n[f] = i;\n    }\n    var v = r.length, x = r.charAt(0), b = Math.log(v) / Math.log(256), S = Math.log(256) / Math.log(v);\n    function T(B) {\n      if ((Array.isArray(B) || B instanceof Uint8Array) && (B = t.from(B)), !t.isBuffer(B))\n        throw new TypeError(\"Expected Buffer\");\n      if (B.length === 0)\n        return \"\";\n      for (var R = 0, z = 0, K = 0, Z = B.length; K !== Z && B[K] === 0; )\n        K++, R++;\n      for (var Q = (Z - K) * S + 1 >>> 0, j = new Uint8Array(Q); K !== Z; ) {\n        for (var V = B[K], ee = 0, G = Q - 1; (V !== 0 || ee < z) && G !== -1; G--, ee++)\n          V += 256 * j[G] >>> 0, j[G] = V % v >>> 0, V = V / v >>> 0;\n        if (V !== 0)\n          throw new Error(\"Non-zero carry\");\n        z = ee, K++;\n      }\n      for (var N = Q - z; N !== Q && j[N] === 0; )\n        N++;\n      for (var O = x.repeat(R); N < Q; ++N)\n        O += r.charAt(j[N]);\n      return O;\n    }\n    function C(B) {\n      if (typeof B != \"string\")\n        throw new TypeError(\"Expected String\");\n      if (B.length === 0)\n        return t.alloc(0);\n      for (var R = 0, z = 0, K = 0; B[R] === x; )\n        z++, R++;\n      for (var Z = (B.length - R) * b + 1 >>> 0, Q = new Uint8Array(Z); R < B.length; ) {\n        var j = B.charCodeAt(R);\n        if (j > 255)\n          return;\n        var V = n[j];\n        if (V === 255)\n          return;\n        for (var ee = 0, G = Z - 1; (V !== 0 || ee < K) && G !== -1; G--, ee++)\n          V += v * Q[G] >>> 0, Q[G] = V % 256 >>> 0, V = V / 256 >>> 0;\n        if (V !== 0)\n          throw new Error(\"Non-zero carry\");\n        K = ee, R++;\n      }\n      for (var N = Z - K; N !== Z && Q[N] === 0; )\n        N++;\n      var O = t.allocUnsafe(z + (Z - N));\n      O.fill(0, 0, z);\n      for (var L = z; N !== Z; )\n        O[L++] = Q[N++];\n      return O;\n    }\n    function P(B) {\n      var R = C(B);\n      if (R)\n        return R;\n      throw new Error(\"Non-base\" + v + \" character\");\n    }\n    return {\n      encode: T,\n      decodeUnsafe: C,\n      decode: P\n    };\n  }\n  return no = e, no;\n}\nvar io, tu;\nfunction td() {\n  if (tu) return io;\n  tu = 1;\n  var t = ed(), e = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\";\n  return io = t(e), io;\n}\nfunction gr(t, e, r) {\n  return e <= t && t <= r;\n}\nfunction Us(t) {\n  if (t === void 0) return {};\n  if (t === Object(t)) return t;\n  throw TypeError(\"Could not convert argument to dictionary\");\n}\nfunction rd(t) {\n  for (var e = String(t), r = e.length, n = 0, o = []; n < r; ) {\n    var i = e.charCodeAt(n);\n    if (i < 55296 || i > 57343)\n      o.push(i);\n    else if (56320 <= i && i <= 57343)\n      o.push(65533);\n    else if (55296 <= i && i <= 56319)\n      if (n === r - 1)\n        o.push(65533);\n      else {\n        var c = t.charCodeAt(n + 1);\n        if (56320 <= c && c <= 57343) {\n          var f = i & 1023, v = c & 1023;\n          o.push(65536 + (f << 10) + v), n += 1;\n        } else\n          o.push(65533);\n      }\n    n += 1;\n  }\n  return o;\n}\nfunction nd(t) {\n  for (var e = \"\", r = 0; r < t.length; ++r) {\n    var n = t[r];\n    n <= 65535 ? e += String.fromCharCode(n) : (n -= 65536, e += String.fromCharCode(\n      (n >> 10) + 55296,\n      (n & 1023) + 56320\n    ));\n  }\n  return e;\n}\nvar gs = -1;\nfunction ca(t) {\n  this.tokens = [].slice.call(t);\n}\nca.prototype = {\n  /**\n   * @return {boolean} True if end-of-stream has been hit.\n   */\n  endOfStream: function() {\n    return !this.tokens.length;\n  },\n  /**\n   * When a token is read from a stream, the first token in the\n   * stream must be returned and subsequently removed, and\n   * end-of-stream must be returned otherwise.\n   *\n   * @return {number} Get the next token from the stream, or\n   * end_of_stream.\n   */\n  read: function() {\n    return this.tokens.length ? this.tokens.shift() : gs;\n  },\n  /**\n   * When one or more tokens are prepended to a stream, those tokens\n   * must be inserted, in given order, before the first token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The token(s) to prepend to the stream.\n   */\n  prepend: function(t) {\n    if (Array.isArray(t))\n      for (var e = (\n        /**@type {!Array.<number>}*/\n        t\n      ); e.length; )\n        this.tokens.unshift(e.pop());\n    else\n      this.tokens.unshift(t);\n  },\n  /**\n   * When one or more tokens are pushed to a stream, those tokens\n   * must be inserted, in given order, after the last token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The tokens(s) to prepend to the stream.\n   */\n  push: function(t) {\n    if (Array.isArray(t))\n      for (var e = (\n        /**@type {!Array.<number>}*/\n        t\n      ); e.length; )\n        this.tokens.push(e.shift());\n    else\n      this.tokens.push(t);\n  }\n};\nvar Un = -1;\nfunction so(t, e) {\n  if (t)\n    throw TypeError(\"Decoder error\");\n  return e || 65533;\n}\nvar ys = \"utf-8\";\nfunction vs(t, e) {\n  if (!(this instanceof vs))\n    return new vs(t, e);\n  if (t = t !== void 0 ? String(t).toLowerCase() : ys, t !== ys)\n    throw new Error(\"Encoding not supported. Only utf-8 is supported\");\n  e = Us(e), this._streaming = !1, this._BOMseen = !1, this._decoder = null, this._fatal = !!e.fatal, this._ignoreBOM = !!e.ignoreBOM, Object.defineProperty(this, \"encoding\", { value: \"utf-8\" }), Object.defineProperty(this, \"fatal\", { value: this._fatal }), Object.defineProperty(this, \"ignoreBOM\", { value: this._ignoreBOM });\n}\nvs.prototype = {\n  /**\n   * @param {ArrayBufferView=} input The buffer of bytes to decode.\n   * @param {Object=} options\n   * @return {string} The decoded string.\n   */\n  decode: function(e, r) {\n    var n;\n    typeof e == \"object\" && e instanceof ArrayBuffer ? n = new Uint8Array(e) : typeof e == \"object\" && \"buffer\" in e && e.buffer instanceof ArrayBuffer ? n = new Uint8Array(\n      e.buffer,\n      e.byteOffset,\n      e.byteLength\n    ) : n = new Uint8Array(0), r = Us(r), this._streaming || (this._decoder = new id({ fatal: this._fatal }), this._BOMseen = !1), this._streaming = !!r.stream;\n    for (var o = new ca(n), i = [], c; !o.endOfStream() && (c = this._decoder.handler(o, o.read()), c !== Un); )\n      c !== null && (Array.isArray(c) ? i.push.apply(\n        i,\n        /**@type {!Array.<number>}*/\n        c\n      ) : i.push(c));\n    if (!this._streaming) {\n      do {\n        if (c = this._decoder.handler(o, o.read()), c === Un)\n          break;\n        c !== null && (Array.isArray(c) ? i.push.apply(\n          i,\n          /**@type {!Array.<number>}*/\n          c\n        ) : i.push(c));\n      } while (!o.endOfStream());\n      this._decoder = null;\n    }\n    return i.length && [\"utf-8\"].indexOf(this.encoding) !== -1 && !this._ignoreBOM && !this._BOMseen && (i[0] === 65279 ? (this._BOMseen = !0, i.shift()) : this._BOMseen = !0), nd(i);\n  }\n};\nfunction ws(t, e) {\n  if (!(this instanceof ws))\n    return new ws(t, e);\n  if (t = t !== void 0 ? String(t).toLowerCase() : ys, t !== ys)\n    throw new Error(\"Encoding not supported. Only utf-8 is supported\");\n  e = Us(e), this._streaming = !1, this._encoder = null, this._options = { fatal: !!e.fatal }, Object.defineProperty(this, \"encoding\", { value: \"utf-8\" });\n}\nws.prototype = {\n  /**\n   * @param {string=} opt_string The string to encode.\n   * @param {Object=} options\n   * @return {Uint8Array} Encoded bytes, as a Uint8Array.\n   */\n  encode: function(e, r) {\n    e = e ? String(e) : \"\", r = Us(r), this._streaming || (this._encoder = new sd(this._options)), this._streaming = !!r.stream;\n    for (var n = [], o = new ca(rd(e)), i; !o.endOfStream() && (i = this._encoder.handler(o, o.read()), i !== Un); )\n      Array.isArray(i) ? n.push.apply(\n        n,\n        /**@type {!Array.<number>}*/\n        i\n      ) : n.push(i);\n    if (!this._streaming) {\n      for (; i = this._encoder.handler(o, o.read()), i !== Un; )\n        Array.isArray(i) ? n.push.apply(\n          n,\n          /**@type {!Array.<number>}*/\n          i\n        ) : n.push(i);\n      this._encoder = null;\n    }\n    return new Uint8Array(n);\n  }\n};\nfunction id(t) {\n  var e = t.fatal, r = 0, n = 0, o = 0, i = 128, c = 191;\n  this.handler = function(f, v) {\n    if (v === gs && o !== 0)\n      return o = 0, so(e);\n    if (v === gs)\n      return Un;\n    if (o === 0) {\n      if (gr(v, 0, 127))\n        return v;\n      if (gr(v, 194, 223))\n        o = 1, r = v - 192;\n      else if (gr(v, 224, 239))\n        v === 224 && (i = 160), v === 237 && (c = 159), o = 2, r = v - 224;\n      else if (gr(v, 240, 244))\n        v === 240 && (i = 144), v === 244 && (c = 143), o = 3, r = v - 240;\n      else\n        return so(e);\n      return r = r << 6 * o, null;\n    }\n    if (!gr(v, i, c))\n      return r = o = n = 0, i = 128, c = 191, f.prepend(v), so(e);\n    if (i = 128, c = 191, n += 1, r += v - 128 << 6 * (o - n), n !== o)\n      return null;\n    var x = r;\n    return r = o = n = 0, x;\n  };\n}\nfunction sd(t) {\n  t.fatal, this.handler = function(e, r) {\n    if (r === gs)\n      return Un;\n    if (gr(r, 0, 127))\n      return r;\n    var n, o;\n    gr(r, 128, 2047) ? (n = 1, o = 192) : gr(r, 2048, 65535) ? (n = 2, o = 224) : gr(r, 65536, 1114111) && (n = 3, o = 240);\n    for (var i = [(r >> 6 * n) + o]; n > 0; ) {\n      var c = r >> 6 * (n - 1);\n      i.push(128 | c & 63), n -= 1;\n    }\n    return i;\n  };\n}\nconst od = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  TextDecoder: vs,\n  TextEncoder: ws\n}, Symbol.toStringTag, { value: \"Module\" })), ad = /* @__PURE__ */ ea(od);\nvar ru;\nfunction ud() {\n  if (ru) return st;\n  ru = 1;\n  var t = st && st.__createBinding || (Object.create ? function(N, O, L, F) {\n    F === void 0 && (F = L), Object.defineProperty(N, F, { enumerable: !0, get: function() {\n      return O[L];\n    } });\n  } : function(N, O, L, F) {\n    F === void 0 && (F = L), N[F] = O[L];\n  }), e = st && st.__setModuleDefault || (Object.create ? function(N, O) {\n    Object.defineProperty(N, \"default\", { enumerable: !0, value: O });\n  } : function(N, O) {\n    N.default = O;\n  }), r = st && st.__decorate || function(N, O, L, F) {\n    var d = arguments.length, s = d < 3 ? O : F === null ? F = Object.getOwnPropertyDescriptor(O, L) : F, u;\n    if (typeof Reflect == \"object\" && typeof Reflect.decorate == \"function\") s = Reflect.decorate(N, O, L, F);\n    else for (var h = N.length - 1; h >= 0; h--) (u = N[h]) && (s = (d < 3 ? u(s) : d > 3 ? u(O, L, s) : u(O, L)) || s);\n    return d > 3 && s && Object.defineProperty(O, L, s), s;\n  }, n = st && st.__importStar || function(N) {\n    if (N && N.__esModule) return N;\n    var O = {};\n    if (N != null) for (var L in N) L !== \"default\" && Object.hasOwnProperty.call(N, L) && t(O, N, L);\n    return e(O, N), O;\n  }, o = st && st.__importDefault || function(N) {\n    return N && N.__esModule ? N : { default: N };\n  };\n  Object.defineProperty(st, \"__esModule\", { value: !0 }), st.deserializeUnchecked = st.deserialize = st.serialize = st.BinaryReader = st.BinaryWriter = st.BorshError = st.baseDecode = st.baseEncode = void 0;\n  const i = o(Qh()), c = o(td()), f = n(ad), v = typeof TextDecoder != \"function\" ? f.TextDecoder : TextDecoder, x = new v(\"utf-8\", { fatal: !0 });\n  function b(N) {\n    return typeof N == \"string\" && (N = Buffer.from(N, \"utf8\")), c.default.encode(Buffer.from(N));\n  }\n  st.baseEncode = b;\n  function S(N) {\n    return Buffer.from(c.default.decode(N));\n  }\n  st.baseDecode = S;\n  const T = 1024;\n  class C extends Error {\n    constructor(O) {\n      super(O), this.fieldPath = [], this.originalMessage = O;\n    }\n    addToFieldPath(O) {\n      this.fieldPath.splice(0, 0, O), this.message = this.originalMessage + \": \" + this.fieldPath.join(\".\");\n    }\n  }\n  st.BorshError = C;\n  class P {\n    constructor() {\n      this.buf = Buffer.alloc(T), this.length = 0;\n    }\n    maybeResize() {\n      this.buf.length < 16 + this.length && (this.buf = Buffer.concat([this.buf, Buffer.alloc(T)]));\n    }\n    writeU8(O) {\n      this.maybeResize(), this.buf.writeUInt8(O, this.length), this.length += 1;\n    }\n    writeU16(O) {\n      this.maybeResize(), this.buf.writeUInt16LE(O, this.length), this.length += 2;\n    }\n    writeU32(O) {\n      this.maybeResize(), this.buf.writeUInt32LE(O, this.length), this.length += 4;\n    }\n    writeU64(O) {\n      this.maybeResize(), this.writeBuffer(Buffer.from(new i.default(O).toArray(\"le\", 8)));\n    }\n    writeU128(O) {\n      this.maybeResize(), this.writeBuffer(Buffer.from(new i.default(O).toArray(\"le\", 16)));\n    }\n    writeU256(O) {\n      this.maybeResize(), this.writeBuffer(Buffer.from(new i.default(O).toArray(\"le\", 32)));\n    }\n    writeU512(O) {\n      this.maybeResize(), this.writeBuffer(Buffer.from(new i.default(O).toArray(\"le\", 64)));\n    }\n    writeBuffer(O) {\n      this.buf = Buffer.concat([\n        Buffer.from(this.buf.subarray(0, this.length)),\n        O,\n        Buffer.alloc(T)\n      ]), this.length += O.length;\n    }\n    writeString(O) {\n      this.maybeResize();\n      const L = Buffer.from(O, \"utf8\");\n      this.writeU32(L.length), this.writeBuffer(L);\n    }\n    writeFixedArray(O) {\n      this.writeBuffer(Buffer.from(O));\n    }\n    writeArray(O, L) {\n      this.maybeResize(), this.writeU32(O.length);\n      for (const F of O)\n        this.maybeResize(), L(F);\n    }\n    toArray() {\n      return this.buf.subarray(0, this.length);\n    }\n  }\n  st.BinaryWriter = P;\n  function B(N, O, L) {\n    const F = L.value;\n    L.value = function(...d) {\n      try {\n        return F.apply(this, d);\n      } catch (s) {\n        if (s instanceof RangeError) {\n          const u = s.code;\n          if ([\"ERR_BUFFER_OUT_OF_BOUNDS\", \"ERR_OUT_OF_RANGE\"].indexOf(u) >= 0)\n            throw new C(\"Reached the end of buffer when deserializing\");\n        }\n        throw s;\n      }\n    };\n  }\n  class R {\n    constructor(O) {\n      this.buf = O, this.offset = 0;\n    }\n    readU8() {\n      const O = this.buf.readUInt8(this.offset);\n      return this.offset += 1, O;\n    }\n    readU16() {\n      const O = this.buf.readUInt16LE(this.offset);\n      return this.offset += 2, O;\n    }\n    readU32() {\n      const O = this.buf.readUInt32LE(this.offset);\n      return this.offset += 4, O;\n    }\n    readU64() {\n      const O = this.readBuffer(8);\n      return new i.default(O, \"le\");\n    }\n    readU128() {\n      const O = this.readBuffer(16);\n      return new i.default(O, \"le\");\n    }\n    readU256() {\n      const O = this.readBuffer(32);\n      return new i.default(O, \"le\");\n    }\n    readU512() {\n      const O = this.readBuffer(64);\n      return new i.default(O, \"le\");\n    }\n    readBuffer(O) {\n      if (this.offset + O > this.buf.length)\n        throw new C(`Expected buffer length ${O} isn't within bounds`);\n      const L = this.buf.slice(this.offset, this.offset + O);\n      return this.offset += O, L;\n    }\n    readString() {\n      const O = this.readU32(), L = this.readBuffer(O);\n      try {\n        return x.decode(L);\n      } catch (F) {\n        throw new C(`Error decoding UTF-8 string: ${F}`);\n      }\n    }\n    readFixedArray(O) {\n      return new Uint8Array(this.readBuffer(O));\n    }\n    readArray(O) {\n      const L = this.readU32(), F = Array();\n      for (let d = 0; d < L; ++d)\n        F.push(O());\n      return F;\n    }\n  }\n  r([\n    B\n  ], R.prototype, \"readU8\", null), r([\n    B\n  ], R.prototype, \"readU16\", null), r([\n    B\n  ], R.prototype, \"readU32\", null), r([\n    B\n  ], R.prototype, \"readU64\", null), r([\n    B\n  ], R.prototype, \"readU128\", null), r([\n    B\n  ], R.prototype, \"readU256\", null), r([\n    B\n  ], R.prototype, \"readU512\", null), r([\n    B\n  ], R.prototype, \"readString\", null), r([\n    B\n  ], R.prototype, \"readFixedArray\", null), r([\n    B\n  ], R.prototype, \"readArray\", null), st.BinaryReader = R;\n  function z(N) {\n    return N.charAt(0).toUpperCase() + N.slice(1);\n  }\n  function K(N, O, L, F, d) {\n    try {\n      if (typeof F == \"string\")\n        d[`write${z(F)}`](L);\n      else if (F instanceof Array)\n        if (typeof F[0] == \"number\") {\n          if (L.length !== F[0])\n            throw new C(`Expecting byte array of length ${F[0]}, but got ${L.length} bytes`);\n          d.writeFixedArray(L);\n        } else if (F.length === 2 && typeof F[1] == \"number\") {\n          if (L.length !== F[1])\n            throw new C(`Expecting byte array of length ${F[1]}, but got ${L.length} bytes`);\n          for (let s = 0; s < F[1]; s++)\n            K(N, null, L[s], F[0], d);\n        } else\n          d.writeArray(L, (s) => {\n            K(N, O, s, F[0], d);\n          });\n      else if (F.kind !== void 0)\n        switch (F.kind) {\n          case \"option\": {\n            L == null ? d.writeU8(0) : (d.writeU8(1), K(N, O, L, F.type, d));\n            break;\n          }\n          case \"map\": {\n            d.writeU32(L.size), L.forEach((s, u) => {\n              K(N, O, u, F.key, d), K(N, O, s, F.value, d);\n            });\n            break;\n          }\n          default:\n            throw new C(`FieldType ${F} unrecognized`);\n        }\n      else\n        Z(N, L, d);\n    } catch (s) {\n      throw s instanceof C && s.addToFieldPath(O), s;\n    }\n  }\n  function Z(N, O, L) {\n    if (typeof O.borshSerialize == \"function\") {\n      O.borshSerialize(L);\n      return;\n    }\n    const F = N.get(O.constructor);\n    if (!F)\n      throw new C(`Class ${O.constructor.name} is missing in schema`);\n    if (F.kind === \"struct\")\n      F.fields.map(([d, s]) => {\n        K(N, d, O[d], s, L);\n      });\n    else if (F.kind === \"enum\") {\n      const d = O[F.field];\n      for (let s = 0; s < F.values.length; ++s) {\n        const [u, h] = F.values[s];\n        if (u === d) {\n          L.writeU8(s), K(N, u, O[u], h, L);\n          break;\n        }\n      }\n    } else\n      throw new C(`Unexpected schema kind: ${F.kind} for ${O.constructor.name}`);\n  }\n  function Q(N, O, L = P) {\n    const F = new L();\n    return Z(N, O, F), F.toArray();\n  }\n  st.serialize = Q;\n  function j(N, O, L, F) {\n    try {\n      if (typeof L == \"string\")\n        return F[`read${z(L)}`]();\n      if (L instanceof Array) {\n        if (typeof L[0] == \"number\")\n          return F.readFixedArray(L[0]);\n        if (typeof L[1] == \"number\") {\n          const d = [];\n          for (let s = 0; s < L[1]; s++)\n            d.push(j(N, null, L[0], F));\n          return d;\n        } else\n          return F.readArray(() => j(N, O, L[0], F));\n      }\n      if (L.kind === \"option\")\n        return F.readU8() ? j(N, O, L.type, F) : void 0;\n      if (L.kind === \"map\") {\n        let d = /* @__PURE__ */ new Map();\n        const s = F.readU32();\n        for (let u = 0; u < s; u++) {\n          const h = j(N, O, L.key, F), g = j(N, O, L.value, F);\n          d.set(h, g);\n        }\n        return d;\n      }\n      return V(N, L, F);\n    } catch (d) {\n      throw d instanceof C && d.addToFieldPath(O), d;\n    }\n  }\n  function V(N, O, L) {\n    if (typeof O.borshDeserialize == \"function\")\n      return O.borshDeserialize(L);\n    const F = N.get(O);\n    if (!F)\n      throw new C(`Class ${O.name} is missing in schema`);\n    if (F.kind === \"struct\") {\n      const d = {};\n      for (const [s, u] of N.get(O).fields)\n        d[s] = j(N, s, u, L);\n      return new O(d);\n    }\n    if (F.kind === \"enum\") {\n      const d = L.readU8();\n      if (d >= F.values.length)\n        throw new C(`Enum index: ${d} is out of range`);\n      const [s, u] = F.values[d], h = j(N, s, u, L);\n      return new O({ [s]: h });\n    }\n    throw new C(`Unexpected schema kind: ${F.kind} for ${O.constructor.name}`);\n  }\n  function ee(N, O, L, F = R) {\n    const d = new F(L), s = V(N, O, d);\n    if (d.offset < L.length)\n      throw new C(`Unexpected ${L.length - d.offset} bytes after deserialized data`);\n    return s;\n  }\n  st.deserialize = ee;\n  function G(N, O, L, F = R) {\n    const d = new F(L);\n    return V(N, O, d);\n  }\n  return st.deserializeUnchecked = G, st;\n}\nvar oo = ud(), Y = {}, nu;\nfunction cd() {\n  if (nu) return Y;\n  nu = 1, Object.defineProperty(Y, \"__esModule\", { value: !0 }), Y.s16 = Y.s8 = Y.nu64be = Y.u48be = Y.u40be = Y.u32be = Y.u24be = Y.u16be = Y.nu64 = Y.u48 = Y.u40 = Y.u32 = Y.u24 = Y.u16 = Y.u8 = Y.offset = Y.greedy = Y.Constant = Y.UTF8 = Y.CString = Y.Blob = Y.Boolean = Y.BitField = Y.BitStructure = Y.VariantLayout = Y.Union = Y.UnionLayoutDiscriminator = Y.UnionDiscriminator = Y.Structure = Y.Sequence = Y.DoubleBE = Y.Double = Y.FloatBE = Y.Float = Y.NearInt64BE = Y.NearInt64 = Y.NearUInt64BE = Y.NearUInt64 = Y.IntBE = Y.Int = Y.UIntBE = Y.UInt = Y.OffsetLayout = Y.GreedyCount = Y.ExternalLayout = Y.bindConstructorLayout = Y.nameWithProperty = Y.Layout = Y.uint8ArrayToBuffer = Y.checkUint8Array = void 0, Y.constant = Y.utf8 = Y.cstr = Y.blob = Y.unionLayoutDiscriminator = Y.union = Y.seq = Y.bits = Y.struct = Y.f64be = Y.f64 = Y.f32be = Y.f32 = Y.ns64be = Y.s48be = Y.s40be = Y.s32be = Y.s24be = Y.s16be = Y.ns64 = Y.s48 = Y.s40 = Y.s32 = Y.s24 = void 0;\n  const t = na();\n  function e(a) {\n    if (!(a instanceof Uint8Array))\n      throw new TypeError(\"b must be a Uint8Array\");\n  }\n  Y.checkUint8Array = e;\n  function r(a) {\n    return e(a), t.Buffer.from(a.buffer, a.byteOffset, a.length);\n  }\n  Y.uint8ArrayToBuffer = r;\n  let n = class {\n    constructor(l, M) {\n      if (!Number.isInteger(l))\n        throw new TypeError(\"span must be an integer\");\n      this.span = l, this.property = M;\n    }\n    /** Function to create an Object into which decoded properties will\n     * be written.\n     *\n     * Used only for layouts that {@link Layout#decode|decode} to Object\n     * instances, which means:\n     * * {@link Structure}\n     * * {@link Union}\n     * * {@link VariantLayout}\n     * * {@link BitStructure}\n     *\n     * If left undefined the JavaScript representation of these layouts\n     * will be Object instances.\n     *\n     * See {@link bindConstructorLayout}.\n     */\n    makeDestinationObject() {\n      return {};\n    }\n    /**\n     * Calculate the span of a specific instance of a layout.\n     *\n     * @param {Uint8Array} b - the buffer that contains an encoded instance.\n     *\n     * @param {Number} [offset] - the offset at which the encoded instance\n     * starts.  If absent a zero offset is inferred.\n     *\n     * @return {Number} - the number of bytes covered by the layout\n     * instance.  If this method is not overridden in a subclass the\n     * definition-time constant {@link Layout#span|span} will be\n     * returned.\n     *\n     * @throws {RangeError} - if the length of the value cannot be\n     * determined.\n     */\n    getSpan(l, M) {\n      if (0 > this.span)\n        throw new RangeError(\"indeterminate span\");\n      return this.span;\n    }\n    /**\n     * Replicate the layout using a new property.\n     *\n     * This function must be used to get a structurally-equivalent layout\n     * with a different name since all {@link Layout} instances are\n     * immutable.\n     *\n     * **NOTE** This is a shallow copy.  All fields except {@link\n     * Layout#property|property} are strictly equal to the origin layout.\n     *\n     * @param {String} property - the value for {@link\n     * Layout#property|property} in the replica.\n     *\n     * @returns {Layout} - the copy with {@link Layout#property|property}\n     * set to `property`.\n     */\n    replicate(l) {\n      const M = Object.create(this.constructor.prototype);\n      return Object.assign(M, this), M.property = l, M;\n    }\n    /**\n     * Create an object from layout properties and an array of values.\n     *\n     * **NOTE** This function returns `undefined` if invoked on a layout\n     * that does not return its value as an Object.  Objects are\n     * returned for things that are a {@link Structure}, which includes\n     * {@link VariantLayout|variant layouts} if they are structures, and\n     * excludes {@link Union}s.  If you want this feature for a union\n     * you must use {@link Union.getVariant|getVariant} to select the\n     * desired layout.\n     *\n     * @param {Array} values - an array of values that correspond to the\n     * default order for properties.  As with {@link Layout#decode|decode}\n     * layout elements that have no property name are skipped when\n     * iterating over the array values.  Only the top-level properties are\n     * assigned; arguments are not assigned to properties of contained\n     * layouts.  Any unused values are ignored.\n     *\n     * @return {(Object|undefined)}\n     */\n    fromArray(l) {\n    }\n  };\n  Y.Layout = n;\n  function o(a, l) {\n    return l.property ? a + \"[\" + l.property + \"]\" : a;\n  }\n  Y.nameWithProperty = o;\n  function i(a, l) {\n    if (typeof a != \"function\")\n      throw new TypeError(\"Class must be constructor\");\n    if (Object.prototype.hasOwnProperty.call(a, \"layout_\"))\n      throw new Error(\"Class is already bound to a layout\");\n    if (!(l && l instanceof n))\n      throw new TypeError(\"layout must be a Layout\");\n    if (Object.prototype.hasOwnProperty.call(l, \"boundConstructor_\"))\n      throw new Error(\"layout is already bound to a constructor\");\n    a.layout_ = l, l.boundConstructor_ = a, l.makeDestinationObject = () => new a(), Object.defineProperty(a.prototype, \"encode\", {\n      value(M, k) {\n        return l.encode(this, M, k);\n      },\n      writable: !0\n    }), Object.defineProperty(a, \"decode\", {\n      value(M, k) {\n        return l.decode(M, k);\n      },\n      writable: !0\n    });\n  }\n  Y.bindConstructorLayout = i;\n  class c extends n {\n    /**\n     * Return `true` iff the external layout decodes to an unsigned\n     * integer layout.\n     *\n     * In that case it can be used as the source of {@link\n     * Sequence#count|Sequence counts}, {@link Blob#length|Blob lengths},\n     * or as {@link UnionLayoutDiscriminator#layout|external union\n     * discriminators}.\n     *\n     * @abstract\n     */\n    isCount() {\n      throw new Error(\"ExternalLayout is abstract\");\n    }\n  }\n  Y.ExternalLayout = c;\n  class f extends c {\n    constructor(l = 1, M) {\n      if (!Number.isInteger(l) || 0 >= l)\n        throw new TypeError(\"elementSpan must be a (positive) integer\");\n      super(-1, M), this.elementSpan = l;\n    }\n    /** @override */\n    isCount() {\n      return !0;\n    }\n    /** @override */\n    decode(l, M = 0) {\n      e(l);\n      const k = l.length - M;\n      return Math.floor(k / this.elementSpan);\n    }\n    /** @override */\n    encode(l, M, k) {\n      return 0;\n    }\n  }\n  Y.GreedyCount = f;\n  class v extends c {\n    constructor(l, M = 0, k) {\n      if (!(l instanceof n))\n        throw new TypeError(\"layout must be a Layout\");\n      if (!Number.isInteger(M))\n        throw new TypeError(\"offset must be integer or undefined\");\n      super(l.span, k || l.property), this.layout = l, this.offset = M;\n    }\n    /** @override */\n    isCount() {\n      return this.layout instanceof x || this.layout instanceof b;\n    }\n    /** @override */\n    decode(l, M = 0) {\n      return this.layout.decode(l, M + this.offset);\n    }\n    /** @override */\n    encode(l, M, k = 0) {\n      return this.layout.encode(l, M, k + this.offset);\n    }\n  }\n  Y.OffsetLayout = v;\n  class x extends n {\n    constructor(l, M) {\n      if (super(l, M), 6 < this.span)\n        throw new RangeError(\"span must not exceed 6 bytes\");\n    }\n    /** @override */\n    decode(l, M = 0) {\n      return r(l).readUIntLE(M, this.span);\n    }\n    /** @override */\n    encode(l, M, k = 0) {\n      return r(M).writeUIntLE(l, k, this.span), this.span;\n    }\n  }\n  Y.UInt = x;\n  class b extends n {\n    constructor(l, M) {\n      if (super(l, M), 6 < this.span)\n        throw new RangeError(\"span must not exceed 6 bytes\");\n    }\n    /** @override */\n    decode(l, M = 0) {\n      return r(l).readUIntBE(M, this.span);\n    }\n    /** @override */\n    encode(l, M, k = 0) {\n      return r(M).writeUIntBE(l, k, this.span), this.span;\n    }\n  }\n  Y.UIntBE = b;\n  class S extends n {\n    constructor(l, M) {\n      if (super(l, M), 6 < this.span)\n        throw new RangeError(\"span must not exceed 6 bytes\");\n    }\n    /** @override */\n    decode(l, M = 0) {\n      return r(l).readIntLE(M, this.span);\n    }\n    /** @override */\n    encode(l, M, k = 0) {\n      return r(M).writeIntLE(l, k, this.span), this.span;\n    }\n  }\n  Y.Int = S;\n  class T extends n {\n    constructor(l, M) {\n      if (super(l, M), 6 < this.span)\n        throw new RangeError(\"span must not exceed 6 bytes\");\n    }\n    /** @override */\n    decode(l, M = 0) {\n      return r(l).readIntBE(M, this.span);\n    }\n    /** @override */\n    encode(l, M, k = 0) {\n      return r(M).writeIntBE(l, k, this.span), this.span;\n    }\n  }\n  Y.IntBE = T;\n  const C = Math.pow(2, 32);\n  function P(a) {\n    const l = Math.floor(a / C), M = a - l * C;\n    return { hi32: l, lo32: M };\n  }\n  function B(a, l) {\n    return a * C + l;\n  }\n  class R extends n {\n    constructor(l) {\n      super(8, l);\n    }\n    /** @override */\n    decode(l, M = 0) {\n      const k = r(l), $ = k.readUInt32LE(M), X = k.readUInt32LE(M + 4);\n      return B(X, $);\n    }\n    /** @override */\n    encode(l, M, k = 0) {\n      const $ = P(l), X = r(M);\n      return X.writeUInt32LE($.lo32, k), X.writeUInt32LE($.hi32, k + 4), 8;\n    }\n  }\n  Y.NearUInt64 = R;\n  class z extends n {\n    constructor(l) {\n      super(8, l);\n    }\n    /** @override */\n    decode(l, M = 0) {\n      const k = r(l), $ = k.readUInt32BE(M), X = k.readUInt32BE(M + 4);\n      return B($, X);\n    }\n    /** @override */\n    encode(l, M, k = 0) {\n      const $ = P(l), X = r(M);\n      return X.writeUInt32BE($.hi32, k), X.writeUInt32BE($.lo32, k + 4), 8;\n    }\n  }\n  Y.NearUInt64BE = z;\n  class K extends n {\n    constructor(l) {\n      super(8, l);\n    }\n    /** @override */\n    decode(l, M = 0) {\n      const k = r(l), $ = k.readUInt32LE(M), X = k.readInt32LE(M + 4);\n      return B(X, $);\n    }\n    /** @override */\n    encode(l, M, k = 0) {\n      const $ = P(l), X = r(M);\n      return X.writeUInt32LE($.lo32, k), X.writeInt32LE($.hi32, k + 4), 8;\n    }\n  }\n  Y.NearInt64 = K;\n  class Z extends n {\n    constructor(l) {\n      super(8, l);\n    }\n    /** @override */\n    decode(l, M = 0) {\n      const k = r(l), $ = k.readInt32BE(M), X = k.readUInt32BE(M + 4);\n      return B($, X);\n    }\n    /** @override */\n    encode(l, M, k = 0) {\n      const $ = P(l), X = r(M);\n      return X.writeInt32BE($.hi32, k), X.writeUInt32BE($.lo32, k + 4), 8;\n    }\n  }\n  Y.NearInt64BE = Z;\n  class Q extends n {\n    constructor(l) {\n      super(4, l);\n    }\n    /** @override */\n    decode(l, M = 0) {\n      return r(l).readFloatLE(M);\n    }\n    /** @override */\n    encode(l, M, k = 0) {\n      return r(M).writeFloatLE(l, k), 4;\n    }\n  }\n  Y.Float = Q;\n  class j extends n {\n    constructor(l) {\n      super(4, l);\n    }\n    /** @override */\n    decode(l, M = 0) {\n      return r(l).readFloatBE(M);\n    }\n    /** @override */\n    encode(l, M, k = 0) {\n      return r(M).writeFloatBE(l, k), 4;\n    }\n  }\n  Y.FloatBE = j;\n  class V extends n {\n    constructor(l) {\n      super(8, l);\n    }\n    /** @override */\n    decode(l, M = 0) {\n      return r(l).readDoubleLE(M);\n    }\n    /** @override */\n    encode(l, M, k = 0) {\n      return r(M).writeDoubleLE(l, k), 8;\n    }\n  }\n  Y.Double = V;\n  class ee extends n {\n    constructor(l) {\n      super(8, l);\n    }\n    /** @override */\n    decode(l, M = 0) {\n      return r(l).readDoubleBE(M);\n    }\n    /** @override */\n    encode(l, M, k = 0) {\n      return r(M).writeDoubleBE(l, k), 8;\n    }\n  }\n  Y.DoubleBE = ee;\n  class G extends n {\n    constructor(l, M, k) {\n      if (!(l instanceof n))\n        throw new TypeError(\"elementLayout must be a Layout\");\n      if (!(M instanceof c && M.isCount() || Number.isInteger(M) && 0 <= M))\n        throw new TypeError(\"count must be non-negative integer or an unsigned integer ExternalLayout\");\n      let $ = -1;\n      !(M instanceof c) && 0 < l.span && ($ = M * l.span), super($, k), this.elementLayout = l, this.count = M;\n    }\n    /** @override */\n    getSpan(l, M = 0) {\n      if (0 <= this.span)\n        return this.span;\n      let k = 0, $ = this.count;\n      if ($ instanceof c && ($ = $.decode(l, M)), 0 < this.elementLayout.span)\n        k = $ * this.elementLayout.span;\n      else {\n        let X = 0;\n        for (; X < $; )\n          k += this.elementLayout.getSpan(l, M + k), ++X;\n      }\n      return k;\n    }\n    /** @override */\n    decode(l, M = 0) {\n      const k = [];\n      let $ = 0, X = this.count;\n      for (X instanceof c && (X = X.decode(l, M)); $ < X; )\n        k.push(this.elementLayout.decode(l, M)), M += this.elementLayout.getSpan(l, M), $ += 1;\n      return k;\n    }\n    /** Implement {@link Layout#encode|encode} for {@link Sequence}.\n     *\n     * **NOTE** If `src` is shorter than {@link Sequence#count|count} then\n     * the unused space in the buffer is left unchanged.  If `src` is\n     * longer than {@link Sequence#count|count} the unneeded elements are\n     * ignored.\n     *\n     * **NOTE** If {@link Layout#count|count} is an instance of {@link\n     * ExternalLayout} then the length of `src` will be encoded as the\n     * count after `src` is encoded. */\n    encode(l, M, k = 0) {\n      const $ = this.elementLayout, X = l.reduce((re, se) => re + $.encode(se, M, k + re), 0);\n      return this.count instanceof c && this.count.encode(l.length, M, k), X;\n    }\n  }\n  Y.Sequence = G;\n  class N extends n {\n    constructor(l, M, k) {\n      if (!(Array.isArray(l) && l.reduce((X, re) => X && re instanceof n, !0)))\n        throw new TypeError(\"fields must be array of Layout instances\");\n      typeof M == \"boolean\" && k === void 0 && (k = M, M = void 0);\n      for (const X of l)\n        if (0 > X.span && X.property === void 0)\n          throw new Error(\"fields cannot contain unnamed variable-length layout\");\n      let $ = -1;\n      try {\n        $ = l.reduce((X, re) => X + re.getSpan(), 0);\n      } catch {\n      }\n      super($, M), this.fields = l, this.decodePrefixes = !!k;\n    }\n    /** @override */\n    getSpan(l, M = 0) {\n      if (0 <= this.span)\n        return this.span;\n      let k = 0;\n      try {\n        k = this.fields.reduce(($, X) => {\n          const re = X.getSpan(l, M);\n          return M += re, $ + re;\n        }, 0);\n      } catch {\n        throw new RangeError(\"indeterminate span\");\n      }\n      return k;\n    }\n    /** @override */\n    decode(l, M = 0) {\n      e(l);\n      const k = this.makeDestinationObject();\n      for (const $ of this.fields)\n        if ($.property !== void 0 && (k[$.property] = $.decode(l, M)), M += $.getSpan(l, M), this.decodePrefixes && l.length === M)\n          break;\n      return k;\n    }\n    /** Implement {@link Layout#encode|encode} for {@link Structure}.\n     *\n     * If `src` is missing a property for a member with a defined {@link\n     * Layout#property|property} the corresponding region of the buffer is\n     * left unmodified. */\n    encode(l, M, k = 0) {\n      const $ = k;\n      let X = 0, re = 0;\n      for (const se of this.fields) {\n        let ut = se.span;\n        if (re = 0 < ut ? ut : 0, se.property !== void 0) {\n          const xe = l[se.property];\n          xe !== void 0 && (re = se.encode(xe, M, k), 0 > ut && (ut = se.getSpan(M, k)));\n        }\n        X = k, k += ut;\n      }\n      return X + re - $;\n    }\n    /** @override */\n    fromArray(l) {\n      const M = this.makeDestinationObject();\n      for (const k of this.fields)\n        k.property !== void 0 && 0 < l.length && (M[k.property] = l.shift());\n      return M;\n    }\n    /**\n     * Get access to the layout of a given property.\n     *\n     * @param {String} property - the structure member of interest.\n     *\n     * @return {Layout} - the layout associated with `property`, or\n     * undefined if there is no such property.\n     */\n    layoutFor(l) {\n      if (typeof l != \"string\")\n        throw new TypeError(\"property must be string\");\n      for (const M of this.fields)\n        if (M.property === l)\n          return M;\n    }\n    /**\n     * Get the offset of a structure member.\n     *\n     * @param {String} property - the structure member of interest.\n     *\n     * @return {Number} - the offset in bytes to the start of `property`\n     * within the structure, or undefined if `property` is not a field\n     * within the structure.  If the property is a member but follows a\n     * variable-length structure member a negative number will be\n     * returned.\n     */\n    offsetOf(l) {\n      if (typeof l != \"string\")\n        throw new TypeError(\"property must be string\");\n      let M = 0;\n      for (const k of this.fields) {\n        if (k.property === l)\n          return M;\n        0 > k.span ? M = -1 : 0 <= M && (M += k.span);\n      }\n    }\n  }\n  Y.Structure = N;\n  class O {\n    constructor(l) {\n      this.property = l;\n    }\n    /** Analog to {@link Layout#decode|Layout decode} for union discriminators.\n     *\n     * The implementation of this method need not reference the buffer if\n     * variant information is available through other means. */\n    decode(l, M) {\n      throw new Error(\"UnionDiscriminator is abstract\");\n    }\n    /** Analog to {@link Layout#decode|Layout encode} for union discriminators.\n     *\n     * The implementation of this method need not store the value if\n     * variant information is maintained through other means. */\n    encode(l, M, k) {\n      throw new Error(\"UnionDiscriminator is abstract\");\n    }\n  }\n  Y.UnionDiscriminator = O;\n  class L extends O {\n    constructor(l, M) {\n      if (!(l instanceof c && l.isCount()))\n        throw new TypeError(\"layout must be an unsigned integer ExternalLayout\");\n      super(M || l.property || \"variant\"), this.layout = l;\n    }\n    /** Delegate decoding to {@link UnionLayoutDiscriminator#layout|layout}. */\n    decode(l, M) {\n      return this.layout.decode(l, M);\n    }\n    /** Delegate encoding to {@link UnionLayoutDiscriminator#layout|layout}. */\n    encode(l, M, k) {\n      return this.layout.encode(l, M, k);\n    }\n  }\n  Y.UnionLayoutDiscriminator = L;\n  class F extends n {\n    constructor(l, M, k) {\n      let $;\n      if (l instanceof x || l instanceof b)\n        $ = new L(new v(l));\n      else if (l instanceof c && l.isCount())\n        $ = new L(l);\n      else if (l instanceof O)\n        $ = l;\n      else\n        throw new TypeError(\"discr must be a UnionDiscriminator or an unsigned integer layout\");\n      if (M === void 0 && (M = null), !(M === null || M instanceof n))\n        throw new TypeError(\"defaultLayout must be null or a Layout\");\n      if (M !== null) {\n        if (0 > M.span)\n          throw new Error(\"defaultLayout must have constant span\");\n        M.property === void 0 && (M = M.replicate(\"content\"));\n      }\n      let X = -1;\n      M && (X = M.span, 0 <= X && (l instanceof x || l instanceof b) && (X += $.layout.span)), super(X, k), this.discriminator = $, this.usesPrefixDiscriminator = l instanceof x || l instanceof b, this.defaultLayout = M, this.registry = {};\n      let re = this.defaultGetSourceVariant.bind(this);\n      this.getSourceVariant = function(se) {\n        return re(se);\n      }, this.configGetSourceVariant = function(se) {\n        re = se.bind(this);\n      };\n    }\n    /** @override */\n    getSpan(l, M = 0) {\n      if (0 <= this.span)\n        return this.span;\n      const k = this.getVariant(l, M);\n      if (!k)\n        throw new Error(\"unable to determine span for unrecognized variant\");\n      return k.getSpan(l, M);\n    }\n    /**\n     * Method to infer a registered Union variant compatible with `src`.\n     *\n     * The first satisfied rule in the following sequence defines the\n     * return value:\n     * * If `src` has properties matching the Union discriminator and\n     *   the default layout, `undefined` is returned regardless of the\n     *   value of the discriminator property (this ensures the default\n     *   layout will be used);\n     * * If `src` has a property matching the Union discriminator, the\n     *   value of the discriminator identifies a registered variant, and\n     *   either (a) the variant has no layout, or (b) `src` has the\n     *   variant's property, then the variant is returned (because the\n     *   source satisfies the constraints of the variant it identifies);\n     * * If `src` does not have a property matching the Union\n     *   discriminator, but does have a property matching a registered\n     *   variant, then the variant is returned (because the source\n     *   matches a variant without an explicit conflict);\n     * * An error is thrown (because we either can't identify a variant,\n     *   or we were explicitly told the variant but can't satisfy it).\n     *\n     * @param {Object} src - an object presumed to be compatible with\n     * the content of the Union.\n     *\n     * @return {(undefined|VariantLayout)} - as described above.\n     *\n     * @throws {Error} - if `src` cannot be associated with a default or\n     * registered variant.\n     */\n    defaultGetSourceVariant(l) {\n      if (Object.prototype.hasOwnProperty.call(l, this.discriminator.property)) {\n        if (this.defaultLayout && this.defaultLayout.property && Object.prototype.hasOwnProperty.call(l, this.defaultLayout.property))\n          return;\n        const M = this.registry[l[this.discriminator.property]];\n        if (M && (!M.layout || M.property && Object.prototype.hasOwnProperty.call(l, M.property)))\n          return M;\n      } else\n        for (const M in this.registry) {\n          const k = this.registry[M];\n          if (k.property && Object.prototype.hasOwnProperty.call(l, k.property))\n            return k;\n        }\n      throw new Error(\"unable to infer src variant\");\n    }\n    /** Implement {@link Layout#decode|decode} for {@link Union}.\n     *\n     * If the variant is {@link Union#addVariant|registered} the return\n     * value is an instance of that variant, with no explicit\n     * discriminator.  Otherwise the {@link Union#defaultLayout|default\n     * layout} is used to decode the content. */\n    decode(l, M = 0) {\n      let k;\n      const $ = this.discriminator, X = $.decode(l, M), re = this.registry[X];\n      if (re === void 0) {\n        const se = this.defaultLayout;\n        let ut = 0;\n        this.usesPrefixDiscriminator && (ut = $.layout.span), k = this.makeDestinationObject(), k[$.property] = X, k[se.property] = se.decode(l, M + ut);\n      } else\n        k = re.decode(l, M);\n      return k;\n    }\n    /** Implement {@link Layout#encode|encode} for {@link Union}.\n     *\n     * This API assumes the `src` object is consistent with the union's\n     * {@link Union#defaultLayout|default layout}.  To encode variants\n     * use the appropriate variant-specific {@link VariantLayout#encode}\n     * method. */\n    encode(l, M, k = 0) {\n      const $ = this.getSourceVariant(l);\n      if ($ === void 0) {\n        const X = this.discriminator, re = this.defaultLayout;\n        let se = 0;\n        return this.usesPrefixDiscriminator && (se = X.layout.span), X.encode(l[X.property], M, k), se + re.encode(l[re.property], M, k + se);\n      }\n      return $.encode(l, M, k);\n    }\n    /** Register a new variant structure within a union.  The newly\n     * created variant is returned.\n     *\n     * @param {Number} variant - initializer for {@link\n     * VariantLayout#variant|variant}.\n     *\n     * @param {Layout} layout - initializer for {@link\n     * VariantLayout#layout|layout}.\n     *\n     * @param {String} property - initializer for {@link\n     * Layout#property|property}.\n     *\n     * @return {VariantLayout} */\n    addVariant(l, M, k) {\n      const $ = new d(this, l, M, k);\n      return this.registry[l] = $, $;\n    }\n    /**\n     * Get the layout associated with a registered variant.\n     *\n     * If `vb` does not produce a registered variant the function returns\n     * `undefined`.\n     *\n     * @param {(Number|Uint8Array)} vb - either the variant number, or a\n     * buffer from which the discriminator is to be read.\n     *\n     * @param {Number} offset - offset into `vb` for the start of the\n     * union.  Used only when `vb` is an instance of {Uint8Array}.\n     *\n     * @return {({VariantLayout}|undefined)}\n     */\n    getVariant(l, M = 0) {\n      let k;\n      return l instanceof Uint8Array ? k = this.discriminator.decode(l, M) : k = l, this.registry[k];\n    }\n  }\n  Y.Union = F;\n  class d extends n {\n    constructor(l, M, k, $) {\n      if (!(l instanceof F))\n        throw new TypeError(\"union must be a Union\");\n      if (!Number.isInteger(M) || 0 > M)\n        throw new TypeError(\"variant must be a (non-negative) integer\");\n      if (typeof k == \"string\" && $ === void 0 && ($ = k, k = null), k) {\n        if (!(k instanceof n))\n          throw new TypeError(\"layout must be a Layout\");\n        if (l.defaultLayout !== null && 0 <= k.span && k.span > l.defaultLayout.span)\n          throw new Error(\"variant span exceeds span of containing union\");\n        if (typeof $ != \"string\")\n          throw new TypeError(\"variant must have a String property\");\n      }\n      let X = l.span;\n      0 > l.span && (X = k ? k.span : 0, 0 <= X && l.usesPrefixDiscriminator && (X += l.discriminator.layout.span)), super(X, $), this.union = l, this.variant = M, this.layout = k || null;\n    }\n    /** @override */\n    getSpan(l, M = 0) {\n      if (0 <= this.span)\n        return this.span;\n      let k = 0;\n      this.union.usesPrefixDiscriminator && (k = this.union.discriminator.layout.span);\n      let $ = 0;\n      return this.layout && ($ = this.layout.getSpan(l, M + k)), k + $;\n    }\n    /** @override */\n    decode(l, M = 0) {\n      const k = this.makeDestinationObject();\n      if (this !== this.union.getVariant(l, M))\n        throw new Error(\"variant mismatch\");\n      let $ = 0;\n      return this.union.usesPrefixDiscriminator && ($ = this.union.discriminator.layout.span), this.layout ? k[this.property] = this.layout.decode(l, M + $) : this.property ? k[this.property] = !0 : this.union.usesPrefixDiscriminator && (k[this.union.discriminator.property] = this.variant), k;\n    }\n    /** @override */\n    encode(l, M, k = 0) {\n      let $ = 0;\n      if (this.union.usesPrefixDiscriminator && ($ = this.union.discriminator.layout.span), this.layout && !Object.prototype.hasOwnProperty.call(l, this.property))\n        throw new TypeError(\"variant lacks property \" + this.property);\n      this.union.discriminator.encode(this.variant, M, k);\n      let X = $;\n      if (this.layout && (this.layout.encode(l[this.property], M, k + $), X += this.layout.getSpan(M, k + $), 0 <= this.union.span && X > this.union.span))\n        throw new Error(\"encoded variant overruns containing union\");\n      return X;\n    }\n    /** Delegate {@link Layout#fromArray|fromArray} to {@link\n     * VariantLayout#layout|layout}. */\n    fromArray(l) {\n      if (this.layout)\n        return this.layout.fromArray(l);\n    }\n  }\n  Y.VariantLayout = d;\n  function s(a) {\n    return 0 > a && (a += 4294967296), a;\n  }\n  class u extends n {\n    constructor(l, M, k) {\n      if (!(l instanceof x || l instanceof b))\n        throw new TypeError(\"word must be a UInt or UIntBE layout\");\n      if (typeof M == \"string\" && k === void 0 && (k = M, M = !1), 4 < l.span)\n        throw new RangeError(\"word cannot exceed 32 bits\");\n      super(l.span, k), this.word = l, this.msb = !!M, this.fields = [];\n      let $ = 0;\n      this._packedSetValue = function(X) {\n        return $ = s(X), this;\n      }, this._packedGetValue = function() {\n        return $;\n      };\n    }\n    /** @override */\n    decode(l, M = 0) {\n      const k = this.makeDestinationObject(), $ = this.word.decode(l, M);\n      this._packedSetValue($);\n      for (const X of this.fields)\n        X.property !== void 0 && (k[X.property] = X.decode(l));\n      return k;\n    }\n    /** Implement {@link Layout#encode|encode} for {@link BitStructure}.\n     *\n     * If `src` is missing a property for a member with a defined {@link\n     * Layout#property|property} the corresponding region of the packed\n     * value is left unmodified.  Unused bits are also left unmodified. */\n    encode(l, M, k = 0) {\n      const $ = this.word.decode(M, k);\n      this._packedSetValue($);\n      for (const X of this.fields)\n        if (X.property !== void 0) {\n          const re = l[X.property];\n          re !== void 0 && X.encode(re);\n        }\n      return this.word.encode(this._packedGetValue(), M, k);\n    }\n    /** Register a new bitfield with a containing bit structure.  The\n     * resulting bitfield is returned.\n     *\n     * @param {Number} bits - initializer for {@link BitField#bits|bits}.\n     *\n     * @param {string} property - initializer for {@link\n     * Layout#property|property}.\n     *\n     * @return {BitField} */\n    addField(l, M) {\n      const k = new h(this, l, M);\n      return this.fields.push(k), k;\n    }\n    /** As with {@link BitStructure#addField|addField} for single-bit\n     * fields with `boolean` value representation.\n     *\n     * @param {string} property - initializer for {@link\n     * Layout#property|property}.\n     *\n     * @return {Boolean} */\n    // `Boolean` conflicts with the native primitive type\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    addBoolean(l) {\n      const M = new g(this, l);\n      return this.fields.push(M), M;\n    }\n    /**\n     * Get access to the bit field for a given property.\n     *\n     * @param {String} property - the bit field of interest.\n     *\n     * @return {BitField} - the field associated with `property`, or\n     * undefined if there is no such property.\n     */\n    fieldFor(l) {\n      if (typeof l != \"string\")\n        throw new TypeError(\"property must be string\");\n      for (const M of this.fields)\n        if (M.property === l)\n          return M;\n    }\n  }\n  Y.BitStructure = u;\n  class h {\n    constructor(l, M, k) {\n      if (!(l instanceof u))\n        throw new TypeError(\"container must be a BitStructure\");\n      if (!Number.isInteger(M) || 0 >= M)\n        throw new TypeError(\"bits must be positive integer\");\n      const $ = 8 * l.span, X = l.fields.reduce((re, se) => re + se.bits, 0);\n      if (M + X > $)\n        throw new Error(\"bits too long for span remainder (\" + ($ - X) + \" of \" + $ + \" remain)\");\n      this.container = l, this.bits = M, this.valueMask = (1 << M) - 1, M === 32 && (this.valueMask = 4294967295), this.start = X, this.container.msb && (this.start = $ - X - M), this.wordMask = s(this.valueMask << this.start), this.property = k;\n    }\n    /** Store a value into the corresponding subsequence of the containing\n     * bit field. */\n    decode(l, M) {\n      const k = this.container._packedGetValue();\n      return s(k & this.wordMask) >>> this.start;\n    }\n    /** Store a value into the corresponding subsequence of the containing\n     * bit field.\n     *\n     * **NOTE** This is not a specialization of {@link\n     * Layout#encode|Layout.encode} and there is no return value. */\n    encode(l) {\n      if (typeof l != \"number\" || !Number.isInteger(l) || l !== s(l & this.valueMask))\n        throw new TypeError(o(\"BitField.encode\", this) + \" value must be integer not exceeding \" + this.valueMask);\n      const M = this.container._packedGetValue(), k = s(l << this.start);\n      this.container._packedSetValue(s(M & ~this.wordMask) | k);\n    }\n  }\n  Y.BitField = h;\n  class g extends h {\n    constructor(l, M) {\n      super(l, 1, M);\n    }\n    /** Override {@link BitField#decode|decode} for {@link Boolean|Boolean}.\n     *\n     * @returns {boolean} */\n    decode(l, M) {\n      return !!super.decode(l, M);\n    }\n    /** @override */\n    encode(l) {\n      typeof l == \"boolean\" && (l = +l), super.encode(l);\n    }\n  }\n  Y.Boolean = g;\n  class w extends n {\n    constructor(l, M) {\n      if (!(l instanceof c && l.isCount() || Number.isInteger(l) && 0 <= l))\n        throw new TypeError(\"length must be positive integer or an unsigned integer ExternalLayout\");\n      let k = -1;\n      l instanceof c || (k = l), super(k, M), this.length = l;\n    }\n    /** @override */\n    getSpan(l, M) {\n      let k = this.span;\n      return 0 > k && (k = this.length.decode(l, M)), k;\n    }\n    /** @override */\n    decode(l, M = 0) {\n      let k = this.span;\n      return 0 > k && (k = this.length.decode(l, M)), r(l).slice(M, M + k);\n    }\n    /** Implement {@link Layout#encode|encode} for {@link Blob}.\n     *\n     * **NOTE** If {@link Layout#count|count} is an instance of {@link\n     * ExternalLayout} then the length of `src` will be encoded as the\n     * count after `src` is encoded. */\n    encode(l, M, k) {\n      let $ = this.length;\n      if (this.length instanceof c && ($ = l.length), !(l instanceof Uint8Array && $ === l.length))\n        throw new TypeError(o(\"Blob.encode\", this) + \" requires (length \" + $ + \") Uint8Array as src\");\n      if (k + $ > M.length)\n        throw new RangeError(\"encoding overruns Uint8Array\");\n      const X = r(l);\n      return r(M).write(X.toString(\"hex\"), k, $, \"hex\"), this.length instanceof c && this.length.encode($, M, k), $;\n    }\n  }\n  Y.Blob = w;\n  class _ extends n {\n    constructor(l) {\n      super(-1, l);\n    }\n    /** @override */\n    getSpan(l, M = 0) {\n      e(l);\n      let k = M;\n      for (; k < l.length && l[k] !== 0; )\n        k += 1;\n      return 1 + k - M;\n    }\n    /** @override */\n    decode(l, M = 0) {\n      const k = this.getSpan(l, M);\n      return r(l).slice(M, M + k - 1).toString(\"utf-8\");\n    }\n    /** @override */\n    encode(l, M, k = 0) {\n      typeof l != \"string\" && (l = String(l));\n      const $ = t.Buffer.from(l, \"utf8\"), X = $.length;\n      if (k + X > M.length)\n        throw new RangeError(\"encoding overruns Buffer\");\n      const re = r(M);\n      return $.copy(re, k), re[k + X] = 0, X + 1;\n    }\n  }\n  Y.CString = _;\n  class A extends n {\n    constructor(l, M) {\n      if (typeof l == \"string\" && M === void 0 && (M = l, l = void 0), l === void 0)\n        l = -1;\n      else if (!Number.isInteger(l))\n        throw new TypeError(\"maxSpan must be an integer\");\n      super(-1, M), this.maxSpan = l;\n    }\n    /** @override */\n    getSpan(l, M = 0) {\n      return e(l), l.length - M;\n    }\n    /** @override */\n    decode(l, M = 0) {\n      const k = this.getSpan(l, M);\n      if (0 <= this.maxSpan && this.maxSpan < k)\n        throw new RangeError(\"text length exceeds maxSpan\");\n      return r(l).slice(M, M + k).toString(\"utf-8\");\n    }\n    /** @override */\n    encode(l, M, k = 0) {\n      typeof l != \"string\" && (l = String(l));\n      const $ = t.Buffer.from(l, \"utf8\"), X = $.length;\n      if (0 <= this.maxSpan && this.maxSpan < X)\n        throw new RangeError(\"text length exceeds maxSpan\");\n      if (k + X > M.length)\n        throw new RangeError(\"encoding overruns Buffer\");\n      return $.copy(r(M), k), X;\n    }\n  }\n  Y.UTF8 = A;\n  class p extends n {\n    constructor(l, M) {\n      super(0, M), this.value = l;\n    }\n    /** @override */\n    decode(l, M) {\n      return this.value;\n    }\n    /** @override */\n    encode(l, M, k) {\n      return 0;\n    }\n  }\n  return Y.Constant = p, Y.greedy = (a, l) => new f(a, l), Y.offset = (a, l, M) => new v(a, l, M), Y.u8 = (a) => new x(1, a), Y.u16 = (a) => new x(2, a), Y.u24 = (a) => new x(3, a), Y.u32 = (a) => new x(4, a), Y.u40 = (a) => new x(5, a), Y.u48 = (a) => new x(6, a), Y.nu64 = (a) => new R(a), Y.u16be = (a) => new b(2, a), Y.u24be = (a) => new b(3, a), Y.u32be = (a) => new b(4, a), Y.u40be = (a) => new b(5, a), Y.u48be = (a) => new b(6, a), Y.nu64be = (a) => new z(a), Y.s8 = (a) => new S(1, a), Y.s16 = (a) => new S(2, a), Y.s24 = (a) => new S(3, a), Y.s32 = (a) => new S(4, a), Y.s40 = (a) => new S(5, a), Y.s48 = (a) => new S(6, a), Y.ns64 = (a) => new K(a), Y.s16be = (a) => new T(2, a), Y.s24be = (a) => new T(3, a), Y.s32be = (a) => new T(4, a), Y.s40be = (a) => new T(5, a), Y.s48be = (a) => new T(6, a), Y.ns64be = (a) => new Z(a), Y.f32 = (a) => new Q(a), Y.f32be = (a) => new j(a), Y.f64 = (a) => new V(a), Y.f64be = (a) => new ee(a), Y.struct = (a, l, M) => new N(a, l, M), Y.bits = (a, l, M) => new u(a, l, M), Y.seq = (a, l, M) => new G(a, l, M), Y.union = (a, l, M) => new F(a, l, M), Y.unionLayoutDiscriminator = (a, l) => new L(a, l), Y.blob = (a, l) => new w(a, l), Y.cstr = (a) => new _(a), Y.utf8 = (a, l) => new A(a, l), Y.constant = (a, l) => new p(a, l), Y;\n}\nvar D = cd(), ld = 8078e3, fd = 8078001, hd = 8078004, dd = 8078005, pd = 8078006, md = 8078011;\nfunction Rc(t) {\n  return Array.isArray(t) ? \"%5B\" + t.map(Rc).join(\n    \"%2C%20\"\n    /* \", \" */\n  ) + /* \"]\" */\n  \"%5D\" : typeof t == \"bigint\" ? `${t}n` : encodeURIComponent(\n    String(\n      t != null && Object.getPrototypeOf(t) === null ? (\n        // Plain objects with no prototype don't have a `toString` method.\n        // Convert them before stringifying them.\n        { ...t }\n      ) : t\n    )\n  );\n}\nfunction gd([t, e]) {\n  return `${t}=${Rc(e)}`;\n}\nfunction yd(t) {\n  const e = Object.entries(t).map(gd).join(\"&\");\n  return btoa(e);\n}\nfunction vd(t, e = {}) {\n  {\n    let r = `Solana error #${t}; Decode this error by running \\`npx @solana/errors decode -- ${t}`;\n    return Object.keys(e).length && (r += ` '${yd(e)}'`), `${r}\\``;\n  }\n}\nvar In = class extends Error {\n  constructor(...[e, r]) {\n    let n, o;\n    if (r) {\n      const { cause: c, ...f } = r;\n      c && (o = { cause: c }), Object.keys(f).length > 0 && (n = f);\n    }\n    const i = vd(e, n);\n    super(i, o);\n    /**\n     * Indicates the root cause of this {@link SolanaError}, if any.\n     *\n     * For example, a transaction error might have an instruction error as its root cause. In this\n     * case, you will be able to access the instruction error on the transaction error as `cause`.\n     */\n    br(this, \"cause\", this.cause);\n    /**\n     * Contains context that can assist in understanding or recovering from a {@link SolanaError}.\n     */\n    br(this, \"context\");\n    this.context = {\n      __code: e,\n      ...n\n    }, this.name = \"SolanaError\";\n  }\n};\nfunction wd(t, e) {\n  return \"fixedSize\" in e ? e.fixedSize : e.getSizeFromValue(t);\n}\nfunction xd(t) {\n  return Object.freeze({\n    ...t,\n    encode: (e) => {\n      const r = new Uint8Array(wd(e, t));\n      return t.write(e, r, 0), r;\n    }\n  });\n}\nfunction bd(t) {\n  return Object.freeze({\n    ...t,\n    decode: (e, r = 0) => t.read(e, r)[0]\n  });\n}\nfunction _n(t) {\n  return \"fixedSize\" in t && typeof t.fixedSize == \"number\";\n}\nfunction _d(t, e) {\n  if (_n(t) !== _n(e))\n    throw new In(hd);\n  if (_n(t) && _n(e) && t.fixedSize !== e.fixedSize)\n    throw new In(dd, {\n      decoderFixedSize: e.fixedSize,\n      encoderFixedSize: t.fixedSize\n    });\n  if (!_n(t) && !_n(e) && t.maxSize !== e.maxSize)\n    throw new In(pd, {\n      decoderMaxSize: e.maxSize,\n      encoderMaxSize: t.maxSize\n    });\n  return {\n    ...e,\n    ...t,\n    decode: e.decode,\n    encode: t.encode,\n    read: e.read,\n    write: t.write\n  };\n}\nfunction Ed(t, e, r = 0) {\n  if (e.length - r <= 0)\n    throw new In(ld, {\n      codecDescription: t\n    });\n}\nfunction Md(t, e, r, n = 0) {\n  const o = r.length - n;\n  if (o < e)\n    throw new In(fd, {\n      bytesLength: o,\n      codecDescription: t,\n      expected: e\n    });\n}\nfunction Cd(t, e, r, n) {\n  if (n < e || n > r)\n    throw new In(md, {\n      codecDescription: t,\n      max: r,\n      min: e,\n      value: n\n    });\n}\nfunction Tc(t) {\n  return (t == null ? void 0 : t.endian) !== 1;\n}\nfunction Sd(t) {\n  return xd({\n    fixedSize: t.size,\n    write(e, r, n) {\n      t.range && Cd(t.name, t.range[0], t.range[1], e);\n      const o = new ArrayBuffer(t.size);\n      return t.set(new DataView(o), e, Tc(t.config)), r.set(new Uint8Array(o), n), n + t.size;\n    }\n  });\n}\nfunction Ad(t) {\n  return bd({\n    fixedSize: t.size,\n    read(e, r = 0) {\n      Ed(t.name, e, r), Md(t.name, t.size, e, r);\n      const n = new DataView(kd(e, r, t.size));\n      return [t.get(n, Tc(t.config)), r + t.size];\n    }\n  });\n}\nfunction kd(t, e, r) {\n  const n = t.byteOffset + (e ?? 0), o = r ?? t.byteLength;\n  return t.buffer.slice(n, n + o);\n}\nvar Id = (t = {}) => Sd({\n  config: t,\n  name: \"u64\",\n  range: [0n, BigInt(\"0xffffffffffffffff\")],\n  set: (e, r, n) => e.setBigUint64(0, BigInt(r), n),\n  size: 8\n}), Bd = (t = {}) => Ad({\n  config: t,\n  get: (e, r) => e.getBigUint64(0, r),\n  name: \"u64\",\n  size: 8\n}), Rd = (t = {}) => _d(Id(t), Bd(t));\nclass Td extends TypeError {\n  constructor(e, r) {\n    let n;\n    const { message: o, explanation: i, ...c } = e, { path: f } = e, v = f.length === 0 ? o : `At path: ${f.join(\".\")} -- ${o}`;\n    super(i ?? v), i != null && (this.cause = v), Object.assign(this, c), this.name = this.constructor.name, this.failures = () => n ?? (n = [e, ...r()]);\n  }\n}\nfunction Ld(t) {\n  return Pi(t) && typeof t[Symbol.iterator] == \"function\";\n}\nfunction Pi(t) {\n  return typeof t == \"object\" && t != null;\n}\nfunction xs(t) {\n  return Pi(t) && !Array.isArray(t);\n}\nfunction Jt(t) {\n  return typeof t == \"symbol\" ? t.toString() : typeof t == \"string\" ? JSON.stringify(t) : `${t}`;\n}\nfunction Od(t) {\n  const { done: e, value: r } = t.next();\n  return e ? void 0 : r;\n}\nfunction Nd(t, e, r, n) {\n  if (t === !0)\n    return;\n  t === !1 ? t = {} : typeof t == \"string\" && (t = { message: t });\n  const { path: o, branch: i } = e, { type: c } = r, { refinement: f, message: v = `Expected a value of type \\`${c}\\`${f ? ` with refinement \\`${f}\\`` : \"\"}, but received: \\`${Jt(n)}\\`` } = t;\n  return {\n    value: n,\n    type: c,\n    refinement: f,\n    key: o[o.length - 1],\n    path: o,\n    branch: i,\n    ...t,\n    message: v\n  };\n}\nfunction* iu(t, e, r, n) {\n  Ld(t) || (t = [t]);\n  for (const o of t) {\n    const i = Nd(o, e, r, n);\n    i && (yield i);\n  }\n}\nfunction* la(t, e, r = {}) {\n  const { path: n = [], branch: o = [t], coerce: i = !1, mask: c = !1 } = r, f = { path: n, branch: o, mask: c };\n  i && (t = e.coercer(t, f));\n  let v = \"valid\";\n  for (const x of e.validator(t, f))\n    x.explanation = r.message, v = \"not_valid\", yield [x, void 0];\n  for (let [x, b, S] of e.entries(t, f)) {\n    const T = la(b, S, {\n      path: x === void 0 ? n : [...n, x],\n      branch: x === void 0 ? o : [...o, b],\n      coerce: i,\n      mask: c,\n      message: r.message\n    });\n    for (const C of T)\n      C[0] ? (v = C[0].refinement != null ? \"not_refined\" : \"not_valid\", yield [C[0], void 0]) : i && (b = C[1], x === void 0 ? t = b : t instanceof Map ? t.set(x, b) : t instanceof Set ? t.add(b) : Pi(t) && (b !== void 0 || x in t) && (t[x] = b));\n  }\n  if (v !== \"not_valid\")\n    for (const x of e.refiner(t, f))\n      x.explanation = r.message, v = \"not_refined\", yield [x, void 0];\n  v === \"valid\" && (yield [void 0, t]);\n}\nlet cr = class {\n  constructor(e) {\n    const { type: r, schema: n, validator: o, refiner: i, coercer: c = (v) => v, entries: f = function* () {\n    } } = e;\n    this.type = r, this.schema = n, this.entries = f, this.coercer = c, o ? this.validator = (v, x) => {\n      const b = o(v, x);\n      return iu(b, x, this, v);\n    } : this.validator = () => [], i ? this.refiner = (v, x) => {\n      const b = i(v, x);\n      return iu(b, x, this, v);\n    } : this.refiner = () => [];\n  }\n  /**\n   * Assert that a value passes the struct's validation, throwing if it doesn't.\n   */\n  assert(e, r) {\n    return jd(e, this, r);\n  }\n  /**\n   * Create a value with the struct's coercion logic, then validate it.\n   */\n  create(e, r) {\n    return xi(e, this, r);\n  }\n  /**\n   * Check if a value passes the struct's validation.\n   */\n  is(e) {\n    return Lc(e, this);\n  }\n  /**\n   * Mask a value, coercing and validating it, but returning only the subset of\n   * properties defined by the struct's schema. Masking applies recursively to\n   * props of `object` structs only.\n   */\n  mask(e, r) {\n    return Ud(e, this, r);\n  }\n  /**\n   * Validate a value with the struct's validation logic, returning a tuple\n   * representing the result.\n   *\n   * You may optionally pass `true` for the `coerce` argument to coerce\n   * the value before attempting to validate it. If you do, the result will\n   * contain the coerced result when successful. Also, `mask` will turn on\n   * masking of the unknown `object` props recursively if passed.\n   */\n  validate(e, r = {}) {\n    return Di(e, this, r);\n  }\n};\nfunction jd(t, e, r) {\n  const n = Di(t, e, { message: r });\n  if (n[0])\n    throw n[0];\n}\nfunction xi(t, e, r) {\n  const n = Di(t, e, { coerce: !0, message: r });\n  if (n[0])\n    throw n[0];\n  return n[1];\n}\nfunction Ud(t, e, r) {\n  const n = Di(t, e, { coerce: !0, mask: !0, message: r });\n  if (n[0])\n    throw n[0];\n  return n[1];\n}\nfunction Lc(t, e) {\n  return !Di(t, e)[0];\n}\nfunction Di(t, e, r = {}) {\n  const n = la(t, e, r), o = Od(n);\n  return o[0] ? [new Td(o[0], function* () {\n    for (const c of n)\n      c[0] && (yield c[0]);\n  }), void 0] : [void 0, o[1]];\n}\nfunction hn(t, e) {\n  return new cr({ type: t, schema: null, validator: e });\n}\nfunction Fd() {\n  return hn(\"any\", () => !0);\n}\nfunction fe(t) {\n  return new cr({\n    type: \"array\",\n    schema: t,\n    *entries(e) {\n      if (t && Array.isArray(e))\n        for (const [r, n] of e.entries())\n          yield [r, n, t];\n    },\n    coercer(e) {\n      return Array.isArray(e) ? e.slice() : e;\n    },\n    validator(e) {\n      return Array.isArray(e) || `Expected an array value, but received: ${Jt(e)}`;\n    }\n  });\n}\nfunction ur() {\n  return hn(\"boolean\", (t) => typeof t == \"boolean\");\n}\nfunction fa(t) {\n  return hn(\"instance\", (e) => e instanceof t || `Expected a \\`${t.name}\\` instance, but received: ${Jt(e)}`);\n}\nfunction dt(t) {\n  const e = Jt(t), r = typeof t;\n  return new cr({\n    type: \"literal\",\n    schema: r === \"string\" || r === \"number\" || r === \"boolean\" ? t : null,\n    validator(n) {\n      return n === t || `Expected the literal \\`${e}\\`, but received: ${Jt(n)}`;\n    }\n  });\n}\nfunction Pd() {\n  return hn(\"never\", () => !1);\n}\nfunction he(t) {\n  return new cr({\n    ...t,\n    validator: (e, r) => e === null || t.validator(e, r),\n    refiner: (e, r) => e === null || t.refiner(e, r)\n  });\n}\nfunction J() {\n  return hn(\"number\", (t) => typeof t == \"number\" && !isNaN(t) || `Expected a number, but received: ${Jt(t)}`);\n}\nfunction Ee(t) {\n  return new cr({\n    ...t,\n    validator: (e, r) => e === void 0 || t.validator(e, r),\n    refiner: (e, r) => e === void 0 || t.refiner(e, r)\n  });\n}\nfunction Oc(t, e) {\n  return new cr({\n    type: \"record\",\n    schema: null,\n    *entries(r) {\n      if (Pi(r))\n        for (const n in r) {\n          const o = r[n];\n          yield [n, n, t], yield [n, o, e];\n        }\n    },\n    validator(r) {\n      return xs(r) || `Expected an object, but received: ${Jt(r)}`;\n    },\n    coercer(r) {\n      return xs(r) ? { ...r } : r;\n    }\n  });\n}\nfunction ie() {\n  return hn(\"string\", (t) => typeof t == \"string\" || `Expected a string, but received: ${Jt(t)}`);\n}\nfunction ha(t) {\n  const e = Pd();\n  return new cr({\n    type: \"tuple\",\n    schema: null,\n    *entries(r) {\n      if (Array.isArray(r)) {\n        const n = Math.max(t.length, r.length);\n        for (let o = 0; o < n; o++)\n          yield [o, r[o], t[o] || e];\n      }\n    },\n    validator(r) {\n      return Array.isArray(r) || `Expected an array, but received: ${Jt(r)}`;\n    },\n    coercer(r) {\n      return Array.isArray(r) ? r.slice() : r;\n    }\n  });\n}\nfunction te(t) {\n  const e = Object.keys(t);\n  return new cr({\n    type: \"type\",\n    schema: t,\n    *entries(r) {\n      if (Pi(r))\n        for (const n of e)\n          yield [n, r[n], t[n]];\n    },\n    validator(r) {\n      return xs(r) || `Expected an object, but received: ${Jt(r)}`;\n    },\n    coercer(r) {\n      return xs(r) ? { ...r } : r;\n    }\n  });\n}\nfunction Ut(t) {\n  const e = t.map((r) => r.type).join(\" | \");\n  return new cr({\n    type: \"union\",\n    schema: null,\n    coercer(r, n) {\n      for (const o of t) {\n        const [i, c] = o.validate(r, {\n          coerce: !0,\n          mask: n.mask\n        });\n        if (!i)\n          return c;\n      }\n      return r;\n    },\n    validator(r, n) {\n      const o = [];\n      for (const i of t) {\n        const [...c] = la(r, i, n), [f] = c;\n        if (f[0])\n          for (const [v] of c)\n            v && o.push(v);\n        else\n          return [];\n      }\n      return [\n        `Expected the value to satisfy a union of \\`${e}\\`, but received: ${Jt(r)}`,\n        ...o\n      ];\n    }\n  });\n}\nfunction zn() {\n  return hn(\"unknown\", () => !0);\n}\nfunction $i(t, e, r) {\n  return new cr({\n    ...t,\n    coercer: (n, o) => Lc(n, e) ? t.coercer(r(n, o), o) : t.coercer(n, o)\n  });\n}\nvar Gi, Dd = new Uint8Array(16);\nfunction Nc() {\n  if (!Gi && (Gi = typeof crypto < \"u\" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto < \"u\" && typeof msCrypto.getRandomValues == \"function\" && msCrypto.getRandomValues.bind(msCrypto), !Gi))\n    throw new Error(\"crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported\");\n  return Gi(Dd);\n}\nconst $d = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;\nfunction Fs(t) {\n  return typeof t == \"string\" && $d.test(t);\n}\nvar Mt = [];\nfor (var ao = 0; ao < 256; ++ao)\n  Mt.push((ao + 256).toString(16).substr(1));\nfunction Ps(t) {\n  var e = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0, r = (Mt[t[e + 0]] + Mt[t[e + 1]] + Mt[t[e + 2]] + Mt[t[e + 3]] + \"-\" + Mt[t[e + 4]] + Mt[t[e + 5]] + \"-\" + Mt[t[e + 6]] + Mt[t[e + 7]] + \"-\" + Mt[t[e + 8]] + Mt[t[e + 9]] + \"-\" + Mt[t[e + 10]] + Mt[t[e + 11]] + Mt[t[e + 12]] + Mt[t[e + 13]] + Mt[t[e + 14]] + Mt[t[e + 15]]).toLowerCase();\n  if (!Fs(r))\n    throw TypeError(\"Stringified UUID is invalid\");\n  return r;\n}\nvar su, uo, co = 0, lo = 0;\nfunction zd(t, e, r) {\n  var n = e && r || 0, o = e || new Array(16);\n  t = t || {};\n  var i = t.node || su, c = t.clockseq !== void 0 ? t.clockseq : uo;\n  if (i == null || c == null) {\n    var f = t.random || (t.rng || Nc)();\n    i == null && (i = su = [f[0] | 1, f[1], f[2], f[3], f[4], f[5]]), c == null && (c = uo = (f[6] << 8 | f[7]) & 16383);\n  }\n  var v = t.msecs !== void 0 ? t.msecs : Date.now(), x = t.nsecs !== void 0 ? t.nsecs : lo + 1, b = v - co + (x - lo) / 1e4;\n  if (b < 0 && t.clockseq === void 0 && (c = c + 1 & 16383), (b < 0 || v > co) && t.nsecs === void 0 && (x = 0), x >= 1e4)\n    throw new Error(\"uuid.v1(): Can't create more than 10M uuids/sec\");\n  co = v, lo = x, uo = c, v += 122192928e5;\n  var S = ((v & 268435455) * 1e4 + x) % 4294967296;\n  o[n++] = S >>> 24 & 255, o[n++] = S >>> 16 & 255, o[n++] = S >>> 8 & 255, o[n++] = S & 255;\n  var T = v / 4294967296 * 1e4 & 268435455;\n  o[n++] = T >>> 8 & 255, o[n++] = T & 255, o[n++] = T >>> 24 & 15 | 16, o[n++] = T >>> 16 & 255, o[n++] = c >>> 8 | 128, o[n++] = c & 255;\n  for (var C = 0; C < 6; ++C)\n    o[n + C] = i[C];\n  return e || Ps(o);\n}\nfunction jc(t) {\n  if (!Fs(t))\n    throw TypeError(\"Invalid UUID\");\n  var e, r = new Uint8Array(16);\n  return r[0] = (e = parseInt(t.slice(0, 8), 16)) >>> 24, r[1] = e >>> 16 & 255, r[2] = e >>> 8 & 255, r[3] = e & 255, r[4] = (e = parseInt(t.slice(9, 13), 16)) >>> 8, r[5] = e & 255, r[6] = (e = parseInt(t.slice(14, 18), 16)) >>> 8, r[7] = e & 255, r[8] = (e = parseInt(t.slice(19, 23), 16)) >>> 8, r[9] = e & 255, r[10] = (e = parseInt(t.slice(24, 36), 16)) / 1099511627776 & 255, r[11] = e / 4294967296 & 255, r[12] = e >>> 24 & 255, r[13] = e >>> 16 & 255, r[14] = e >>> 8 & 255, r[15] = e & 255, r;\n}\nfunction qd(t) {\n  t = unescape(encodeURIComponent(t));\n  for (var e = [], r = 0; r < t.length; ++r)\n    e.push(t.charCodeAt(r));\n  return e;\n}\nvar Zd = \"6ba7b810-9dad-11d1-80b4-00c04fd430c8\", Vd = \"6ba7b811-9dad-11d1-80b4-00c04fd430c8\";\nfunction Uc(t, e, r) {\n  function n(o, i, c, f) {\n    if (typeof o == \"string\" && (o = qd(o)), typeof i == \"string\" && (i = jc(i)), i.length !== 16)\n      throw TypeError(\"Namespace must be array-like (16 iterable integer values, 0-255)\");\n    var v = new Uint8Array(16 + o.length);\n    if (v.set(i), v.set(o, i.length), v = r(v), v[6] = v[6] & 15 | e, v[8] = v[8] & 63 | 128, c) {\n      f = f || 0;\n      for (var x = 0; x < 16; ++x)\n        c[f + x] = v[x];\n      return c;\n    }\n    return Ps(v);\n  }\n  try {\n    n.name = t;\n  } catch {\n  }\n  return n.DNS = Zd, n.URL = Vd, n;\n}\nfunction Hd(t) {\n  if (typeof t == \"string\") {\n    var e = unescape(encodeURIComponent(t));\n    t = new Uint8Array(e.length);\n    for (var r = 0; r < e.length; ++r)\n      t[r] = e.charCodeAt(r);\n  }\n  return Kd(Wd(Gd(t), t.length * 8));\n}\nfunction Kd(t) {\n  for (var e = [], r = t.length * 32, n = \"0123456789abcdef\", o = 0; o < r; o += 8) {\n    var i = t[o >> 5] >>> o % 32 & 255, c = parseInt(n.charAt(i >>> 4 & 15) + n.charAt(i & 15), 16);\n    e.push(c);\n  }\n  return e;\n}\nfunction Fc(t) {\n  return (t + 64 >>> 9 << 4) + 14 + 1;\n}\nfunction Wd(t, e) {\n  t[e >> 5] |= 128 << e % 32, t[Fc(e) - 1] = e;\n  for (var r = 1732584193, n = -271733879, o = -1732584194, i = 271733878, c = 0; c < t.length; c += 16) {\n    var f = r, v = n, x = o, b = i;\n    r = At(r, n, o, i, t[c], 7, -680876936), i = At(i, r, n, o, t[c + 1], 12, -389564586), o = At(o, i, r, n, t[c + 2], 17, 606105819), n = At(n, o, i, r, t[c + 3], 22, -1044525330), r = At(r, n, o, i, t[c + 4], 7, -176418897), i = At(i, r, n, o, t[c + 5], 12, 1200080426), o = At(o, i, r, n, t[c + 6], 17, -1473231341), n = At(n, o, i, r, t[c + 7], 22, -45705983), r = At(r, n, o, i, t[c + 8], 7, 1770035416), i = At(i, r, n, o, t[c + 9], 12, -1958414417), o = At(o, i, r, n, t[c + 10], 17, -42063), n = At(n, o, i, r, t[c + 11], 22, -1990404162), r = At(r, n, o, i, t[c + 12], 7, 1804603682), i = At(i, r, n, o, t[c + 13], 12, -40341101), o = At(o, i, r, n, t[c + 14], 17, -1502002290), n = At(n, o, i, r, t[c + 15], 22, 1236535329), r = kt(r, n, o, i, t[c + 1], 5, -165796510), i = kt(i, r, n, o, t[c + 6], 9, -1069501632), o = kt(o, i, r, n, t[c + 11], 14, 643717713), n = kt(n, o, i, r, t[c], 20, -373897302), r = kt(r, n, o, i, t[c + 5], 5, -701558691), i = kt(i, r, n, o, t[c + 10], 9, 38016083), o = kt(o, i, r, n, t[c + 15], 14, -660478335), n = kt(n, o, i, r, t[c + 4], 20, -405537848), r = kt(r, n, o, i, t[c + 9], 5, 568446438), i = kt(i, r, n, o, t[c + 14], 9, -1019803690), o = kt(o, i, r, n, t[c + 3], 14, -187363961), n = kt(n, o, i, r, t[c + 8], 20, 1163531501), r = kt(r, n, o, i, t[c + 13], 5, -1444681467), i = kt(i, r, n, o, t[c + 2], 9, -51403784), o = kt(o, i, r, n, t[c + 7], 14, 1735328473), n = kt(n, o, i, r, t[c + 12], 20, -1926607734), r = It(r, n, o, i, t[c + 5], 4, -378558), i = It(i, r, n, o, t[c + 8], 11, -2022574463), o = It(o, i, r, n, t[c + 11], 16, 1839030562), n = It(n, o, i, r, t[c + 14], 23, -35309556), r = It(r, n, o, i, t[c + 1], 4, -1530992060), i = It(i, r, n, o, t[c + 4], 11, 1272893353), o = It(o, i, r, n, t[c + 7], 16, -155497632), n = It(n, o, i, r, t[c + 10], 23, -1094730640), r = It(r, n, o, i, t[c + 13], 4, 681279174), i = It(i, r, n, o, t[c], 11, -358537222), o = It(o, i, r, n, t[c + 3], 16, -722521979), n = It(n, o, i, r, t[c + 6], 23, 76029189), r = It(r, n, o, i, t[c + 9], 4, -640364487), i = It(i, r, n, o, t[c + 12], 11, -421815835), o = It(o, i, r, n, t[c + 15], 16, 530742520), n = It(n, o, i, r, t[c + 2], 23, -995338651), r = Bt(r, n, o, i, t[c], 6, -198630844), i = Bt(i, r, n, o, t[c + 7], 10, 1126891415), o = Bt(o, i, r, n, t[c + 14], 15, -1416354905), n = Bt(n, o, i, r, t[c + 5], 21, -57434055), r = Bt(r, n, o, i, t[c + 12], 6, 1700485571), i = Bt(i, r, n, o, t[c + 3], 10, -1894986606), o = Bt(o, i, r, n, t[c + 10], 15, -1051523), n = Bt(n, o, i, r, t[c + 1], 21, -2054922799), r = Bt(r, n, o, i, t[c + 8], 6, 1873313359), i = Bt(i, r, n, o, t[c + 15], 10, -30611744), o = Bt(o, i, r, n, t[c + 6], 15, -1560198380), n = Bt(n, o, i, r, t[c + 13], 21, 1309151649), r = Bt(r, n, o, i, t[c + 4], 6, -145523070), i = Bt(i, r, n, o, t[c + 11], 10, -1120210379), o = Bt(o, i, r, n, t[c + 2], 15, 718787259), n = Bt(n, o, i, r, t[c + 9], 21, -343485551), r = Ir(r, f), n = Ir(n, v), o = Ir(o, x), i = Ir(i, b);\n  }\n  return [r, n, o, i];\n}\nfunction Gd(t) {\n  if (t.length === 0)\n    return [];\n  for (var e = t.length * 8, r = new Uint32Array(Fc(e)), n = 0; n < e; n += 8)\n    r[n >> 5] |= (t[n / 8] & 255) << n % 32;\n  return r;\n}\nfunction Ir(t, e) {\n  var r = (t & 65535) + (e & 65535), n = (t >> 16) + (e >> 16) + (r >> 16);\n  return n << 16 | r & 65535;\n}\nfunction Yd(t, e) {\n  return t << e | t >>> 32 - e;\n}\nfunction Ds(t, e, r, n, o, i) {\n  return Ir(Yd(Ir(Ir(e, t), Ir(n, i)), o), r);\n}\nfunction At(t, e, r, n, o, i, c) {\n  return Ds(e & r | ~e & n, t, e, o, i, c);\n}\nfunction kt(t, e, r, n, o, i, c) {\n  return Ds(e & n | r & ~n, t, e, o, i, c);\n}\nfunction It(t, e, r, n, o, i, c) {\n  return Ds(e ^ r ^ n, t, e, o, i, c);\n}\nfunction Bt(t, e, r, n, o, i, c) {\n  return Ds(r ^ (e | ~n), t, e, o, i, c);\n}\nvar Jd = Uc(\"v3\", 48, Hd);\nfunction Xd(t, e, r) {\n  t = t || {};\n  var n = t.random || (t.rng || Nc)();\n  if (n[6] = n[6] & 15 | 64, n[8] = n[8] & 63 | 128, e) {\n    r = r || 0;\n    for (var o = 0; o < 16; ++o)\n      e[r + o] = n[o];\n    return e;\n  }\n  return Ps(n);\n}\nfunction Qd(t, e, r, n) {\n  switch (t) {\n    case 0:\n      return e & r ^ ~e & n;\n    case 1:\n      return e ^ r ^ n;\n    case 2:\n      return e & r ^ e & n ^ r & n;\n    case 3:\n      return e ^ r ^ n;\n  }\n}\nfunction fo(t, e) {\n  return t << e | t >>> 32 - e;\n}\nfunction e1(t) {\n  var e = [1518500249, 1859775393, 2400959708, 3395469782], r = [1732584193, 4023233417, 2562383102, 271733878, 3285377520];\n  if (typeof t == \"string\") {\n    var n = unescape(encodeURIComponent(t));\n    t = [];\n    for (var o = 0; o < n.length; ++o)\n      t.push(n.charCodeAt(o));\n  } else Array.isArray(t) || (t = Array.prototype.slice.call(t));\n  t.push(128);\n  for (var i = t.length / 4 + 2, c = Math.ceil(i / 16), f = new Array(c), v = 0; v < c; ++v) {\n    for (var x = new Uint32Array(16), b = 0; b < 16; ++b)\n      x[b] = t[v * 64 + b * 4] << 24 | t[v * 64 + b * 4 + 1] << 16 | t[v * 64 + b * 4 + 2] << 8 | t[v * 64 + b * 4 + 3];\n    f[v] = x;\n  }\n  f[c - 1][14] = (t.length - 1) * 8 / Math.pow(2, 32), f[c - 1][14] = Math.floor(f[c - 1][14]), f[c - 1][15] = (t.length - 1) * 8 & 4294967295;\n  for (var S = 0; S < c; ++S) {\n    for (var T = new Uint32Array(80), C = 0; C < 16; ++C)\n      T[C] = f[S][C];\n    for (var P = 16; P < 80; ++P)\n      T[P] = fo(T[P - 3] ^ T[P - 8] ^ T[P - 14] ^ T[P - 16], 1);\n    for (var B = r[0], R = r[1], z = r[2], K = r[3], Z = r[4], Q = 0; Q < 80; ++Q) {\n      var j = Math.floor(Q / 20), V = fo(B, 5) + Qd(j, R, z, K) + Z + e[j] + T[Q] >>> 0;\n      Z = K, K = z, z = fo(R, 30) >>> 0, R = B, B = V;\n    }\n    r[0] = r[0] + B >>> 0, r[1] = r[1] + R >>> 0, r[2] = r[2] + z >>> 0, r[3] = r[3] + K >>> 0, r[4] = r[4] + Z >>> 0;\n  }\n  return [r[0] >> 24 & 255, r[0] >> 16 & 255, r[0] >> 8 & 255, r[0] & 255, r[1] >> 24 & 255, r[1] >> 16 & 255, r[1] >> 8 & 255, r[1] & 255, r[2] >> 24 & 255, r[2] >> 16 & 255, r[2] >> 8 & 255, r[2] & 255, r[3] >> 24 & 255, r[3] >> 16 & 255, r[3] >> 8 & 255, r[3] & 255, r[4] >> 24 & 255, r[4] >> 16 & 255, r[4] >> 8 & 255, r[4] & 255];\n}\nvar t1 = Uc(\"v5\", 80, e1);\nconst r1 = \"00000000-0000-0000-0000-000000000000\";\nfunction n1(t) {\n  if (!Fs(t))\n    throw TypeError(\"Invalid UUID\");\n  return parseInt(t.substr(14, 1), 16);\n}\nconst i1 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  NIL: r1,\n  parse: jc,\n  stringify: Ps,\n  v1: zd,\n  v3: Jd,\n  v4: Xd,\n  v5: t1,\n  validate: Fs,\n  version: n1\n}, Symbol.toStringTag, { value: \"Module\" })), Pc = /* @__PURE__ */ ea(i1);\nvar ho, ou;\nfunction s1() {\n  if (ou) return ho;\n  ou = 1;\n  const t = Pc.v4;\n  return ho = function(r, n, o, i) {\n    if (typeof r != \"string\")\n      throw new TypeError(r + \" must be a string\");\n    i = i || {};\n    const c = typeof i.version == \"number\" ? i.version : 2;\n    if (c !== 1 && c !== 2)\n      throw new TypeError(c + \" must be 1 or 2\");\n    const f = {\n      method: r\n    };\n    if (c === 2 && (f.jsonrpc = \"2.0\"), n) {\n      if (typeof n != \"object\" && !Array.isArray(n))\n        throw new TypeError(n + \" must be an object, array or omitted\");\n      f.params = n;\n    }\n    if (typeof o > \"u\") {\n      const v = typeof i.generator == \"function\" ? i.generator : function() {\n        return t();\n      };\n      f.id = v(f, i);\n    } else c === 2 && o === null ? i.notificationIdNull && (f.id = null) : f.id = o;\n    return f;\n  }, ho;\n}\nvar po, au;\nfunction o1() {\n  if (au) return po;\n  au = 1;\n  const t = Pc.v4, e = s1(), r = function(n, o) {\n    if (!(this instanceof r))\n      return new r(n, o);\n    o || (o = {}), this.options = {\n      reviver: typeof o.reviver < \"u\" ? o.reviver : null,\n      replacer: typeof o.replacer < \"u\" ? o.replacer : null,\n      generator: typeof o.generator < \"u\" ? o.generator : function() {\n        return t();\n      },\n      version: typeof o.version < \"u\" ? o.version : 2,\n      notificationIdNull: typeof o.notificationIdNull == \"boolean\" ? o.notificationIdNull : !1\n    }, this.callServer = n;\n  };\n  return po = r, r.prototype.request = function(n, o, i, c) {\n    const f = this;\n    let v = null;\n    const x = Array.isArray(n) && typeof o == \"function\";\n    if (this.options.version === 1 && x)\n      throw new TypeError(\"JSON-RPC 1.0 does not support batching\");\n    if (x || !x && n && typeof n == \"object\" && typeof o == \"function\")\n      c = o, v = n;\n    else {\n      typeof i == \"function\" && (c = i, i = void 0);\n      const T = typeof c == \"function\";\n      try {\n        v = e(n, o, i, {\n          generator: this.options.generator,\n          version: this.options.version,\n          notificationIdNull: this.options.notificationIdNull\n        });\n      } catch (C) {\n        if (T)\n          return c(C);\n        throw C;\n      }\n      if (!T)\n        return v;\n    }\n    let S;\n    try {\n      S = JSON.stringify(v, this.options.replacer);\n    } catch (T) {\n      return c(T);\n    }\n    return this.callServer(S, function(T, C) {\n      f._parseResponse(T, C, c);\n    }), v;\n  }, r.prototype._parseResponse = function(n, o, i) {\n    if (n) {\n      i(n);\n      return;\n    }\n    if (!o)\n      return i();\n    let c;\n    try {\n      c = JSON.parse(o, this.options.reviver);\n    } catch (f) {\n      return i(f);\n    }\n    if (i.length === 3)\n      if (Array.isArray(c)) {\n        const f = function(x) {\n          return typeof x.error < \"u\";\n        }, v = function(x) {\n          return !f(x);\n        };\n        return i(null, c.filter(f), c.filter(v));\n      } else\n        return i(null, c.error, c.result);\n    i(null, c);\n  }, po;\n}\no1();\nvar mo = { exports: {} }, uu;\nfunction a1() {\n  return uu || (uu = 1, function(t) {\n    var e = Object.prototype.hasOwnProperty, r = \"~\";\n    function n() {\n    }\n    Object.create && (n.prototype = /* @__PURE__ */ Object.create(null), new n().__proto__ || (r = !1));\n    function o(v, x, b) {\n      this.fn = v, this.context = x, this.once = b || !1;\n    }\n    function i(v, x, b, S, T) {\n      if (typeof b != \"function\")\n        throw new TypeError(\"The listener must be a function\");\n      var C = new o(b, S || v, T), P = r ? r + x : x;\n      return v._events[P] ? v._events[P].fn ? v._events[P] = [v._events[P], C] : v._events[P].push(C) : (v._events[P] = C, v._eventsCount++), v;\n    }\n    function c(v, x) {\n      --v._eventsCount === 0 ? v._events = new n() : delete v._events[x];\n    }\n    function f() {\n      this._events = new n(), this._eventsCount = 0;\n    }\n    f.prototype.eventNames = function() {\n      var x = [], b, S;\n      if (this._eventsCount === 0) return x;\n      for (S in b = this._events)\n        e.call(b, S) && x.push(r ? S.slice(1) : S);\n      return Object.getOwnPropertySymbols ? x.concat(Object.getOwnPropertySymbols(b)) : x;\n    }, f.prototype.listeners = function(x) {\n      var b = r ? r + x : x, S = this._events[b];\n      if (!S) return [];\n      if (S.fn) return [S.fn];\n      for (var T = 0, C = S.length, P = new Array(C); T < C; T++)\n        P[T] = S[T].fn;\n      return P;\n    }, f.prototype.listenerCount = function(x) {\n      var b = r ? r + x : x, S = this._events[b];\n      return S ? S.fn ? 1 : S.length : 0;\n    }, f.prototype.emit = function(x, b, S, T, C, P) {\n      var B = r ? r + x : x;\n      if (!this._events[B]) return !1;\n      var R = this._events[B], z = arguments.length, K, Z;\n      if (R.fn) {\n        switch (R.once && this.removeListener(x, R.fn, void 0, !0), z) {\n          case 1:\n            return R.fn.call(R.context), !0;\n          case 2:\n            return R.fn.call(R.context, b), !0;\n          case 3:\n            return R.fn.call(R.context, b, S), !0;\n          case 4:\n            return R.fn.call(R.context, b, S, T), !0;\n          case 5:\n            return R.fn.call(R.context, b, S, T, C), !0;\n          case 6:\n            return R.fn.call(R.context, b, S, T, C, P), !0;\n        }\n        for (Z = 1, K = new Array(z - 1); Z < z; Z++)\n          K[Z - 1] = arguments[Z];\n        R.fn.apply(R.context, K);\n      } else {\n        var Q = R.length, j;\n        for (Z = 0; Z < Q; Z++)\n          switch (R[Z].once && this.removeListener(x, R[Z].fn, void 0, !0), z) {\n            case 1:\n              R[Z].fn.call(R[Z].context);\n              break;\n            case 2:\n              R[Z].fn.call(R[Z].context, b);\n              break;\n            case 3:\n              R[Z].fn.call(R[Z].context, b, S);\n              break;\n            case 4:\n              R[Z].fn.call(R[Z].context, b, S, T);\n              break;\n            default:\n              if (!K) for (j = 1, K = new Array(z - 1); j < z; j++)\n                K[j - 1] = arguments[j];\n              R[Z].fn.apply(R[Z].context, K);\n          }\n      }\n      return !0;\n    }, f.prototype.on = function(x, b, S) {\n      return i(this, x, b, S, !1);\n    }, f.prototype.once = function(x, b, S) {\n      return i(this, x, b, S, !0);\n    }, f.prototype.removeListener = function(x, b, S, T) {\n      var C = r ? r + x : x;\n      if (!this._events[C]) return this;\n      if (!b)\n        return c(this, C), this;\n      var P = this._events[C];\n      if (P.fn)\n        P.fn === b && (!T || P.once) && (!S || P.context === S) && c(this, C);\n      else {\n        for (var B = 0, R = [], z = P.length; B < z; B++)\n          (P[B].fn !== b || T && !P[B].once || S && P[B].context !== S) && R.push(P[B]);\n        R.length ? this._events[C] = R.length === 1 ? R[0] : R : c(this, C);\n      }\n      return this;\n    }, f.prototype.removeAllListeners = function(x) {\n      var b;\n      return x ? (b = r ? r + x : x, this._events[b] && c(this, b)) : (this._events = new n(), this._eventsCount = 0), this;\n    }, f.prototype.off = f.prototype.removeListener, f.prototype.addListener = f.prototype.on, f.prefixed = r, f.EventEmitter = f, t.exports = f;\n  }(mo)), mo.exports;\n}\nvar u1 = a1();\nconst Dc = /* @__PURE__ */ Qo(u1);\nclass $c extends uc {\n  constructor(e, r) {\n    super(), this.finished = !1, this.destroyed = !1, L0(e);\n    const n = oa(r);\n    if (this.iHash = e.create(), typeof this.iHash.update != \"function\")\n      throw new Error(\"Expected instance of class which extends utils.Hash\");\n    this.blockLen = this.iHash.blockLen, this.outputLen = this.iHash.outputLen;\n    const o = this.blockLen, i = new Uint8Array(o);\n    i.set(n.length > o ? e.create().update(n).digest() : n);\n    for (let c = 0; c < i.length; c++)\n      i[c] ^= 54;\n    this.iHash.update(i), this.oHash = e.create();\n    for (let c = 0; c < i.length; c++)\n      i[c] ^= 106;\n    this.oHash.update(i), On(i);\n  }\n  update(e) {\n    return ps(this), this.iHash.update(e), this;\n  }\n  digestInto(e) {\n    ps(this), ar(e, this.outputLen), this.finished = !0, this.iHash.digestInto(e), this.oHash.update(e), this.oHash.digestInto(e), this.destroy();\n  }\n  digest() {\n    const e = new Uint8Array(this.oHash.outputLen);\n    return this.digestInto(e), e;\n  }\n  _cloneInto(e) {\n    e || (e = Object.create(Object.getPrototypeOf(this), {}));\n    const { oHash: r, iHash: n, finished: o, destroyed: i, blockLen: c, outputLen: f } = this;\n    return e = e, e.finished = o, e.destroyed = i, e.blockLen = c, e.outputLen = f, e.oHash = r._cloneInto(e.oHash), e.iHash = n._cloneInto(e.iHash), e;\n  }\n  clone() {\n    return this._cloneInto();\n  }\n  destroy() {\n    this.destroyed = !0, this.oHash.destroy(), this.iHash.destroy();\n  }\n}\nconst zc = (t, e, r) => new $c(t, e).update(r).digest();\nzc.create = (t, e) => new $c(t, e);\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nfunction cu(t) {\n  t.lowS !== void 0 && fn(\"lowS\", t.lowS), t.prehash !== void 0 && fn(\"prehash\", t.prehash);\n}\nclass c1 extends Error {\n  constructor(e = \"\") {\n    super(e);\n  }\n}\nconst mr = {\n  // asn.1 DER encoding utils\n  Err: c1,\n  // Basic building block is TLV (Tag-Length-Value)\n  _tlv: {\n    encode: (t, e) => {\n      const { Err: r } = mr;\n      if (t < 0 || t > 256)\n        throw new r(\"tlv.encode: wrong tag\");\n      if (e.length & 1)\n        throw new r(\"tlv.encode: unpadded data\");\n      const n = e.length / 2, o = Ki(n);\n      if (o.length / 2 & 128)\n        throw new r(\"tlv.encode: long form length too big\");\n      const i = n > 127 ? Ki(o.length / 2 | 128) : \"\";\n      return Ki(t) + i + o + e;\n    },\n    // v - value, l - left bytes (unparsed)\n    decode(t, e) {\n      const { Err: r } = mr;\n      let n = 0;\n      if (t < 0 || t > 256)\n        throw new r(\"tlv.encode: wrong tag\");\n      if (e.length < 2 || e[n++] !== t)\n        throw new r(\"tlv.decode: wrong tlv\");\n      const o = e[n++], i = !!(o & 128);\n      let c = 0;\n      if (!i)\n        c = o;\n      else {\n        const v = o & 127;\n        if (!v)\n          throw new r(\"tlv.decode(long): indefinite length not supported\");\n        if (v > 4)\n          throw new r(\"tlv.decode(long): byte length is too big\");\n        const x = e.subarray(n, n + v);\n        if (x.length !== v)\n          throw new r(\"tlv.decode: length bytes not complete\");\n        if (x[0] === 0)\n          throw new r(\"tlv.decode(long): zero leftmost byte\");\n        for (const b of x)\n          c = c << 8 | b;\n        if (n += v, c < 128)\n          throw new r(\"tlv.decode(long): not minimal encoding\");\n      }\n      const f = e.subarray(n, n + c);\n      if (f.length !== c)\n        throw new r(\"tlv.decode: wrong value length\");\n      return { v: f, l: e.subarray(n + c) };\n    }\n  },\n  // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\n  // since we always use positive integers here. It must always be empty:\n  // - add zero byte if exists\n  // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\n  _int: {\n    encode(t) {\n      const { Err: e } = mr;\n      if (t < ii)\n        throw new e(\"integer: negative integers are not allowed\");\n      let r = Ki(t);\n      if (Number.parseInt(r[0], 16) & 8 && (r = \"00\" + r), r.length & 1)\n        throw new e(\"unexpected DER parsing assertion: unpadded hex\");\n      return r;\n    },\n    decode(t) {\n      const { Err: e } = mr;\n      if (t[0] & 128)\n        throw new e(\"invalid signature integer: negative\");\n      if (t[0] === 0 && !(t[1] & 128))\n        throw new e(\"invalid signature integer: unnecessary leading zero\");\n      return Ls(t);\n    }\n  },\n  toSig(t) {\n    const { Err: e, _int: r, _tlv: n } = mr, o = vt(\"signature\", t), { v: i, l: c } = n.decode(48, o);\n    if (c.length)\n      throw new e(\"invalid signature: left bytes after parsing\");\n    const { v: f, l: v } = n.decode(2, i), { v: x, l: b } = n.decode(2, v);\n    if (b.length)\n      throw new e(\"invalid signature: left bytes after parsing\");\n    return { r: r.decode(f), s: r.decode(x) };\n  },\n  hexFromSig(t) {\n    const { _tlv: e, _int: r } = mr, n = e.encode(2, r.encode(t.r)), o = e.encode(2, r.encode(t.s)), i = n + o;\n    return e.encode(48, i);\n  }\n}, ii = BigInt(0), si = BigInt(1), l1 = BigInt(2), Yi = BigInt(3), f1 = BigInt(4);\nfunction h1(t, e, r) {\n  function n(o) {\n    const i = t.sqr(o), c = t.mul(i, o);\n    return t.add(t.add(c, t.mul(o, e)), r);\n  }\n  return n;\n}\nfunction qc(t, e, r) {\n  const { BYTES: n } = t;\n  function o(i) {\n    let c;\n    if (typeof i == \"bigint\")\n      c = i;\n    else {\n      let f = vt(\"private key\", i);\n      if (e) {\n        if (!e.includes(f.length * 2))\n          throw new Error(\"invalid private key\");\n        const v = new Uint8Array(n);\n        v.set(f, v.length - f.length), f = v;\n      }\n      try {\n        c = t.fromBytes(f);\n      } catch {\n        throw new Error(`invalid private key: expected ui8a of size ${n}, got ${typeof i}`);\n      }\n    }\n    if (r && (c = t.create(c)), !t.isValidNot0(c))\n      throw new Error(\"invalid private key: out of range [1..N-1]\");\n    return c;\n  }\n  return o;\n}\nfunction d1(t, e = {}) {\n  const { Fp: r, Fn: n } = Sc(\"weierstrass\", t, e), { h: o, n: i } = t;\n  Ui(e, {}, {\n    allowInfinityPoint: \"boolean\",\n    clearCofactor: \"function\",\n    isTorsionFree: \"function\",\n    fromBytes: \"function\",\n    toBytes: \"function\",\n    endo: \"object\",\n    wrapPrivateKey: \"boolean\"\n  });\n  const { endo: c } = e;\n  if (c && (!r.is0(t.a) || typeof c.beta != \"bigint\" || typeof c.splitScalar != \"function\"))\n    throw new Error('invalid endo: expected \"beta\": bigint and \"splitScalar\": function');\n  function f() {\n    if (!r.isOdd)\n      throw new Error(\"compression is not supported: Field does not have .isOdd()\");\n  }\n  function v(G, N, O) {\n    const { x: L, y: F } = N.toAffine(), d = r.toBytes(L);\n    if (fn(\"isCompressed\", O), O) {\n      f();\n      const s = !r.isOdd(F);\n      return vr(Zc(s), d);\n    } else\n      return vr(Uint8Array.of(4), d, r.toBytes(F));\n  }\n  function x(G) {\n    ar(G);\n    const N = r.BYTES, O = N + 1, L = 2 * N + 1, F = G.length, d = G[0], s = G.subarray(1);\n    if (F === O && (d === 2 || d === 3)) {\n      const u = r.fromBytes(s);\n      if (!r.isValid(u))\n        throw new Error(\"bad point: is not on curve, wrong x\");\n      const h = T(u);\n      let g;\n      try {\n        g = r.sqrt(h);\n      } catch (A) {\n        const p = A instanceof Error ? \": \" + A.message : \"\";\n        throw new Error(\"bad point: is not on curve, sqrt error\" + p);\n      }\n      f();\n      const w = r.isOdd(g);\n      return (d & 1) === 1 !== w && (g = r.neg(g)), { x: u, y: g };\n    } else if (F === L && d === 4) {\n      const u = r.fromBytes(s.subarray(N * 0, N * 1)), h = r.fromBytes(s.subarray(N * 1, N * 2));\n      if (!C(u, h))\n        throw new Error(\"bad point: is not on curve\");\n      return { x: u, y: h };\n    } else\n      throw new Error(`bad point: got length ${F}, expected compressed=${O} or uncompressed=${L}`);\n  }\n  const b = e.toBytes || v, S = e.fromBytes || x, T = h1(r, t.a, t.b);\n  function C(G, N) {\n    const O = r.sqr(N), L = T(G);\n    return r.eql(O, L);\n  }\n  if (!C(t.Gx, t.Gy))\n    throw new Error(\"bad curve params: generator point\");\n  const P = r.mul(r.pow(t.a, Yi), f1), B = r.mul(r.sqr(t.b), BigInt(27));\n  if (r.is0(r.add(P, B)))\n    throw new Error(\"bad curve params: a or b\");\n  function R(G, N, O = !1) {\n    if (!r.isValid(N) || O && r.is0(N))\n      throw new Error(`bad point coordinate ${G}`);\n    return N;\n  }\n  function z(G) {\n    if (!(G instanceof j))\n      throw new Error(\"ProjectivePoint expected\");\n  }\n  const K = ms((G, N) => {\n    const { px: O, py: L, pz: F } = G;\n    if (r.eql(F, r.ONE))\n      return { x: O, y: L };\n    const d = G.is0();\n    N == null && (N = d ? r.ONE : r.inv(F));\n    const s = r.mul(O, N), u = r.mul(L, N), h = r.mul(F, N);\n    if (d)\n      return { x: r.ZERO, y: r.ZERO };\n    if (!r.eql(h, r.ONE))\n      throw new Error(\"invZ was invalid\");\n    return { x: s, y: u };\n  }), Z = ms((G) => {\n    if (G.is0()) {\n      if (e.allowInfinityPoint && !r.is0(G.py))\n        return;\n      throw new Error(\"bad point: ZERO\");\n    }\n    const { x: N, y: O } = G.toAffine();\n    if (!r.isValid(N) || !r.isValid(O))\n      throw new Error(\"bad point: x or y not field elements\");\n    if (!C(N, O))\n      throw new Error(\"bad point: equation left != right\");\n    if (!G.isTorsionFree())\n      throw new Error(\"bad point: not in prime-order subgroup\");\n    return !0;\n  });\n  function Q(G, N, O, L, F) {\n    return O = new j(r.mul(O.px, G), O.py, O.pz), N = ni(L, N), O = ni(F, O), N.add(O);\n  }\n  class j {\n    /** Does NOT validate if the point is valid. Use `.assertValidity()`. */\n    constructor(N, O, L) {\n      this.px = R(\"x\", N), this.py = R(\"y\", O, !0), this.pz = R(\"z\", L), Object.freeze(this);\n    }\n    /** Does NOT validate if the point is valid. Use `.assertValidity()`. */\n    static fromAffine(N) {\n      const { x: O, y: L } = N || {};\n      if (!N || !r.isValid(O) || !r.isValid(L))\n        throw new Error(\"invalid affine point\");\n      if (N instanceof j)\n        throw new Error(\"projective point not allowed\");\n      return r.is0(O) && r.is0(L) ? j.ZERO : new j(O, L, r.ONE);\n    }\n    get x() {\n      return this.toAffine().x;\n    }\n    get y() {\n      return this.toAffine().y;\n    }\n    static normalizeZ(N) {\n      return bc(j, \"pz\", N);\n    }\n    static fromBytes(N) {\n      return ar(N), j.fromHex(N);\n    }\n    /** Converts hash string or Uint8Array to Point. */\n    static fromHex(N) {\n      const O = j.fromAffine(S(vt(\"pointHex\", N)));\n      return O.assertValidity(), O;\n    }\n    /** Multiplies generator point by privateKey. */\n    static fromPrivateKey(N) {\n      const O = qc(n, e.allowedPrivateKeyLengths, e.wrapPrivateKey);\n      return j.BASE.multiply(O(N));\n    }\n    /** Multiscalar Multiplication */\n    static msm(N, O) {\n      return Cc(j, n, N, O);\n    }\n    /**\n     *\n     * @param windowSize\n     * @param isLazy true will defer table computation until the first multiplication\n     * @returns\n     */\n    precompute(N = 8, O = !0) {\n      return ee.setWindowSize(this, N), O || this.multiply(Yi), this;\n    }\n    /** \"Private method\", don't use it directly */\n    _setWindowSize(N) {\n      this.precompute(N);\n    }\n    // TODO: return `this`\n    /** A point on curve is valid if it conforms to equation. */\n    assertValidity() {\n      Z(this);\n    }\n    hasEvenY() {\n      const { y: N } = this.toAffine();\n      if (!r.isOdd)\n        throw new Error(\"Field doesn't support isOdd\");\n      return !r.isOdd(N);\n    }\n    /** Compare one point to another. */\n    equals(N) {\n      z(N);\n      const { px: O, py: L, pz: F } = this, { px: d, py: s, pz: u } = N, h = r.eql(r.mul(O, u), r.mul(d, F)), g = r.eql(r.mul(L, u), r.mul(s, F));\n      return h && g;\n    }\n    /** Flips point to one corresponding to (x, -y) in Affine coordinates. */\n    negate() {\n      return new j(this.px, r.neg(this.py), this.pz);\n    }\n    // Renes-Costello-Batina exception-free doubling formula.\n    // There is 30% faster Jacobian formula, but it is not complete.\n    // https://eprint.iacr.org/2015/1060, algorithm 3\n    // Cost: 8M + 3S + 3*a + 2*b3 + 15add.\n    double() {\n      const { a: N, b: O } = t, L = r.mul(O, Yi), { px: F, py: d, pz: s } = this;\n      let u = r.ZERO, h = r.ZERO, g = r.ZERO, w = r.mul(F, F), _ = r.mul(d, d), A = r.mul(s, s), p = r.mul(F, d);\n      return p = r.add(p, p), g = r.mul(F, s), g = r.add(g, g), u = r.mul(N, g), h = r.mul(L, A), h = r.add(u, h), u = r.sub(_, h), h = r.add(_, h), h = r.mul(u, h), u = r.mul(p, u), g = r.mul(L, g), A = r.mul(N, A), p = r.sub(w, A), p = r.mul(N, p), p = r.add(p, g), g = r.add(w, w), w = r.add(g, w), w = r.add(w, A), w = r.mul(w, p), h = r.add(h, w), A = r.mul(d, s), A = r.add(A, A), w = r.mul(A, p), u = r.sub(u, w), g = r.mul(A, _), g = r.add(g, g), g = r.add(g, g), new j(u, h, g);\n    }\n    // Renes-Costello-Batina exception-free addition formula.\n    // There is 30% faster Jacobian formula, but it is not complete.\n    // https://eprint.iacr.org/2015/1060, algorithm 1\n    // Cost: 12M + 0S + 3*a + 3*b3 + 23add.\n    add(N) {\n      z(N);\n      const { px: O, py: L, pz: F } = this, { px: d, py: s, pz: u } = N;\n      let h = r.ZERO, g = r.ZERO, w = r.ZERO;\n      const _ = t.a, A = r.mul(t.b, Yi);\n      let p = r.mul(O, d), a = r.mul(L, s), l = r.mul(F, u), M = r.add(O, L), k = r.add(d, s);\n      M = r.mul(M, k), k = r.add(p, a), M = r.sub(M, k), k = r.add(O, F);\n      let $ = r.add(d, u);\n      return k = r.mul(k, $), $ = r.add(p, l), k = r.sub(k, $), $ = r.add(L, F), h = r.add(s, u), $ = r.mul($, h), h = r.add(a, l), $ = r.sub($, h), w = r.mul(_, k), h = r.mul(A, l), w = r.add(h, w), h = r.sub(a, w), w = r.add(a, w), g = r.mul(h, w), a = r.add(p, p), a = r.add(a, p), l = r.mul(_, l), k = r.mul(A, k), a = r.add(a, l), l = r.sub(p, l), l = r.mul(_, l), k = r.add(k, l), p = r.mul(a, k), g = r.add(g, p), p = r.mul($, k), h = r.mul(M, h), h = r.sub(h, p), p = r.mul(M, a), w = r.mul($, w), w = r.add(w, p), new j(h, g, w);\n    }\n    subtract(N) {\n      return this.add(N.negate());\n    }\n    is0() {\n      return this.equals(j.ZERO);\n    }\n    /**\n     * Constant time multiplication.\n     * Uses wNAF method. Windowed method may be 10% faster,\n     * but takes 2x longer to generate and consumes 2x memory.\n     * Uses precomputes when available.\n     * Uses endomorphism for Koblitz curves.\n     * @param scalar by which the point would be multiplied\n     * @returns New point\n     */\n    multiply(N) {\n      const { endo: O } = e;\n      if (!n.isValidNot0(N))\n        throw new Error(\"invalid scalar: out of range\");\n      let L, F;\n      const d = (s) => ee.wNAFCached(this, s, j.normalizeZ);\n      if (O) {\n        const { k1neg: s, k1: u, k2neg: h, k2: g } = O.splitScalar(N), { p: w, f: _ } = d(u), { p: A, f: p } = d(g);\n        F = _.add(p), L = Q(O.beta, w, A, s, h);\n      } else {\n        const { p: s, f: u } = d(N);\n        L = s, F = u;\n      }\n      return j.normalizeZ([L, F])[0];\n    }\n    /**\n     * Non-constant-time multiplication. Uses double-and-add algorithm.\n     * It's faster, but should only be used when you don't care about\n     * an exposed private key e.g. sig verification, which works over *public* keys.\n     */\n    multiplyUnsafe(N) {\n      const { endo: O } = e, L = this;\n      if (!n.isValid(N))\n        throw new Error(\"invalid scalar: out of range\");\n      if (N === ii || L.is0())\n        return j.ZERO;\n      if (N === si)\n        return L;\n      if (ee.hasPrecomputes(this))\n        return this.multiply(N);\n      if (O) {\n        const { k1neg: F, k1: d, k2neg: s, k2: u } = O.splitScalar(N), { p1: h, p2: g } = gh(j, L, d, u);\n        return Q(O.beta, h, g, F, s);\n      } else\n        return ee.wNAFCachedUnsafe(L, N);\n    }\n    multiplyAndAddUnsafe(N, O, L) {\n      const F = this.multiplyUnsafe(O).add(N.multiplyUnsafe(L));\n      return F.is0() ? void 0 : F;\n    }\n    /**\n     * Converts Projective point to affine (x, y) coordinates.\n     * @param invertedZ Z^-1 (inverted zero) - optional, precomputation is useful for invertBatch\n     */\n    toAffine(N) {\n      return K(this, N);\n    }\n    /**\n     * Checks whether Point is free of torsion elements (is in prime subgroup).\n     * Always torsion-free for cofactor=1 curves.\n     */\n    isTorsionFree() {\n      const { isTorsionFree: N } = e;\n      return o === si ? !0 : N ? N(j, this) : ee.wNAFCachedUnsafe(this, i).is0();\n    }\n    clearCofactor() {\n      const { clearCofactor: N } = e;\n      return o === si ? this : N ? N(j, this) : this.multiplyUnsafe(o);\n    }\n    toBytes(N = !0) {\n      return fn(\"isCompressed\", N), this.assertValidity(), b(j, this, N);\n    }\n    /** @deprecated use `toBytes` */\n    toRawBytes(N = !0) {\n      return this.toBytes(N);\n    }\n    toHex(N = !0) {\n      return Nn(this.toBytes(N));\n    }\n    toString() {\n      return `<Point ${this.is0() ? \"ZERO\" : this.toHex()}>`;\n    }\n  }\n  j.BASE = new j(t.Gx, t.Gy, r.ONE), j.ZERO = new j(r.ZERO, r.ONE, r.ZERO), j.Fp = r, j.Fn = n;\n  const V = n.BITS, ee = Mc(j, e.endo ? Math.ceil(V / 2) : V);\n  return j;\n}\nfunction Zc(t) {\n  return Uint8Array.of(t ? 2 : 3);\n}\nfunction p1(t, e, r = {}) {\n  Ui(e, { hash: \"function\" }, {\n    hmac: \"function\",\n    lowS: \"boolean\",\n    randomBytes: \"function\",\n    bits2int: \"function\",\n    bits2int_modN: \"function\"\n  });\n  const n = e.randomBytes || lc, o = e.hmac || ((L, ...F) => zc(e.hash, L, vr(...F))), { Fp: i, Fn: c } = t, { ORDER: f, BITS: v } = c;\n  function x(L) {\n    const F = f >> si;\n    return L > F;\n  }\n  function b(L) {\n    return x(L) ? c.neg(L) : L;\n  }\n  function S(L, F) {\n    if (!c.isValidNot0(F))\n      throw new Error(`invalid signature ${L}: out of range 1..CURVE.n`);\n  }\n  class T {\n    constructor(F, d, s) {\n      S(\"r\", F), S(\"s\", d), this.r = F, this.s = d, s != null && (this.recovery = s), Object.freeze(this);\n    }\n    // pair (bytes of r, bytes of s)\n    static fromCompact(F) {\n      const d = c.BYTES, s = vt(\"compactSignature\", F, d * 2);\n      return new T(c.fromBytes(s.subarray(0, d)), c.fromBytes(s.subarray(d, d * 2)));\n    }\n    // DER encoded ECDSA signature\n    // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script\n    static fromDER(F) {\n      const { r: d, s } = mr.toSig(vt(\"DER\", F));\n      return new T(d, s);\n    }\n    /**\n     * @todo remove\n     * @deprecated\n     */\n    assertValidity() {\n    }\n    addRecoveryBit(F) {\n      return new T(this.r, this.s, F);\n    }\n    // ProjPointType<bigint>\n    recoverPublicKey(F) {\n      const d = i.ORDER, { r: s, s: u, recovery: h } = this;\n      if (h == null || ![0, 1, 2, 3].includes(h))\n        throw new Error(\"recovery id invalid\");\n      if (f * l1 < d && h > 1)\n        throw new Error(\"recovery id is ambiguous for h>1 curve\");\n      const w = h === 2 || h === 3 ? s + f : s;\n      if (!i.isValid(w))\n        throw new Error(\"recovery id 2 or 3 invalid\");\n      const _ = i.toBytes(w), A = t.fromHex(vr(Zc((h & 1) === 0), _)), p = c.inv(w), a = Z(vt(\"msgHash\", F)), l = c.create(-a * p), M = c.create(u * p), k = t.BASE.multiplyUnsafe(l).add(A.multiplyUnsafe(M));\n      if (k.is0())\n        throw new Error(\"point at infinify\");\n      return k.assertValidity(), k;\n    }\n    // Signatures should be low-s, to prevent malleability.\n    hasHighS() {\n      return x(this.s);\n    }\n    normalizeS() {\n      return this.hasHighS() ? new T(this.r, c.neg(this.s), this.recovery) : this;\n    }\n    toBytes(F) {\n      if (F === \"compact\")\n        return vr(c.toBytes(this.r), c.toBytes(this.s));\n      if (F === \"der\")\n        return sa(mr.hexFromSig(this));\n      throw new Error(\"invalid format\");\n    }\n    // DER-encoded\n    toDERRawBytes() {\n      return this.toBytes(\"der\");\n    }\n    toDERHex() {\n      return Nn(this.toBytes(\"der\"));\n    }\n    // padded bytes of r, then padded bytes of s\n    toCompactRawBytes() {\n      return this.toBytes(\"compact\");\n    }\n    toCompactHex() {\n      return Nn(this.toBytes(\"compact\"));\n    }\n  }\n  const C = qc(c, r.allowedPrivateKeyLengths, r.wrapPrivateKey), P = {\n    isValidPrivateKey(L) {\n      try {\n        return C(L), !0;\n      } catch {\n        return !1;\n      }\n    },\n    normPrivateKeyToScalar: C,\n    /**\n     * Produces cryptographically secure private key from random of size\n     * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.\n     */\n    randomPrivateKey: () => {\n      const L = f;\n      return dh(n(xc(L)), L);\n    },\n    precompute(L = 8, F = t.BASE) {\n      return F.precompute(L, !1);\n    }\n  };\n  function B(L, F = !0) {\n    return t.fromPrivateKey(L).toBytes(F);\n  }\n  function R(L) {\n    if (typeof L == \"bigint\")\n      return !1;\n    if (L instanceof t)\n      return !0;\n    const d = vt(\"key\", L).length, s = i.BYTES, u = s + 1, h = 2 * s + 1;\n    if (!(r.allowedPrivateKeyLengths || c.BYTES === u))\n      return d === u || d === h;\n  }\n  function z(L, F, d = !0) {\n    if (R(L) === !0)\n      throw new Error(\"first arg must be private key\");\n    if (R(F) === !1)\n      throw new Error(\"second arg must be public key\");\n    return t.fromHex(F).multiply(C(L)).toBytes(d);\n  }\n  const K = e.bits2int || function(L) {\n    if (L.length > 8192)\n      throw new Error(\"input is too large\");\n    const F = Ls(L), d = L.length * 8 - v;\n    return d > 0 ? F >> BigInt(d) : F;\n  }, Z = e.bits2int_modN || function(L) {\n    return c.create(K(L));\n  }, Q = Ns(v);\n  function j(L) {\n    return Sn(\"num < 2^\" + v, L, ii, Q), c.toBytes(L);\n  }\n  function V(L, F, d = ee) {\n    if ([\"recovered\", \"canonical\"].some((M) => M in d))\n      throw new Error(\"sign() legacy options not supported\");\n    const { hash: s } = e;\n    let { lowS: u, prehash: h, extraEntropy: g } = d;\n    u == null && (u = !0), L = vt(\"msgHash\", L), cu(d), h && (L = vt(\"prehashed msgHash\", s(L)));\n    const w = Z(L), _ = C(F), A = [j(_), j(w)];\n    if (g != null && g !== !1) {\n      const M = g === !0 ? n(i.BYTES) : g;\n      A.push(vt(\"extraEntropy\", M));\n    }\n    const p = vr(...A), a = w;\n    function l(M) {\n      const k = K(M);\n      if (!c.isValidNot0(k))\n        return;\n      const $ = c.inv(k), X = t.BASE.multiply(k).toAffine(), re = c.create(X.x);\n      if (re === ii)\n        return;\n      const se = c.create($ * c.create(a + re * _));\n      if (se === ii)\n        return;\n      let ut = (X.x === re ? 0 : 2) | Number(X.y & si), xe = se;\n      return u && x(se) && (xe = b(se), ut ^= 1), new T(re, xe, ut);\n    }\n    return { seed: p, k2sig: l };\n  }\n  const ee = { lowS: e.lowS, prehash: !1 }, G = { lowS: e.lowS, prehash: !1 };\n  function N(L, F, d = ee) {\n    const { seed: s, k2sig: u } = V(L, F, d);\n    return nh(e.hash.outputLen, c.BYTES, o)(s, u);\n  }\n  t.BASE.precompute(8);\n  function O(L, F, d, s = G) {\n    const u = L;\n    F = vt(\"msgHash\", F), d = vt(\"publicKey\", d), cu(s);\n    const { lowS: h, prehash: g, format: w } = s;\n    if (\"strict\" in s)\n      throw new Error(\"options.strict was renamed to lowS\");\n    if (w !== void 0 && ![\"compact\", \"der\", \"js\"].includes(w))\n      throw new Error('format must be \"compact\", \"der\" or \"js\"');\n    const _ = typeof u == \"string\" || ia(u), A = !_ && !w && typeof u == \"object\" && u !== null && typeof u.r == \"bigint\" && typeof u.s == \"bigint\";\n    if (!_ && !A)\n      throw new Error(\"invalid signature, expected Uint8Array, hex string or Signature instance\");\n    let p, a;\n    try {\n      if (A)\n        if (w === void 0 || w === \"js\")\n          p = new T(u.r, u.s);\n        else\n          throw new Error(\"invalid format\");\n      if (_) {\n        try {\n          w !== \"compact\" && (p = T.fromDER(u));\n        } catch (xe) {\n          if (!(xe instanceof mr.Err))\n            throw xe;\n        }\n        !p && w !== \"der\" && (p = T.fromCompact(u));\n      }\n      a = t.fromHex(d);\n    } catch {\n      return !1;\n    }\n    if (!p || h && p.hasHighS())\n      return !1;\n    g && (F = e.hash(F));\n    const { r: l, s: M } = p, k = Z(F), $ = c.inv(M), X = c.create(k * $), re = c.create(l * $), se = t.BASE.multiplyUnsafe(X).add(a.multiplyUnsafe(re));\n    return se.is0() ? !1 : c.create(se.x) === l;\n  }\n  return Object.freeze({\n    getPublicKey: B,\n    getSharedSecret: z,\n    sign: N,\n    verify: O,\n    utils: P,\n    Point: t,\n    Signature: T\n  });\n}\nfunction m1(t) {\n  const e = {\n    a: t.a,\n    b: t.b,\n    p: t.Fp.ORDER,\n    n: t.n,\n    h: t.h,\n    Gx: t.Gx,\n    Gy: t.Gy\n  }, r = t.Fp, n = $n(e.n, t.nBitLength), o = {\n    Fp: r,\n    Fn: n,\n    allowedPrivateKeyLengths: t.allowedPrivateKeyLengths,\n    allowInfinityPoint: t.allowInfinityPoint,\n    endo: t.endo,\n    wrapPrivateKey: t.wrapPrivateKey,\n    isTorsionFree: t.isTorsionFree,\n    clearCofactor: t.clearCofactor,\n    fromBytes: t.fromBytes,\n    toBytes: t.toBytes\n  };\n  return { CURVE: e, curveOpts: o };\n}\nfunction g1(t) {\n  const { CURVE: e, curveOpts: r } = m1(t), n = {\n    hash: t.hash,\n    hmac: t.hmac,\n    randomBytes: t.randomBytes,\n    lowS: t.lowS,\n    bits2int: t.bits2int,\n    bits2int_modN: t.bits2int_modN\n  };\n  return { CURVE: e, curveOpts: r, ecdsaOpts: n };\n}\nfunction y1(t, e) {\n  return Object.assign({}, e, {\n    ProjectivePoint: e.Point,\n    CURVE: t\n  });\n}\nfunction v1(t) {\n  const { CURVE: e, curveOpts: r, ecdsaOpts: n } = g1(t), o = d1(e, r), i = p1(o, n, r);\n  return y1(t, i);\n}\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nfunction w1(t, e) {\n  const r = (n) => v1({ ...t, hash: n });\n  return { ...r(e), create: r };\n}\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nconst bs = {\n  p: BigInt(\"0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f\"),\n  n: BigInt(\"0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141\"),\n  h: BigInt(1),\n  a: BigInt(0),\n  b: BigInt(7),\n  Gx: BigInt(\"0x79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798\"),\n  Gy: BigInt(\"0x483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8\")\n};\nBigInt(0);\nconst x1 = BigInt(1), Oo = BigInt(2), lu = (t, e) => (t + e / Oo) / e;\nfunction b1(t) {\n  const e = bs.p, r = BigInt(3), n = BigInt(6), o = BigInt(11), i = BigInt(22), c = BigInt(23), f = BigInt(44), v = BigInt(88), x = t * t * t % e, b = x * x * t % e, S = pt(b, r, e) * b % e, T = pt(S, r, e) * b % e, C = pt(T, Oo, e) * x % e, P = pt(C, o, e) * C % e, B = pt(P, i, e) * P % e, R = pt(B, f, e) * B % e, z = pt(R, v, e) * R % e, K = pt(z, f, e) * B % e, Z = pt(K, r, e) * b % e, Q = pt(Z, c, e) * P % e, j = pt(Q, n, e) * x % e, V = pt(j, Oo, e);\n  if (!No.eql(No.sqr(V), t))\n    throw new Error(\"Cannot find square root\");\n  return V;\n}\nconst No = $n(bs.p, void 0, void 0, { sqrt: b1 }), _1 = w1({\n  ...bs,\n  Fp: No,\n  lowS: !0,\n  // Allow only low-S signatures by default in sign() and verify()\n  endo: {\n    // Endomorphism, see above\n    beta: BigInt(\"0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee\"),\n    splitScalar: (t) => {\n      const e = bs.n, r = BigInt(\"0x3086d221a7d46bcde86c90e49284eb15\"), n = -x1 * BigInt(\"0xe4437ed6010e88286f547fa90abfe4c3\"), o = BigInt(\"0x114ca50f7a8e2f3f657c1108d9d44cfd8\"), i = r, c = BigInt(\"0x100000000000000000000000000000000\"), f = lu(i * t, e), v = lu(-n * t, e);\n      let x = wt(t - f * r - v * o, e), b = wt(-f * n - v * i, e);\n      const S = x > c, T = b > c;\n      if (S && (x = e - x), T && (b = e - b), x > c || b > c)\n        throw new Error(\"splitScalar: Endomorphism failed, k=\" + t);\n      return { k1neg: S, k1: x, k2neg: T, k2: b };\n    }\n  }\n}, Q0);\nFi.utils.randomPrivateKey;\nFi.getPublicKey;\nfunction fu(t) {\n  try {\n    return Fi.ExtendedPoint.fromHex(t), !0;\n  } catch {\n    return !1;\n  }\n}\nconst Vc = (t, e) => Fi.sign(t, e.slice(0, 32)), E1 = Fi.verify, da = (t) => et.Buffer.isBuffer(t) ? t : t instanceof Uint8Array ? et.Buffer.from(t.buffer, t.byteOffset, t.byteLength) : et.Buffer.from(t);\nclass M1 {\n  constructor(e) {\n    Object.assign(this, e);\n  }\n  encode() {\n    return et.Buffer.from(oo.serialize(is, this));\n  }\n  static decode(e) {\n    return oo.deserialize(is, this, e);\n  }\n  static decodeUnchecked(e) {\n    return oo.deserializeUnchecked(is, this, e);\n  }\n}\nconst is = /* @__PURE__ */ new Map();\nvar Hc;\nconst C1 = 32, Rr = 32;\nfunction S1(t) {\n  return t._bn !== void 0;\n}\nlet hu = 1;\nclass Re extends M1 {\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(e) {\n    if (super({}), this._bn = void 0, S1(e))\n      this._bn = e._bn;\n    else {\n      if (typeof e == \"string\") {\n        const r = Nt.decode(e);\n        if (r.length != Rr)\n          throw new Error(\"Invalid public key input\");\n        this._bn = new Ka(r);\n      } else\n        this._bn = new Ka(e);\n      if (this._bn.byteLength() > Rr)\n        throw new Error(\"Invalid public key input\");\n    }\n  }\n  /**\n   * Returns a unique PublicKey for tests and benchmarks using a counter\n   */\n  static unique() {\n    const e = new Re(hu);\n    return hu += 1, new Re(e.toBuffer());\n  }\n  /**\n   * Default public key value. The base58-encoded string representation is all ones (as seen below)\n   * The underlying BN number is 32 bytes that are all zeros\n   */\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(e) {\n    return this._bn.eq(e._bn);\n  }\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58() {\n    return Nt.encode(this.toBytes());\n  }\n  toJSON() {\n    return this.toBase58();\n  }\n  /**\n   * Return the byte array representation of the public key in big endian\n   */\n  toBytes() {\n    const e = this.toBuffer();\n    return new Uint8Array(e.buffer, e.byteOffset, e.byteLength);\n  }\n  /**\n   * Return the Buffer representation of the public key in big endian\n   */\n  toBuffer() {\n    const e = this._bn.toArrayLike(et.Buffer);\n    if (e.length === Rr)\n      return e;\n    const r = et.Buffer.alloc(32);\n    return e.copy(r, 32 - e.length), r;\n  }\n  get [Symbol.toStringTag]() {\n    return `PublicKey(${this.toString()})`;\n  }\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toString() {\n    return this.toBase58();\n  }\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n  /* eslint-disable require-await */\n  static async createWithSeed(e, r, n) {\n    const o = et.Buffer.concat([e.toBuffer(), et.Buffer.from(r), n.toBuffer()]), i = Xa(o);\n    return new Re(i);\n  }\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  /* eslint-disable require-await */\n  static createProgramAddressSync(e, r) {\n    let n = et.Buffer.alloc(0);\n    e.forEach(function(i) {\n      if (i.length > C1)\n        throw new TypeError(\"Max seed length exceeded\");\n      n = et.Buffer.concat([n, da(i)]);\n    }), n = et.Buffer.concat([n, r.toBuffer(), et.Buffer.from(\"ProgramDerivedAddress\")]);\n    const o = Xa(n);\n    if (fu(o))\n      throw new Error(\"Invalid seeds, address must fall off the curve\");\n    return new Re(o);\n  }\n  /**\n   * Async version of createProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link createProgramAddressSync} instead\n   */\n  /* eslint-disable require-await */\n  static async createProgramAddress(e, r) {\n    return this.createProgramAddressSync(e, r);\n  }\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static findProgramAddressSync(e, r) {\n    let n = 255, o;\n    for (; n != 0; ) {\n      try {\n        const i = e.concat(et.Buffer.from([n]));\n        o = this.createProgramAddressSync(i, r);\n      } catch (i) {\n        if (i instanceof TypeError)\n          throw i;\n        n--;\n        continue;\n      }\n      return [o, n];\n    }\n    throw new Error(\"Unable to find a viable program address nonce\");\n  }\n  /**\n   * Async version of findProgramAddressSync\n   * For backwards compatibility\n   *\n   * @deprecated Use {@link findProgramAddressSync} instead\n   */\n  static async findProgramAddress(e, r) {\n    return this.findProgramAddressSync(e, r);\n  }\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n  static isOnCurve(e) {\n    const r = new Re(e);\n    return fu(r.toBytes());\n  }\n}\nHc = Re;\nRe.default = new Hc(\"11111111111111111111111111111111\");\nis.set(Re, {\n  kind: \"struct\",\n  fields: [[\"_bn\", \"u256\"]]\n});\nnew Re(\"BPFLoader1111111111111111111111111111111111\");\nconst Bn = 1232, pa = 127, _s = 64;\nclass Es {\n  constructor(e, r) {\n    this.staticAccountKeys = void 0, this.accountKeysFromLookups = void 0, this.staticAccountKeys = e, this.accountKeysFromLookups = r;\n  }\n  keySegments() {\n    const e = [this.staticAccountKeys];\n    return this.accountKeysFromLookups && (e.push(this.accountKeysFromLookups.writable), e.push(this.accountKeysFromLookups.readonly)), e;\n  }\n  get(e) {\n    for (const r of this.keySegments()) {\n      if (e < r.length)\n        return r[e];\n      e -= r.length;\n    }\n  }\n  get length() {\n    return this.keySegments().flat().length;\n  }\n  compileInstructions(e) {\n    if (this.length > 256)\n      throw new Error(\"Account index overflow encountered during compilation\");\n    const n = /* @__PURE__ */ new Map();\n    this.keySegments().flat().forEach((i, c) => {\n      n.set(i.toBase58(), c);\n    });\n    const o = (i) => {\n      const c = n.get(i.toBase58());\n      if (c === void 0) throw new Error(\"Encountered an unknown instruction account key during compilation\");\n      return c;\n    };\n    return e.map((i) => ({\n      programIdIndex: o(i.programId),\n      accountKeyIndexes: i.keys.map((c) => o(c.pubkey)),\n      data: i.data\n    }));\n  }\n}\nconst tt = (t = \"publicKey\") => D.blob(32, t), A1 = (t = \"signature\") => D.blob(64, t), An = (t = \"string\") => {\n  const e = D.struct([D.u32(\"length\"), D.u32(\"lengthPadding\"), D.blob(D.offset(D.u32(), -8), \"chars\")], t), r = e.decode.bind(e), n = e.encode.bind(e), o = e;\n  return o.decode = (i, c) => r(i, c).chars.toString(), o.encode = (i, c, f) => {\n    const v = {\n      chars: et.Buffer.from(i, \"utf8\")\n    };\n    return n(v, c, f);\n  }, o.alloc = (i) => D.u32().span + D.u32().span + et.Buffer.from(i, \"utf8\").length, o;\n}, k1 = (t = \"authorized\") => D.struct([tt(\"staker\"), tt(\"withdrawer\")], t), I1 = (t = \"lockup\") => D.struct([D.ns64(\"unixTimestamp\"), D.ns64(\"epoch\"), tt(\"custodian\")], t), B1 = (t = \"voteInit\") => D.struct([tt(\"nodePubkey\"), tt(\"authorizedVoter\"), tt(\"authorizedWithdrawer\"), D.u8(\"commission\")], t), R1 = (t = \"voteAuthorizeWithSeedArgs\") => D.struct([D.u32(\"voteAuthorizationType\"), tt(\"currentAuthorityDerivedKeyOwnerPubkey\"), An(\"currentAuthorityDerivedKeySeed\"), tt(\"newAuthorized\")], t);\nfunction $t(t) {\n  let e = 0, r = 0;\n  for (; ; ) {\n    let n = t.shift();\n    if (e |= (n & 127) << r * 7, r += 1, (n & 128) === 0)\n      break;\n  }\n  return e;\n}\nfunction zt(t, e) {\n  let r = e;\n  for (; ; ) {\n    let n = r & 127;\n    if (r >>= 7, r == 0) {\n      t.push(n);\n      break;\n    } else\n      n |= 128, t.push(n);\n  }\n}\nfunction bt(t, e) {\n  if (!t)\n    throw new Error(e || \"Assertion failed\");\n}\nclass $s {\n  constructor(e, r) {\n    this.payer = void 0, this.keyMetaMap = void 0, this.payer = e, this.keyMetaMap = r;\n  }\n  static compile(e, r) {\n    const n = /* @__PURE__ */ new Map(), o = (c) => {\n      const f = c.toBase58();\n      let v = n.get(f);\n      return v === void 0 && (v = {\n        isSigner: !1,\n        isWritable: !1,\n        isInvoked: !1\n      }, n.set(f, v)), v;\n    }, i = o(r);\n    i.isSigner = !0, i.isWritable = !0;\n    for (const c of e) {\n      o(c.programId).isInvoked = !0;\n      for (const f of c.keys) {\n        const v = o(f.pubkey);\n        v.isSigner || (v.isSigner = f.isSigner), v.isWritable || (v.isWritable = f.isWritable);\n      }\n    }\n    return new $s(r, n);\n  }\n  getMessageComponents() {\n    const e = [...this.keyMetaMap.entries()];\n    bt(e.length <= 256, \"Max static account keys length exceeded\");\n    const r = e.filter(([, v]) => v.isSigner && v.isWritable), n = e.filter(([, v]) => v.isSigner && !v.isWritable), o = e.filter(([, v]) => !v.isSigner && v.isWritable), i = e.filter(([, v]) => !v.isSigner && !v.isWritable), c = {\n      numRequiredSignatures: r.length + n.length,\n      numReadonlySignedAccounts: n.length,\n      numReadonlyUnsignedAccounts: i.length\n    };\n    {\n      bt(r.length > 0, \"Expected at least one writable signer key\");\n      const [v] = r[0];\n      bt(v === this.payer.toBase58(), \"Expected first writable signer key to be the fee payer\");\n    }\n    const f = [...r.map(([v]) => new Re(v)), ...n.map(([v]) => new Re(v)), ...o.map(([v]) => new Re(v)), ...i.map(([v]) => new Re(v))];\n    return [c, f];\n  }\n  extractTableLookup(e) {\n    const [r, n] = this.drainKeysFoundInLookupTable(e.state.addresses, (c) => !c.isSigner && !c.isInvoked && c.isWritable), [o, i] = this.drainKeysFoundInLookupTable(e.state.addresses, (c) => !c.isSigner && !c.isInvoked && !c.isWritable);\n    if (!(r.length === 0 && o.length === 0))\n      return [{\n        accountKey: e.key,\n        writableIndexes: r,\n        readonlyIndexes: o\n      }, {\n        writable: n,\n        readonly: i\n      }];\n  }\n  /** @internal */\n  drainKeysFoundInLookupTable(e, r) {\n    const n = new Array(), o = new Array();\n    for (const [i, c] of this.keyMetaMap.entries())\n      if (r(c)) {\n        const f = new Re(i), v = e.findIndex((x) => x.equals(f));\n        v >= 0 && (bt(v < 256, \"Max lookup table index exceeded\"), n.push(v), o.push(f), this.keyMetaMap.delete(i));\n      }\n    return [n, o];\n  }\n}\nconst Kc = \"Reached end of buffer unexpectedly\";\nfunction yr(t) {\n  if (t.length === 0)\n    throw new Error(Kc);\n  return t.shift();\n}\nfunction qt(t, ...e) {\n  const [r] = e;\n  if (e.length === 2 ? r + (e[1] ?? 0) > t.length : r >= t.length)\n    throw new Error(Kc);\n  return t.splice(...e);\n}\nclass Fn {\n  constructor(e) {\n    this.header = void 0, this.accountKeys = void 0, this.recentBlockhash = void 0, this.instructions = void 0, this.indexToProgramIds = /* @__PURE__ */ new Map(), this.header = e.header, this.accountKeys = e.accountKeys.map((r) => new Re(r)), this.recentBlockhash = e.recentBlockhash, this.instructions = e.instructions, this.instructions.forEach((r) => this.indexToProgramIds.set(r.programIdIndex, this.accountKeys[r.programIdIndex]));\n  }\n  get version() {\n    return \"legacy\";\n  }\n  get staticAccountKeys() {\n    return this.accountKeys;\n  }\n  get compiledInstructions() {\n    return this.instructions.map((e) => ({\n      programIdIndex: e.programIdIndex,\n      accountKeyIndexes: e.accounts,\n      data: Nt.decode(e.data)\n    }));\n  }\n  get addressTableLookups() {\n    return [];\n  }\n  getAccountKeys() {\n    return new Es(this.staticAccountKeys);\n  }\n  static compile(e) {\n    const r = $s.compile(e.instructions, e.payerKey), [n, o] = r.getMessageComponents(), c = new Es(o).compileInstructions(e.instructions).map((f) => ({\n      programIdIndex: f.programIdIndex,\n      accounts: f.accountKeyIndexes,\n      data: Nt.encode(f.data)\n    }));\n    return new Fn({\n      header: n,\n      accountKeys: o,\n      recentBlockhash: e.recentBlockhash,\n      instructions: c\n    });\n  }\n  isAccountSigner(e) {\n    return e < this.header.numRequiredSignatures;\n  }\n  isAccountWritable(e) {\n    const r = this.header.numRequiredSignatures;\n    if (e >= this.header.numRequiredSignatures) {\n      const n = e - r, i = this.accountKeys.length - r - this.header.numReadonlyUnsignedAccounts;\n      return n < i;\n    } else {\n      const n = r - this.header.numReadonlySignedAccounts;\n      return e < n;\n    }\n  }\n  isProgramId(e) {\n    return this.indexToProgramIds.has(e);\n  }\n  programIds() {\n    return [...this.indexToProgramIds.values()];\n  }\n  nonProgramIds() {\n    return this.accountKeys.filter((e, r) => !this.isProgramId(r));\n  }\n  serialize() {\n    const e = this.accountKeys.length;\n    let r = [];\n    zt(r, e);\n    const n = this.instructions.map((S) => {\n      const {\n        accounts: T,\n        programIdIndex: C\n      } = S, P = Array.from(Nt.decode(S.data));\n      let B = [];\n      zt(B, T.length);\n      let R = [];\n      return zt(R, P.length), {\n        programIdIndex: C,\n        keyIndicesCount: et.Buffer.from(B),\n        keyIndices: T,\n        dataLength: et.Buffer.from(R),\n        data: P\n      };\n    });\n    let o = [];\n    zt(o, n.length);\n    let i = et.Buffer.alloc(Bn);\n    et.Buffer.from(o).copy(i);\n    let c = o.length;\n    n.forEach((S) => {\n      const C = D.struct([D.u8(\"programIdIndex\"), D.blob(S.keyIndicesCount.length, \"keyIndicesCount\"), D.seq(D.u8(\"keyIndex\"), S.keyIndices.length, \"keyIndices\"), D.blob(S.dataLength.length, \"dataLength\"), D.seq(D.u8(\"userdatum\"), S.data.length, \"data\")]).encode(S, i, c);\n      c += C;\n    }), i = i.slice(0, c);\n    const f = D.struct([D.blob(1, \"numRequiredSignatures\"), D.blob(1, \"numReadonlySignedAccounts\"), D.blob(1, \"numReadonlyUnsignedAccounts\"), D.blob(r.length, \"keyCount\"), D.seq(tt(\"key\"), e, \"keys\"), tt(\"recentBlockhash\")]), v = {\n      numRequiredSignatures: et.Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: et.Buffer.from([this.header.numReadonlySignedAccounts]),\n      numReadonlyUnsignedAccounts: et.Buffer.from([this.header.numReadonlyUnsignedAccounts]),\n      keyCount: et.Buffer.from(r),\n      keys: this.accountKeys.map((S) => da(S.toBytes())),\n      recentBlockhash: Nt.decode(this.recentBlockhash)\n    };\n    let x = et.Buffer.alloc(2048);\n    const b = f.encode(v, x);\n    return i.copy(x, b), x.slice(0, b + i.length);\n  }\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(e) {\n    let r = [...e];\n    const n = yr(r);\n    if (n !== (n & pa))\n      throw new Error(\"Versioned messages must be deserialized with VersionedMessage.deserialize()\");\n    const o = yr(r), i = yr(r), c = $t(r);\n    let f = [];\n    for (let T = 0; T < c; T++) {\n      const C = qt(r, 0, Rr);\n      f.push(new Re(et.Buffer.from(C)));\n    }\n    const v = qt(r, 0, Rr), x = $t(r);\n    let b = [];\n    for (let T = 0; T < x; T++) {\n      const C = yr(r), P = $t(r), B = qt(r, 0, P), R = $t(r), z = qt(r, 0, R), K = Nt.encode(et.Buffer.from(z));\n      b.push({\n        programIdIndex: C,\n        accounts: B,\n        data: K\n      });\n    }\n    const S = {\n      header: {\n        numRequiredSignatures: n,\n        numReadonlySignedAccounts: o,\n        numReadonlyUnsignedAccounts: i\n      },\n      recentBlockhash: Nt.encode(et.Buffer.from(v)),\n      accountKeys: f,\n      instructions: b\n    };\n    return new Fn(S);\n  }\n}\nclass Ms {\n  constructor(e) {\n    this.header = void 0, this.staticAccountKeys = void 0, this.recentBlockhash = void 0, this.compiledInstructions = void 0, this.addressTableLookups = void 0, this.header = e.header, this.staticAccountKeys = e.staticAccountKeys, this.recentBlockhash = e.recentBlockhash, this.compiledInstructions = e.compiledInstructions, this.addressTableLookups = e.addressTableLookups;\n  }\n  get version() {\n    return 0;\n  }\n  get numAccountKeysFromLookups() {\n    let e = 0;\n    for (const r of this.addressTableLookups)\n      e += r.readonlyIndexes.length + r.writableIndexes.length;\n    return e;\n  }\n  getAccountKeys(e) {\n    let r;\n    if (e && \"accountKeysFromLookups\" in e && e.accountKeysFromLookups) {\n      if (this.numAccountKeysFromLookups != e.accountKeysFromLookups.writable.length + e.accountKeysFromLookups.readonly.length)\n        throw new Error(\"Failed to get account keys because of a mismatch in the number of account keys from lookups\");\n      r = e.accountKeysFromLookups;\n    } else if (e && \"addressLookupTableAccounts\" in e && e.addressLookupTableAccounts)\n      r = this.resolveAddressTableLookups(e.addressLookupTableAccounts);\n    else if (this.addressTableLookups.length > 0)\n      throw new Error(\"Failed to get account keys because address table lookups were not resolved\");\n    return new Es(this.staticAccountKeys, r);\n  }\n  isAccountSigner(e) {\n    return e < this.header.numRequiredSignatures;\n  }\n  isAccountWritable(e) {\n    const r = this.header.numRequiredSignatures, n = this.staticAccountKeys.length;\n    if (e >= n) {\n      const o = e - n, i = this.addressTableLookups.reduce((c, f) => c + f.writableIndexes.length, 0);\n      return o < i;\n    } else if (e >= this.header.numRequiredSignatures) {\n      const o = e - r, c = n - r - this.header.numReadonlyUnsignedAccounts;\n      return o < c;\n    } else {\n      const o = r - this.header.numReadonlySignedAccounts;\n      return e < o;\n    }\n  }\n  resolveAddressTableLookups(e) {\n    const r = {\n      writable: [],\n      readonly: []\n    };\n    for (const n of this.addressTableLookups) {\n      const o = e.find((i) => i.key.equals(n.accountKey));\n      if (!o)\n        throw new Error(`Failed to find address lookup table account for table key ${n.accountKey.toBase58()}`);\n      for (const i of n.writableIndexes)\n        if (i < o.state.addresses.length)\n          r.writable.push(o.state.addresses[i]);\n        else\n          throw new Error(`Failed to find address for index ${i} in address lookup table ${n.accountKey.toBase58()}`);\n      for (const i of n.readonlyIndexes)\n        if (i < o.state.addresses.length)\n          r.readonly.push(o.state.addresses[i]);\n        else\n          throw new Error(`Failed to find address for index ${i} in address lookup table ${n.accountKey.toBase58()}`);\n    }\n    return r;\n  }\n  static compile(e) {\n    const r = $s.compile(e.instructions, e.payerKey), n = new Array(), o = {\n      writable: new Array(),\n      readonly: new Array()\n    }, i = e.addressLookupTableAccounts || [];\n    for (const b of i) {\n      const S = r.extractTableLookup(b);\n      if (S !== void 0) {\n        const [T, {\n          writable: C,\n          readonly: P\n        }] = S;\n        n.push(T), o.writable.push(...C), o.readonly.push(...P);\n      }\n    }\n    const [c, f] = r.getMessageComponents(), x = new Es(f, o).compileInstructions(e.instructions);\n    return new Ms({\n      header: c,\n      staticAccountKeys: f,\n      recentBlockhash: e.recentBlockhash,\n      compiledInstructions: x,\n      addressTableLookups: n\n    });\n  }\n  serialize() {\n    const e = Array();\n    zt(e, this.staticAccountKeys.length);\n    const r = this.serializeInstructions(), n = Array();\n    zt(n, this.compiledInstructions.length);\n    const o = this.serializeAddressTableLookups(), i = Array();\n    zt(i, this.addressTableLookups.length);\n    const c = D.struct([D.u8(\"prefix\"), D.struct([D.u8(\"numRequiredSignatures\"), D.u8(\"numReadonlySignedAccounts\"), D.u8(\"numReadonlyUnsignedAccounts\")], \"header\"), D.blob(e.length, \"staticAccountKeysLength\"), D.seq(tt(), this.staticAccountKeys.length, \"staticAccountKeys\"), tt(\"recentBlockhash\"), D.blob(n.length, \"instructionsLength\"), D.blob(r.length, \"serializedInstructions\"), D.blob(i.length, \"addressTableLookupsLength\"), D.blob(o.length, \"serializedAddressTableLookups\")]), f = new Uint8Array(Bn), x = c.encode({\n      prefix: 128,\n      header: this.header,\n      staticAccountKeysLength: new Uint8Array(e),\n      staticAccountKeys: this.staticAccountKeys.map((b) => b.toBytes()),\n      recentBlockhash: Nt.decode(this.recentBlockhash),\n      instructionsLength: new Uint8Array(n),\n      serializedInstructions: r,\n      addressTableLookupsLength: new Uint8Array(i),\n      serializedAddressTableLookups: o\n    }, f);\n    return f.slice(0, x);\n  }\n  serializeInstructions() {\n    let e = 0;\n    const r = new Uint8Array(Bn);\n    for (const n of this.compiledInstructions) {\n      const o = Array();\n      zt(o, n.accountKeyIndexes.length);\n      const i = Array();\n      zt(i, n.data.length);\n      const c = D.struct([D.u8(\"programIdIndex\"), D.blob(o.length, \"encodedAccountKeyIndexesLength\"), D.seq(D.u8(), n.accountKeyIndexes.length, \"accountKeyIndexes\"), D.blob(i.length, \"encodedDataLength\"), D.blob(n.data.length, \"data\")]);\n      e += c.encode({\n        programIdIndex: n.programIdIndex,\n        encodedAccountKeyIndexesLength: new Uint8Array(o),\n        accountKeyIndexes: n.accountKeyIndexes,\n        encodedDataLength: new Uint8Array(i),\n        data: n.data\n      }, r, e);\n    }\n    return r.slice(0, e);\n  }\n  serializeAddressTableLookups() {\n    let e = 0;\n    const r = new Uint8Array(Bn);\n    for (const n of this.addressTableLookups) {\n      const o = Array();\n      zt(o, n.writableIndexes.length);\n      const i = Array();\n      zt(i, n.readonlyIndexes.length);\n      const c = D.struct([tt(\"accountKey\"), D.blob(o.length, \"encodedWritableIndexesLength\"), D.seq(D.u8(), n.writableIndexes.length, \"writableIndexes\"), D.blob(i.length, \"encodedReadonlyIndexesLength\"), D.seq(D.u8(), n.readonlyIndexes.length, \"readonlyIndexes\")]);\n      e += c.encode({\n        accountKey: n.accountKey.toBytes(),\n        encodedWritableIndexesLength: new Uint8Array(o),\n        writableIndexes: n.writableIndexes,\n        encodedReadonlyIndexesLength: new Uint8Array(i),\n        readonlyIndexes: n.readonlyIndexes\n      }, r, e);\n    }\n    return r.slice(0, e);\n  }\n  static deserialize(e) {\n    let r = [...e];\n    const n = yr(r), o = n & pa;\n    bt(n !== o, \"Expected versioned message but received legacy message\");\n    const i = o;\n    bt(i === 0, `Expected versioned message with version 0 but found version ${i}`);\n    const c = {\n      numRequiredSignatures: yr(r),\n      numReadonlySignedAccounts: yr(r),\n      numReadonlyUnsignedAccounts: yr(r)\n    }, f = [], v = $t(r);\n    for (let P = 0; P < v; P++)\n      f.push(new Re(qt(r, 0, Rr)));\n    const x = Nt.encode(qt(r, 0, Rr)), b = $t(r), S = [];\n    for (let P = 0; P < b; P++) {\n      const B = yr(r), R = $t(r), z = qt(r, 0, R), K = $t(r), Z = new Uint8Array(qt(r, 0, K));\n      S.push({\n        programIdIndex: B,\n        accountKeyIndexes: z,\n        data: Z\n      });\n    }\n    const T = $t(r), C = [];\n    for (let P = 0; P < T; P++) {\n      const B = new Re(qt(r, 0, Rr)), R = $t(r), z = qt(r, 0, R), K = $t(r), Z = qt(r, 0, K);\n      C.push({\n        accountKey: B,\n        writableIndexes: z,\n        readonlyIndexes: Z\n      });\n    }\n    return new Ms({\n      header: c,\n      staticAccountKeys: f,\n      recentBlockhash: x,\n      compiledInstructions: S,\n      addressTableLookups: C\n    });\n  }\n}\nconst ma = {\n  deserializeMessageVersion(t) {\n    const e = t[0], r = e & pa;\n    return r === e ? \"legacy\" : r;\n  },\n  deserialize: (t) => {\n    const e = ma.deserializeMessageVersion(t);\n    if (e === \"legacy\")\n      return Fn.from(t);\n    if (e === 0)\n      return Ms.deserialize(t);\n    throw new Error(`Transaction message version ${e} deserialization is not supported`);\n  }\n}, T1 = et.Buffer.alloc(_s).fill(0);\nclass du {\n  constructor(e) {\n    this.keys = void 0, this.programId = void 0, this.data = et.Buffer.alloc(0), this.programId = e.programId, this.keys = e.keys, e.data && (this.data = e.data);\n  }\n  /**\n   * @internal\n   */\n  toJSON() {\n    return {\n      keys: this.keys.map(({\n        pubkey: e,\n        isSigner: r,\n        isWritable: n\n      }) => ({\n        pubkey: e.toJSON(),\n        isSigner: r,\n        isWritable: n\n      })),\n      programId: this.programId.toJSON(),\n      data: [...this.data]\n    };\n  }\n}\nclass Cs {\n  /**\n   * The first (payer) Transaction signature\n   *\n   * @returns {Buffer | null} Buffer of payer's signature\n   */\n  get signature() {\n    return this.signatures.length > 0 ? this.signatures[0].signature : null;\n  }\n  /**\n   * The transaction fee payer\n   */\n  // Construct a transaction with a blockhash and lastValidBlockHeight\n  // Construct a transaction using a durable nonce\n  /**\n   * @deprecated `TransactionCtorFields` has been deprecated and will be removed in a future version.\n   * Please supply a `TransactionBlockhashCtor` instead.\n   */\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(e) {\n    if (this.signatures = [], this.feePayer = void 0, this.instructions = [], this.recentBlockhash = void 0, this.lastValidBlockHeight = void 0, this.nonceInfo = void 0, this.minNonceContextSlot = void 0, this._message = void 0, this._json = void 0, !!e)\n      if (e.feePayer && (this.feePayer = e.feePayer), e.signatures && (this.signatures = e.signatures), Object.prototype.hasOwnProperty.call(e, \"nonceInfo\")) {\n        const {\n          minContextSlot: r,\n          nonceInfo: n\n        } = e;\n        this.minNonceContextSlot = r, this.nonceInfo = n;\n      } else if (Object.prototype.hasOwnProperty.call(e, \"lastValidBlockHeight\")) {\n        const {\n          blockhash: r,\n          lastValidBlockHeight: n\n        } = e;\n        this.recentBlockhash = r, this.lastValidBlockHeight = n;\n      } else {\n        const {\n          recentBlockhash: r,\n          nonceInfo: n\n        } = e;\n        n && (this.nonceInfo = n), this.recentBlockhash = r;\n      }\n  }\n  /**\n   * @internal\n   */\n  toJSON() {\n    return {\n      recentBlockhash: this.recentBlockhash || null,\n      feePayer: this.feePayer ? this.feePayer.toJSON() : null,\n      nonceInfo: this.nonceInfo ? {\n        nonce: this.nonceInfo.nonce,\n        nonceInstruction: this.nonceInfo.nonceInstruction.toJSON()\n      } : null,\n      instructions: this.instructions.map((e) => e.toJSON()),\n      signers: this.signatures.map(({\n        publicKey: e\n      }) => e.toJSON())\n    };\n  }\n  /**\n   * Add one or more instructions to this Transaction\n   *\n   * @param {Array< Transaction | TransactionInstruction | TransactionInstructionCtorFields >} items - Instructions to add to the Transaction\n   */\n  add(...e) {\n    if (e.length === 0)\n      throw new Error(\"No instructions\");\n    return e.forEach((r) => {\n      \"instructions\" in r ? this.instructions = this.instructions.concat(r.instructions) : \"data\" in r && \"programId\" in r && \"keys\" in r ? this.instructions.push(r) : this.instructions.push(new du(r));\n    }), this;\n  }\n  /**\n   * Compile transaction data\n   */\n  compileMessage() {\n    if (this._message && JSON.stringify(this.toJSON()) === JSON.stringify(this._json))\n      return this._message;\n    let e, r;\n    if (this.nonceInfo ? (e = this.nonceInfo.nonce, this.instructions[0] != this.nonceInfo.nonceInstruction ? r = [this.nonceInfo.nonceInstruction, ...this.instructions] : r = this.instructions) : (e = this.recentBlockhash, r = this.instructions), !e)\n      throw new Error(\"Transaction recentBlockhash required\");\n    r.length < 1 && console.warn(\"No instructions provided\");\n    let n;\n    if (this.feePayer)\n      n = this.feePayer;\n    else if (this.signatures.length > 0 && this.signatures[0].publicKey)\n      n = this.signatures[0].publicKey;\n    else\n      throw new Error(\"Transaction fee payer required\");\n    for (let B = 0; B < r.length; B++)\n      if (r[B].programId === void 0)\n        throw new Error(`Transaction instruction index ${B} has undefined program id`);\n    const o = [], i = [];\n    r.forEach((B) => {\n      B.keys.forEach((z) => {\n        i.push({\n          ...z\n        });\n      });\n      const R = B.programId.toString();\n      o.includes(R) || o.push(R);\n    }), o.forEach((B) => {\n      i.push({\n        pubkey: new Re(B),\n        isSigner: !1,\n        isWritable: !1\n      });\n    });\n    const c = [];\n    i.forEach((B) => {\n      const R = B.pubkey.toString(), z = c.findIndex((K) => K.pubkey.toString() === R);\n      z > -1 ? (c[z].isWritable = c[z].isWritable || B.isWritable, c[z].isSigner = c[z].isSigner || B.isSigner) : c.push(B);\n    }), c.sort(function(B, R) {\n      if (B.isSigner !== R.isSigner)\n        return B.isSigner ? -1 : 1;\n      if (B.isWritable !== R.isWritable)\n        return B.isWritable ? -1 : 1;\n      const z = {\n        localeMatcher: \"best fit\",\n        usage: \"sort\",\n        sensitivity: \"variant\",\n        ignorePunctuation: !1,\n        numeric: !1,\n        caseFirst: \"lower\"\n      };\n      return B.pubkey.toBase58().localeCompare(R.pubkey.toBase58(), \"en\", z);\n    });\n    const f = c.findIndex((B) => B.pubkey.equals(n));\n    if (f > -1) {\n      const [B] = c.splice(f, 1);\n      B.isSigner = !0, B.isWritable = !0, c.unshift(B);\n    } else\n      c.unshift({\n        pubkey: n,\n        isSigner: !0,\n        isWritable: !0\n      });\n    for (const B of this.signatures) {\n      const R = c.findIndex((z) => z.pubkey.equals(B.publicKey));\n      if (R > -1)\n        c[R].isSigner || (c[R].isSigner = !0, console.warn(\"Transaction references a signature that is unnecessary, only the fee payer and instruction signer accounts should sign a transaction. This behavior is deprecated and will throw an error in the next major version release.\"));\n      else\n        throw new Error(`unknown signer: ${B.publicKey.toString()}`);\n    }\n    let v = 0, x = 0, b = 0;\n    const S = [], T = [];\n    c.forEach(({\n      pubkey: B,\n      isSigner: R,\n      isWritable: z\n    }) => {\n      R ? (S.push(B.toString()), v += 1, z || (x += 1)) : (T.push(B.toString()), z || (b += 1));\n    });\n    const C = S.concat(T), P = r.map((B) => {\n      const {\n        data: R,\n        programId: z\n      } = B;\n      return {\n        programIdIndex: C.indexOf(z.toString()),\n        accounts: B.keys.map((K) => C.indexOf(K.pubkey.toString())),\n        data: Nt.encode(R)\n      };\n    });\n    return P.forEach((B) => {\n      bt(B.programIdIndex >= 0), B.accounts.forEach((R) => bt(R >= 0));\n    }), new Fn({\n      header: {\n        numRequiredSignatures: v,\n        numReadonlySignedAccounts: x,\n        numReadonlyUnsignedAccounts: b\n      },\n      accountKeys: C,\n      recentBlockhash: e,\n      instructions: P\n    });\n  }\n  /**\n   * @internal\n   */\n  _compile() {\n    const e = this.compileMessage(), r = e.accountKeys.slice(0, e.header.numRequiredSignatures);\n    return this.signatures.length === r.length && this.signatures.every((o, i) => r[i].equals(o.publicKey)) || (this.signatures = r.map((n) => ({\n      signature: null,\n      publicKey: n\n    }))), e;\n  }\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage() {\n    return this._compile().serialize();\n  }\n  /**\n   * Get the estimated fee associated with a transaction\n   *\n   * @param {Connection} connection Connection to RPC Endpoint.\n   *\n   * @returns {Promise<number | null>} The estimated fee for the transaction\n   */\n  async getEstimatedFee(e) {\n    return (await e.getFeeForMessage(this.compileMessage())).value;\n  }\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners(...e) {\n    if (e.length === 0)\n      throw new Error(\"No signers\");\n    const r = /* @__PURE__ */ new Set();\n    this.signatures = e.filter((n) => {\n      const o = n.toString();\n      return r.has(o) ? !1 : (r.add(o), !0);\n    }).map((n) => ({\n      signature: null,\n      publicKey: n\n    }));\n  }\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   *\n   * @param {Array<Signer>} signers Array of signers that will sign the transaction\n   */\n  sign(...e) {\n    if (e.length === 0)\n      throw new Error(\"No signers\");\n    const r = /* @__PURE__ */ new Set(), n = [];\n    for (const i of e) {\n      const c = i.publicKey.toString();\n      r.has(c) || (r.add(c), n.push(i));\n    }\n    this.signatures = n.map((i) => ({\n      signature: null,\n      publicKey: i.publicKey\n    }));\n    const o = this._compile();\n    this._partialSign(o, ...n);\n  }\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   *\n   * @param {Array<Signer>} signers Array of signers that will sign the transaction\n   */\n  partialSign(...e) {\n    if (e.length === 0)\n      throw new Error(\"No signers\");\n    const r = /* @__PURE__ */ new Set(), n = [];\n    for (const i of e) {\n      const c = i.publicKey.toString();\n      r.has(c) || (r.add(c), n.push(i));\n    }\n    const o = this._compile();\n    this._partialSign(o, ...n);\n  }\n  /**\n   * @internal\n   */\n  _partialSign(e, ...r) {\n    const n = e.serialize();\n    r.forEach((o) => {\n      const i = Vc(n, o.secretKey);\n      this._addSignature(o.publicKey, da(i));\n    });\n  }\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * @param {PublicKey} pubkey Public key that will be added to the transaction.\n   * @param {Buffer} signature An externally created signature to add to the transaction.\n   */\n  addSignature(e, r) {\n    this._compile(), this._addSignature(e, r);\n  }\n  /**\n   * @internal\n   */\n  _addSignature(e, r) {\n    bt(r.length === 64);\n    const n = this.signatures.findIndex((o) => e.equals(o.publicKey));\n    if (n < 0)\n      throw new Error(`unknown signer: ${e.toString()}`);\n    this.signatures[n].signature = et.Buffer.from(r);\n  }\n  /**\n   * Verify signatures of a Transaction\n   * Optional parameter specifies if we're expecting a fully signed Transaction or a partially signed one.\n   * If no boolean is provided, we expect a fully signed Transaction by default.\n   *\n   * @param {boolean} [requireAllSignatures=true] Require a fully signed Transaction\n   */\n  verifySignatures(e = !0) {\n    return !this._getMessageSignednessErrors(this.serializeMessage(), e);\n  }\n  /**\n   * @internal\n   */\n  _getMessageSignednessErrors(e, r) {\n    const n = {};\n    for (const {\n      signature: o,\n      publicKey: i\n    } of this.signatures)\n      o === null ? r && (n.missing || (n.missing = [])).push(i) : E1(o, e, i.toBytes()) || (n.invalid || (n.invalid = [])).push(i);\n    return n.invalid || n.missing ? n : void 0;\n  }\n  /**\n   * Serialize the Transaction in the wire format.\n   *\n   * @param {Buffer} [config] Config of transaction.\n   *\n   * @returns {Buffer} Signature of transaction in wire format.\n   */\n  serialize(e) {\n    const {\n      requireAllSignatures: r,\n      verifySignatures: n\n    } = Object.assign({\n      requireAllSignatures: !0,\n      verifySignatures: !0\n    }, e), o = this.serializeMessage();\n    if (n) {\n      const i = this._getMessageSignednessErrors(o, r);\n      if (i) {\n        let c = \"Signature verification failed.\";\n        throw i.invalid && (c += `\nInvalid signature for public key${i.invalid.length === 1 ? \"\" : \"(s)\"} [\\`${i.invalid.map((f) => f.toBase58()).join(\"`, `\")}\\`].`), i.missing && (c += `\nMissing signature for public key${i.missing.length === 1 ? \"\" : \"(s)\"} [\\`${i.missing.map((f) => f.toBase58()).join(\"`, `\")}\\`].`), new Error(c);\n      }\n    }\n    return this._serialize(o);\n  }\n  /**\n   * @internal\n   */\n  _serialize(e) {\n    const {\n      signatures: r\n    } = this, n = [];\n    zt(n, r.length);\n    const o = n.length + r.length * 64 + e.length, i = et.Buffer.alloc(o);\n    return bt(r.length < 256), et.Buffer.from(n).copy(i, 0), r.forEach(({\n      signature: c\n    }, f) => {\n      c !== null && (bt(c.length === 64, \"signature has invalid length\"), et.Buffer.from(c).copy(i, n.length + f * 64));\n    }), e.copy(i, n.length + r.length * 64), bt(i.length <= Bn, `Transaction too large: ${i.length} > ${Bn}`), i;\n  }\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get keys() {\n    return bt(this.instructions.length === 1), this.instructions[0].keys.map((e) => e.pubkey);\n  }\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get programId() {\n    return bt(this.instructions.length === 1), this.instructions[0].programId;\n  }\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get data() {\n    return bt(this.instructions.length === 1), this.instructions[0].data;\n  }\n  /**\n   * Parse a wire transaction into a Transaction object.\n   *\n   * @param {Buffer | Uint8Array | Array<number>} buffer Signature of wire Transaction\n   *\n   * @returns {Transaction} Transaction associated with the signature\n   */\n  static from(e) {\n    let r = [...e];\n    const n = $t(r);\n    let o = [];\n    for (let i = 0; i < n; i++) {\n      const c = qt(r, 0, _s);\n      o.push(Nt.encode(et.Buffer.from(c)));\n    }\n    return Cs.populate(Fn.from(r), o);\n  }\n  /**\n   * Populate Transaction object from message and signatures\n   *\n   * @param {Message} message Message of transaction\n   * @param {Array<string>} signatures List of signatures to assign to the transaction\n   *\n   * @returns {Transaction} The populated Transaction\n   */\n  static populate(e, r = []) {\n    const n = new Cs();\n    return n.recentBlockhash = e.recentBlockhash, e.header.numRequiredSignatures > 0 && (n.feePayer = e.accountKeys[0]), r.forEach((o, i) => {\n      const c = {\n        signature: o == Nt.encode(T1) ? null : Nt.decode(o),\n        publicKey: e.accountKeys[i]\n      };\n      n.signatures.push(c);\n    }), e.instructions.forEach((o) => {\n      const i = o.accounts.map((c) => {\n        const f = e.accountKeys[c];\n        return {\n          pubkey: f,\n          isSigner: n.signatures.some((v) => v.publicKey.toString() === f.toString()) || e.isAccountSigner(c),\n          isWritable: e.isAccountWritable(c)\n        };\n      });\n      n.instructions.push(new du({\n        keys: i,\n        programId: e.accountKeys[o.programIdIndex],\n        data: Nt.decode(o.data)\n      }));\n    }), n._message = e, n._json = n.toJSON(), n;\n  }\n}\nclass ga {\n  get version() {\n    return this.message.version;\n  }\n  constructor(e, r) {\n    if (this.signatures = void 0, this.message = void 0, r !== void 0)\n      bt(r.length === e.header.numRequiredSignatures, \"Expected signatures length to be equal to the number of required signatures\"), this.signatures = r;\n    else {\n      const n = [];\n      for (let o = 0; o < e.header.numRequiredSignatures; o++)\n        n.push(new Uint8Array(_s));\n      this.signatures = n;\n    }\n    this.message = e;\n  }\n  serialize() {\n    const e = this.message.serialize(), r = Array();\n    zt(r, this.signatures.length);\n    const n = D.struct([D.blob(r.length, \"encodedSignaturesLength\"), D.seq(A1(), this.signatures.length, \"signatures\"), D.blob(e.length, \"serializedMessage\")]), o = new Uint8Array(2048), i = n.encode({\n      encodedSignaturesLength: new Uint8Array(r),\n      signatures: this.signatures,\n      serializedMessage: e\n    }, o);\n    return o.slice(0, i);\n  }\n  static deserialize(e) {\n    let r = [...e];\n    const n = [], o = $t(r);\n    for (let c = 0; c < o; c++)\n      n.push(new Uint8Array(qt(r, 0, _s)));\n    const i = ma.deserialize(new Uint8Array(r));\n    return new ga(i, n);\n  }\n  sign(e) {\n    const r = this.message.serialize(), n = this.message.staticAccountKeys.slice(0, this.message.header.numRequiredSignatures);\n    for (const o of e) {\n      const i = n.findIndex((c) => c.equals(o.publicKey));\n      bt(i >= 0, `Cannot sign with non signer key ${o.publicKey.toBase58()}`), this.signatures[i] = Vc(r, o.secretKey);\n    }\n  }\n  addSignature(e, r) {\n    bt(r.byteLength === 64, \"Signature must be 64 bytes long\");\n    const o = this.message.staticAccountKeys.slice(0, this.message.header.numRequiredSignatures).findIndex((i) => i.equals(e));\n    bt(o >= 0, `Can not add signature; \\`${e.toBase58()}\\` is not required to sign this transaction`), this.signatures[o] = r;\n  }\n}\nnew Re(\"SysvarC1ock11111111111111111111111111111111\");\nnew Re(\"SysvarEpochSchedu1e111111111111111111111111\");\nnew Re(\"Sysvar1nstructions1111111111111111111111111\");\nnew Re(\"SysvarRecentB1ockHashes11111111111111111111\");\nnew Re(\"SysvarRent111111111111111111111111111111111\");\nnew Re(\"SysvarRewards111111111111111111111111111111\");\nnew Re(\"SysvarS1otHashes111111111111111111111111111\");\nnew Re(\"SysvarS1otHistory11111111111111111111111111\");\nnew Re(\"SysvarStakeHistory1111111111111111111111111\");\nconst L1 = D.nu64(\"lamportsPerSignature\"), O1 = D.struct([D.u32(\"version\"), D.u32(\"state\"), tt(\"authorizedPubkey\"), tt(\"nonce\"), D.struct([L1], \"feeCalculator\")]);\nO1.span;\nfunction Pn(t) {\n  const e = D.blob(8, t), r = e.decode.bind(e), n = e.encode.bind(e), o = e, i = Rd();\n  return o.decode = (c, f) => {\n    const v = r(c, f);\n    return i.decode(v);\n  }, o.encode = (c, f, v) => {\n    const x = i.encode(c);\n    return n(x, f, v);\n  }, o;\n}\nObject.freeze({\n  Create: {\n    index: 0,\n    layout: D.struct([D.u32(\"instruction\"), D.ns64(\"lamports\"), D.ns64(\"space\"), tt(\"programId\")])\n  },\n  Assign: {\n    index: 1,\n    layout: D.struct([D.u32(\"instruction\"), tt(\"programId\")])\n  },\n  Transfer: {\n    index: 2,\n    layout: D.struct([D.u32(\"instruction\"), Pn(\"lamports\")])\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: D.struct([D.u32(\"instruction\"), tt(\"base\"), An(\"seed\"), D.ns64(\"lamports\"), D.ns64(\"space\"), tt(\"programId\")])\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: D.struct([D.u32(\"instruction\")])\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: D.struct([D.u32(\"instruction\"), D.ns64(\"lamports\")])\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: D.struct([D.u32(\"instruction\"), tt(\"authorized\")])\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: D.struct([D.u32(\"instruction\"), tt(\"authorized\")])\n  },\n  Allocate: {\n    index: 8,\n    layout: D.struct([D.u32(\"instruction\"), D.ns64(\"space\")])\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: D.struct([D.u32(\"instruction\"), tt(\"base\"), An(\"seed\"), D.ns64(\"space\"), tt(\"programId\")])\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: D.struct([D.u32(\"instruction\"), tt(\"base\"), An(\"seed\"), tt(\"programId\")])\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: D.struct([D.u32(\"instruction\"), Pn(\"lamports\"), An(\"seed\"), tt(\"programId\")])\n  },\n  UpgradeNonceAccount: {\n    index: 12,\n    layout: D.struct([D.u32(\"instruction\")])\n  }\n});\nnew Re(\"11111111111111111111111111111111\");\nnew Re(\"BPFLoader2111111111111111111111111111111111\");\nD.struct([\n  D.u32(\"typeIndex\"),\n  Pn(\"deactivationSlot\"),\n  D.nu64(\"lastExtendedSlot\"),\n  D.u8(\"lastExtendedStartIndex\"),\n  D.u8(),\n  // option\n  D.seq(tt(), D.offset(D.u8(), -1), \"authority\")\n]);\nconst gt = $i(fa(Re), ie(), (t) => new Re(t)), Wc = ha([ie(), dt(\"base64\")]), ya = $i(fa(et.Buffer), Wc, (t) => et.Buffer.from(t[0], \"base64\"));\nfunction Gc(t) {\n  return Ut([te({\n    jsonrpc: dt(\"2.0\"),\n    id: ie(),\n    result: t\n  }), te({\n    jsonrpc: dt(\"2.0\"),\n    id: ie(),\n    error: te({\n      code: zn(),\n      message: ie(),\n      data: Ee(Fd())\n    })\n  })]);\n}\nconst N1 = Gc(zn());\nfunction lt(t) {\n  return $i(Gc(t), N1, (e) => \"error\" in e ? e : {\n    ...e,\n    result: xi(e.result, t)\n  });\n}\nfunction Xt(t) {\n  return lt(te({\n    context: te({\n      slot: J()\n    }),\n    value: t\n  }));\n}\nfunction zs(t) {\n  return te({\n    context: te({\n      slot: J()\n    }),\n    value: t\n  });\n}\nconst j1 = te({\n  foundation: J(),\n  foundationTerm: J(),\n  initial: J(),\n  taper: J(),\n  terminal: J()\n});\nlt(fe(he(te({\n  epoch: J(),\n  effectiveSlot: J(),\n  amount: J(),\n  postBalance: J(),\n  commission: Ee(he(J()))\n}))));\nconst U1 = fe(te({\n  slot: J(),\n  prioritizationFee: J()\n})), F1 = te({\n  total: J(),\n  validator: J(),\n  foundation: J(),\n  epoch: J()\n}), P1 = te({\n  epoch: J(),\n  slotIndex: J(),\n  slotsInEpoch: J(),\n  absoluteSlot: J(),\n  blockHeight: Ee(J()),\n  transactionCount: Ee(J())\n}), D1 = te({\n  slotsPerEpoch: J(),\n  leaderScheduleSlotOffset: J(),\n  warmup: ur(),\n  firstNormalEpoch: J(),\n  firstNormalSlot: J()\n}), $1 = Oc(ie(), fe(J())), dn = he(Ut([te({}), ie()])), z1 = te({\n  err: dn\n}), q1 = dt(\"receivedSignature\");\nte({\n  \"solana-core\": ie(),\n  \"feature-set\": Ee(J())\n});\nconst Z1 = te({\n  program: ie(),\n  programId: gt,\n  parsed: zn()\n}), V1 = te({\n  programId: gt,\n  accounts: fe(gt),\n  data: ie()\n});\nXt(te({\n  err: he(Ut([te({}), ie()])),\n  logs: he(fe(ie())),\n  accounts: Ee(he(fe(he(te({\n    executable: ur(),\n    owner: ie(),\n    lamports: J(),\n    data: fe(ie()),\n    rentEpoch: Ee(J())\n  }))))),\n  unitsConsumed: Ee(J()),\n  returnData: Ee(he(te({\n    programId: ie(),\n    data: ha([ie(), dt(\"base64\")])\n  }))),\n  innerInstructions: Ee(he(fe(te({\n    index: J(),\n    instructions: fe(Ut([Z1, V1]))\n  }))))\n}));\nXt(te({\n  byIdentity: Oc(ie(), fe(J())),\n  range: te({\n    firstSlot: J(),\n    lastSlot: J()\n  })\n}));\nlt(j1);\nlt(F1);\nlt(U1);\nlt(P1);\nlt(D1);\nlt($1);\nlt(J());\nXt(te({\n  total: J(),\n  circulating: J(),\n  nonCirculating: J(),\n  nonCirculatingAccounts: fe(gt)\n}));\nconst H1 = te({\n  amount: ie(),\n  uiAmount: he(J()),\n  decimals: J(),\n  uiAmountString: Ee(ie())\n});\nXt(fe(te({\n  address: gt,\n  amount: ie(),\n  uiAmount: he(J()),\n  decimals: J(),\n  uiAmountString: Ee(ie())\n})));\nXt(fe(te({\n  pubkey: gt,\n  account: te({\n    executable: ur(),\n    owner: gt,\n    lamports: J(),\n    data: ya,\n    rentEpoch: J()\n  })\n})));\nconst jo = te({\n  program: ie(),\n  parsed: zn(),\n  space: J()\n});\nXt(fe(te({\n  pubkey: gt,\n  account: te({\n    executable: ur(),\n    owner: gt,\n    lamports: J(),\n    data: jo,\n    rentEpoch: J()\n  })\n})));\nXt(fe(te({\n  lamports: J(),\n  address: gt\n})));\nconst va = te({\n  executable: ur(),\n  owner: gt,\n  lamports: J(),\n  data: ya,\n  rentEpoch: J()\n});\nte({\n  pubkey: gt,\n  account: va\n});\nconst K1 = $i(Ut([fa(et.Buffer), jo]), Ut([Wc, jo]), (t) => Array.isArray(t) ? xi(t, ya) : t), W1 = te({\n  executable: ur(),\n  owner: gt,\n  lamports: J(),\n  data: K1,\n  rentEpoch: J()\n});\nte({\n  pubkey: gt,\n  account: W1\n});\nte({\n  state: Ut([dt(\"active\"), dt(\"inactive\"), dt(\"activating\"), dt(\"deactivating\")]),\n  active: J(),\n  inactive: J()\n});\nlt(fe(te({\n  signature: ie(),\n  slot: J(),\n  err: dn,\n  memo: he(ie()),\n  blockTime: Ee(he(J()))\n})));\nlt(fe(te({\n  signature: ie(),\n  slot: J(),\n  err: dn,\n  memo: he(ie()),\n  blockTime: Ee(he(J()))\n})));\nte({\n  subscription: J(),\n  result: zs(va)\n});\nconst G1 = te({\n  pubkey: gt,\n  account: va\n});\nte({\n  subscription: J(),\n  result: zs(G1)\n});\nconst Y1 = te({\n  parent: J(),\n  slot: J(),\n  root: J()\n});\nte({\n  subscription: J(),\n  result: Y1\n});\nconst J1 = Ut([te({\n  type: Ut([dt(\"firstShredReceived\"), dt(\"completed\"), dt(\"optimisticConfirmation\"), dt(\"root\")]),\n  slot: J(),\n  timestamp: J()\n}), te({\n  type: dt(\"createdBank\"),\n  parent: J(),\n  slot: J(),\n  timestamp: J()\n}), te({\n  type: dt(\"frozen\"),\n  slot: J(),\n  timestamp: J(),\n  stats: te({\n    numTransactionEntries: J(),\n    numSuccessfulTransactions: J(),\n    numFailedTransactions: J(),\n    maxTransactionsPerEntry: J()\n  })\n}), te({\n  type: dt(\"dead\"),\n  slot: J(),\n  timestamp: J(),\n  err: ie()\n})]);\nte({\n  subscription: J(),\n  result: J1\n});\nte({\n  subscription: J(),\n  result: zs(Ut([z1, q1]))\n});\nte({\n  subscription: J(),\n  result: J()\n});\nte({\n  pubkey: ie(),\n  gossip: he(ie()),\n  tpu: he(ie()),\n  rpc: he(ie()),\n  version: he(ie())\n});\nconst pu = te({\n  votePubkey: ie(),\n  nodePubkey: ie(),\n  activatedStake: J(),\n  epochVoteAccount: ur(),\n  epochCredits: fe(ha([J(), J(), J()])),\n  commission: J(),\n  lastVote: J(),\n  rootSlot: he(J())\n});\nlt(te({\n  current: fe(pu),\n  delinquent: fe(pu)\n}));\nconst X1 = Ut([dt(\"processed\"), dt(\"confirmed\"), dt(\"finalized\")]), Q1 = te({\n  slot: J(),\n  confirmations: he(J()),\n  err: dn,\n  confirmationStatus: Ee(X1)\n});\nXt(fe(he(Q1)));\nlt(J());\nconst Yc = te({\n  accountKey: gt,\n  writableIndexes: fe(J()),\n  readonlyIndexes: fe(J())\n}), wa = te({\n  signatures: fe(ie()),\n  message: te({\n    accountKeys: fe(ie()),\n    header: te({\n      numRequiredSignatures: J(),\n      numReadonlySignedAccounts: J(),\n      numReadonlyUnsignedAccounts: J()\n    }),\n    instructions: fe(te({\n      accounts: fe(J()),\n      data: ie(),\n      programIdIndex: J()\n    })),\n    recentBlockhash: ie(),\n    addressTableLookups: Ee(fe(Yc))\n  })\n}), Jc = te({\n  pubkey: gt,\n  signer: ur(),\n  writable: ur(),\n  source: Ee(Ut([dt(\"transaction\"), dt(\"lookupTable\")]))\n}), Xc = te({\n  accountKeys: fe(Jc),\n  signatures: fe(ie())\n}), Qc = te({\n  parsed: zn(),\n  program: ie(),\n  programId: gt\n}), el = te({\n  accounts: fe(gt),\n  data: ie(),\n  programId: gt\n}), ep = Ut([el, Qc]), tp = Ut([te({\n  parsed: zn(),\n  program: ie(),\n  programId: ie()\n}), te({\n  accounts: fe(ie()),\n  data: ie(),\n  programId: ie()\n})]), tl = $i(ep, tp, (t) => \"accounts\" in t ? xi(t, el) : xi(t, Qc)), rl = te({\n  signatures: fe(ie()),\n  message: te({\n    accountKeys: fe(Jc),\n    instructions: fe(tl),\n    recentBlockhash: ie(),\n    addressTableLookups: Ee(he(fe(Yc)))\n  })\n}), Ss = te({\n  accountIndex: J(),\n  mint: ie(),\n  owner: Ee(ie()),\n  programId: Ee(ie()),\n  uiTokenAmount: H1\n}), nl = te({\n  writable: fe(gt),\n  readonly: fe(gt)\n}), qs = te({\n  err: dn,\n  fee: J(),\n  innerInstructions: Ee(he(fe(te({\n    index: J(),\n    instructions: fe(te({\n      accounts: fe(J()),\n      data: ie(),\n      programIdIndex: J()\n    }))\n  })))),\n  preBalances: fe(J()),\n  postBalances: fe(J()),\n  logMessages: Ee(he(fe(ie()))),\n  preTokenBalances: Ee(he(fe(Ss))),\n  postTokenBalances: Ee(he(fe(Ss))),\n  loadedAddresses: Ee(nl),\n  computeUnitsConsumed: Ee(J())\n}), xa = te({\n  err: dn,\n  fee: J(),\n  innerInstructions: Ee(he(fe(te({\n    index: J(),\n    instructions: fe(tl)\n  })))),\n  preBalances: fe(J()),\n  postBalances: fe(J()),\n  logMessages: Ee(he(fe(ie()))),\n  preTokenBalances: Ee(he(fe(Ss))),\n  postTokenBalances: Ee(he(fe(Ss))),\n  loadedAddresses: Ee(nl),\n  computeUnitsConsumed: Ee(J())\n}), qn = Ut([dt(0), dt(\"legacy\")]), pn = te({\n  pubkey: ie(),\n  lamports: J(),\n  postBalance: he(J()),\n  rewardType: he(ie()),\n  commission: Ee(he(J()))\n});\nlt(he(te({\n  blockhash: ie(),\n  previousBlockhash: ie(),\n  parentSlot: J(),\n  transactions: fe(te({\n    transaction: wa,\n    meta: he(qs),\n    version: Ee(qn)\n  })),\n  rewards: Ee(fe(pn)),\n  blockTime: he(J()),\n  blockHeight: he(J())\n})));\nlt(he(te({\n  blockhash: ie(),\n  previousBlockhash: ie(),\n  parentSlot: J(),\n  rewards: Ee(fe(pn)),\n  blockTime: he(J()),\n  blockHeight: he(J())\n})));\nlt(he(te({\n  blockhash: ie(),\n  previousBlockhash: ie(),\n  parentSlot: J(),\n  transactions: fe(te({\n    transaction: Xc,\n    meta: he(qs),\n    version: Ee(qn)\n  })),\n  rewards: Ee(fe(pn)),\n  blockTime: he(J()),\n  blockHeight: he(J())\n})));\nlt(he(te({\n  blockhash: ie(),\n  previousBlockhash: ie(),\n  parentSlot: J(),\n  transactions: fe(te({\n    transaction: rl,\n    meta: he(xa),\n    version: Ee(qn)\n  })),\n  rewards: Ee(fe(pn)),\n  blockTime: he(J()),\n  blockHeight: he(J())\n})));\nlt(he(te({\n  blockhash: ie(),\n  previousBlockhash: ie(),\n  parentSlot: J(),\n  transactions: fe(te({\n    transaction: Xc,\n    meta: he(xa),\n    version: Ee(qn)\n  })),\n  rewards: Ee(fe(pn)),\n  blockTime: he(J()),\n  blockHeight: he(J())\n})));\nlt(he(te({\n  blockhash: ie(),\n  previousBlockhash: ie(),\n  parentSlot: J(),\n  rewards: Ee(fe(pn)),\n  blockTime: he(J()),\n  blockHeight: he(J())\n})));\nlt(he(te({\n  blockhash: ie(),\n  previousBlockhash: ie(),\n  parentSlot: J(),\n  transactions: fe(te({\n    transaction: wa,\n    meta: he(qs)\n  })),\n  rewards: Ee(fe(pn)),\n  blockTime: he(J())\n})));\nlt(he(te({\n  blockhash: ie(),\n  previousBlockhash: ie(),\n  parentSlot: J(),\n  signatures: fe(ie()),\n  blockTime: he(J())\n})));\nlt(he(te({\n  slot: J(),\n  meta: he(qs),\n  blockTime: Ee(he(J())),\n  transaction: wa,\n  version: Ee(qn)\n})));\nlt(he(te({\n  slot: J(),\n  transaction: rl,\n  meta: he(xa),\n  blockTime: Ee(he(J())),\n  version: Ee(qn)\n})));\nXt(te({\n  blockhash: ie(),\n  lastValidBlockHeight: J()\n}));\nXt(ur());\nconst rp = te({\n  slot: J(),\n  numTransactions: J(),\n  numSlots: J(),\n  samplePeriodSecs: J()\n});\nlt(fe(rp));\nXt(he(te({\n  feeCalculator: te({\n    lamportsPerSignature: J()\n  })\n})));\nlt(ie());\nlt(ie());\nconst np = te({\n  err: dn,\n  logs: fe(ie()),\n  signature: ie()\n});\nte({\n  result: zs(np),\n  subscription: J()\n});\nObject.freeze({\n  CreateLookupTable: {\n    index: 0,\n    layout: D.struct([D.u32(\"instruction\"), Pn(\"recentSlot\"), D.u8(\"bumpSeed\")])\n  },\n  FreezeLookupTable: {\n    index: 1,\n    layout: D.struct([D.u32(\"instruction\")])\n  },\n  ExtendLookupTable: {\n    index: 2,\n    layout: D.struct([D.u32(\"instruction\"), Pn(), D.seq(tt(), D.offset(D.u32(), -8), \"addresses\")])\n  },\n  DeactivateLookupTable: {\n    index: 3,\n    layout: D.struct([D.u32(\"instruction\")])\n  },\n  CloseLookupTable: {\n    index: 4,\n    layout: D.struct([D.u32(\"instruction\")])\n  }\n});\nnew Re(\"AddressLookupTab1e1111111111111111111111111\");\nObject.freeze({\n  RequestUnits: {\n    index: 0,\n    layout: D.struct([D.u8(\"instruction\"), D.u32(\"units\"), D.u32(\"additionalFee\")])\n  },\n  RequestHeapFrame: {\n    index: 1,\n    layout: D.struct([D.u8(\"instruction\"), D.u32(\"bytes\")])\n  },\n  SetComputeUnitLimit: {\n    index: 2,\n    layout: D.struct([D.u8(\"instruction\"), D.u32(\"units\")])\n  },\n  SetComputeUnitPrice: {\n    index: 3,\n    layout: D.struct([D.u8(\"instruction\"), Pn(\"microLamports\")])\n  }\n});\nnew Re(\"ComputeBudget111111111111111111111111111111\");\nD.struct([D.u8(\"numSignatures\"), D.u8(\"padding\"), D.u16(\"signatureOffset\"), D.u16(\"signatureInstructionIndex\"), D.u16(\"publicKeyOffset\"), D.u16(\"publicKeyInstructionIndex\"), D.u16(\"messageDataOffset\"), D.u16(\"messageDataSize\"), D.u16(\"messageInstructionIndex\")]);\nnew Re(\"Ed25519SigVerify111111111111111111111111111\");\n_1.utils.isValidPrivateKey;\nD.struct([D.u8(\"numSignatures\"), D.u16(\"signatureOffset\"), D.u8(\"signatureInstructionIndex\"), D.u16(\"ethAddressOffset\"), D.u8(\"ethAddressInstructionIndex\"), D.u16(\"messageDataOffset\"), D.u16(\"messageDataSize\"), D.u8(\"messageInstructionIndex\"), D.blob(20, \"ethAddress\"), D.blob(64, \"signature\"), D.u8(\"recoveryId\")]);\nnew Re(\"KeccakSecp256k11111111111111111111111111111\");\nvar il;\nnew Re(\"StakeConfig11111111111111111111111111111111\");\nclass sl {\n  /**\n   * Create a new Lockup object\n   */\n  constructor(e, r, n) {\n    this.unixTimestamp = void 0, this.epoch = void 0, this.custodian = void 0, this.unixTimestamp = e, this.epoch = r, this.custodian = n;\n  }\n  /**\n   * Default, inactive Lockup value\n   */\n}\nil = sl;\nsl.default = new il(0, 0, Re.default);\nObject.freeze({\n  Initialize: {\n    index: 0,\n    layout: D.struct([D.u32(\"instruction\"), k1(), I1()])\n  },\n  Authorize: {\n    index: 1,\n    layout: D.struct([D.u32(\"instruction\"), tt(\"newAuthorized\"), D.u32(\"stakeAuthorizationType\")])\n  },\n  Delegate: {\n    index: 2,\n    layout: D.struct([D.u32(\"instruction\")])\n  },\n  Split: {\n    index: 3,\n    layout: D.struct([D.u32(\"instruction\"), D.ns64(\"lamports\")])\n  },\n  Withdraw: {\n    index: 4,\n    layout: D.struct([D.u32(\"instruction\"), D.ns64(\"lamports\")])\n  },\n  Deactivate: {\n    index: 5,\n    layout: D.struct([D.u32(\"instruction\")])\n  },\n  Merge: {\n    index: 7,\n    layout: D.struct([D.u32(\"instruction\")])\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: D.struct([D.u32(\"instruction\"), tt(\"newAuthorized\"), D.u32(\"stakeAuthorizationType\"), An(\"authoritySeed\"), tt(\"authorityOwner\")])\n  }\n});\nnew Re(\"Stake11111111111111111111111111111111111111\");\nObject.freeze({\n  InitializeAccount: {\n    index: 0,\n    layout: D.struct([D.u32(\"instruction\"), B1()])\n  },\n  Authorize: {\n    index: 1,\n    layout: D.struct([D.u32(\"instruction\"), tt(\"newAuthorized\"), D.u32(\"voteAuthorizationType\")])\n  },\n  Withdraw: {\n    index: 3,\n    layout: D.struct([D.u32(\"instruction\"), D.ns64(\"lamports\")])\n  },\n  UpdateValidatorIdentity: {\n    index: 4,\n    layout: D.struct([D.u32(\"instruction\")])\n  },\n  AuthorizeWithSeed: {\n    index: 10,\n    layout: D.struct([D.u32(\"instruction\"), R1()])\n  }\n});\nnew Re(\"Vote111111111111111111111111111111111111111\");\nnew Re(\"Va1idator1nfo111111111111111111111111111111\");\nte({\n  name: ie(),\n  website: Ee(ie()),\n  details: Ee(ie()),\n  iconUrl: Ee(ie()),\n  keybaseUsername: Ee(ie())\n});\nnew Re(\"Vote111111111111111111111111111111111111111\");\nD.struct([\n  tt(\"nodePubkey\"),\n  tt(\"authorizedWithdrawer\"),\n  D.u8(\"commission\"),\n  D.nu64(),\n  // votes.length\n  D.seq(D.struct([D.nu64(\"slot\"), D.u32(\"confirmationCount\")]), D.offset(D.u32(), -8), \"votes\"),\n  D.u8(\"rootSlotValid\"),\n  D.nu64(\"rootSlot\"),\n  D.nu64(),\n  // authorizedVoters.length\n  D.seq(D.struct([D.nu64(\"epoch\"), tt(\"authorizedVoter\")]), D.offset(D.u32(), -8), \"authorizedVoters\"),\n  D.struct([D.seq(D.struct([tt(\"authorizedPubkey\"), D.nu64(\"epochOfLastAuthorizedSwitch\"), D.nu64(\"targetEpoch\")]), 32, \"buf\"), D.nu64(\"idx\"), D.u8(\"isEmpty\")], \"priorVoters\"),\n  D.nu64(),\n  // epochCredits.length\n  D.seq(D.struct([D.nu64(\"epoch\"), D.nu64(\"credits\"), D.nu64(\"prevCredits\")]), D.offset(D.u32(), -8), \"epochCredits\"),\n  D.struct([D.nu64(\"slot\"), D.nu64(\"timestamp\")], \"lastTimestamp\")\n]);\nconst ip = (t) => ({\n  request: t,\n  signMessage: (e) => t({ method: \"signMessage\", params: { message: e } }),\n  signTransaction: (e) => t({ method: \"signTransaction\", params: { transaction: e } }),\n  signAndSendTransaction: (e) => t({\n    method: \"signAndSendTransaction\",\n    params: e\n  })\n});\nfunction mu(t) {\n  return Buffer.from(t.serialize({\n    verifySignatures: !1\n  })).toString(\"base64\");\n}\nfunction sp(t) {\n  const e = Buffer.from(t, \"base64\");\n  return ma.deserializeMessageVersion(e) === \"legacy\" ? ga.deserialize(e) : Cs.from(e);\n}\nfunction op(t) {\n  return async (r) => {\n    if (r.method === \"connect\")\n      return await t(r);\n    if (r.method === \"signMessage\")\n      return await t(r);\n    if (r.method === \"signAndSendTransaction\") {\n      const { transaction: n, options: o } = r.params, i = {\n        transaction: mu(n)\n      };\n      return await t({\n        method: \"signAndSendTransaction\",\n        params: i\n      });\n    }\n    if (r.method === \"signTransaction\") {\n      const { transaction: n } = r.params, o = {\n        transaction: mu(n)\n      }, { signedTransaction: i } = await t({\n        method: \"signTransaction\",\n        params: o\n      });\n      return { signedTransaction: sp(i) };\n    }\n  };\n}\nlet ol = class al extends Error {\n  constructor(e, r = {}) {\n    const n = (() => {\n      var i;\n      if (r.cause instanceof al) {\n        if (r.cause.details)\n          return r.cause.details;\n        if (r.cause.shortMessage)\n          return r.cause.shortMessage;\n      }\n      return r.cause && \"details\" in r.cause && typeof r.cause.details == \"string\" ? r.cause.details : (i = r.cause) != null && i.message ? r.cause.message : r.details;\n    })(), o = [\n      e || \"An error occurred.\",\n      ...r.metaMessages ? [\"\", ...r.metaMessages] : [],\n      ...n ? [\n        \"\",\n        n ? `Details: ${n}` : void 0\n      ] : []\n    ].filter((i) => typeof i == \"string\").join(`\n`);\n    super(o, r.cause ? { cause: r.cause } : void 0), this.name = \"BaseError\", this.cause = r.cause, this.details = n, this.shortMessage = e;\n  }\n};\nclass ul extends ol {\n  constructor({ status: e }) {\n    super(`Request failed with status ${e}`), this.name = \"RequestFailedError\";\n  }\n}\nclass ap extends ol {\n  constructor(e) {\n    super(e), this.name = \"InvalidToken\";\n  }\n}\nasync function up({ origin: t }) {\n  const e = await fetch(`${t}/nonce`, {\n    method: \"POST\"\n  });\n  if (!e.ok)\n    throw new ul({ status: e.status });\n  return await e.json();\n}\nasync function cp({ origin: t }, e) {\n  const r = await fetch(`${t}/verify-siwf`, {\n    method: \"POST\",\n    headers: new Headers({ \"Content-Type\": \"application/json\" }),\n    body: JSON.stringify(e)\n  });\n  if (!r.ok)\n    throw new ul({ status: r.status });\n  const n = await r.json();\n  if (n.valid === !1)\n    throw new ap(n.message ?? \"unknown\");\n  return { token: n.token };\n}\nfunction lp(t = {}) {\n  return {\n    origin: t.origin ?? \"https://auth.farcaster.xyz\"\n  };\n}\nfunction fp(t = {}) {\n  const e = lp(t);\n  return {\n    generateNonce: () => up(e),\n    verifySiwf: (r) => cp(e, r)\n  };\n}\nconst hp = \"0.1.1\";\nfunction dp() {\n  return hp;\n}\nlet pp = class Uo extends Error {\n  constructor(e, r = {}) {\n    const n = (() => {\n      var v;\n      if (r.cause instanceof Uo) {\n        if (r.cause.details)\n          return r.cause.details;\n        if (r.cause.shortMessage)\n          return r.cause.shortMessage;\n      }\n      return (v = r.cause) != null && v.message ? r.cause.message : r.details;\n    })(), o = r.cause instanceof Uo && r.cause.docsPath || r.docsPath, c = `https://oxlib.sh${o ?? \"\"}`, f = [\n      e || \"An error occurred.\",\n      ...r.metaMessages ? [\"\", ...r.metaMessages] : [],\n      ...n || o ? [\n        \"\",\n        n ? `Details: ${n}` : void 0,\n        o ? `See: ${c}` : void 0\n      ] : []\n    ].filter((v) => typeof v == \"string\").join(`\n`);\n    super(f, r.cause ? { cause: r.cause } : void 0), Object.defineProperty(this, \"details\", {\n      enumerable: !0,\n      configurable: !0,\n      writable: !0,\n      value: void 0\n    }), Object.defineProperty(this, \"docs\", {\n      enumerable: !0,\n      configurable: !0,\n      writable: !0,\n      value: void 0\n    }), Object.defineProperty(this, \"docsPath\", {\n      enumerable: !0,\n      configurable: !0,\n      writable: !0,\n      value: void 0\n    }), Object.defineProperty(this, \"shortMessage\", {\n      enumerable: !0,\n      configurable: !0,\n      writable: !0,\n      value: void 0\n    }), Object.defineProperty(this, \"cause\", {\n      enumerable: !0,\n      configurable: !0,\n      writable: !0,\n      value: void 0\n    }), Object.defineProperty(this, \"name\", {\n      enumerable: !0,\n      configurable: !0,\n      writable: !0,\n      value: \"BaseError\"\n    }), Object.defineProperty(this, \"version\", {\n      enumerable: !0,\n      configurable: !0,\n      writable: !0,\n      value: `ox@${dp()}`\n    }), this.cause = r.cause, this.details = n, this.docs = c, this.docsPath = o, this.shortMessage = e;\n  }\n  walk(e) {\n    return cl(this, e);\n  }\n};\nfunction cl(t, e) {\n  return e != null && e(t) ? t : t && typeof t == \"object\" && \"cause\" in t && t.cause ? cl(t.cause, e) : e ? null : t;\n}\nconst mp = /^(?:(?<scheme>[a-zA-Z][a-zA-Z0-9+-.]*):\\/\\/)?(?<domain>[a-zA-Z0-9+-.]*(?::[0-9]{1,5})?) (?:wants you to sign in with your Ethereum account:\\n)(?<address>0x[a-fA-F0-9]{40})\\n\\n(?:(?<statement>.*)\\n\\n)?/, gp = /(?:URI: (?<uri>.+))\\n(?:Version: (?<version>.+))\\n(?:Chain ID: (?<chainId>\\d+))\\n(?:Nonce: (?<nonce>[a-zA-Z0-9]+))\\n(?:Issued At: (?<issuedAt>.+))(?:\\nExpiration Time: (?<expirationTime>.+))?(?:\\nNot Before: (?<notBefore>.+))?(?:\\nRequest ID: (?<requestId>.+))?/;\nfunction yp(t) {\n  var S, T, C;\n  const { scheme: e, statement: r, ...n } = ((S = t.match(mp)) == null ? void 0 : S.groups) ?? {}, { chainId: o, expirationTime: i, issuedAt: c, notBefore: f, requestId: v, ...x } = ((T = t.match(gp)) == null ? void 0 : T.groups) ?? {}, b = (C = t.split(\"Resources:\")[1]) == null ? void 0 : C.split(`\n- `).slice(1);\n  return {\n    ...n,\n    ...x,\n    ...o ? { chainId: Number(o) } : {},\n    ...i ? { expirationTime: new Date(i) } : {},\n    ...c ? { issuedAt: new Date(c) } : {},\n    ...f ? { notBefore: new Date(f) } : {},\n    ...v ? { requestId: v } : {},\n    ...b ? { resources: b } : {},\n    ...e ? { scheme: e } : {},\n    ...r ? { statement: r } : {}\n  };\n}\nconst vp = ({ frameHost: t, emitter: e }) => {\n  let r, n = null;\n  return {\n    visible: !1,\n    get onback() {\n      return n;\n    },\n    set onback(o) {\n      n && e.removeListener(\"backNavigationTriggered\", n), n = o, o && e.addListener(\"backNavigationTriggered\", o);\n    },\n    async show() {\n      await t.updateBackState({\n        visible: !0\n      }), this.visible = !0;\n    },\n    async hide() {\n      await t.updateBackState({\n        visible: !1\n      }), this.visible = !1;\n    },\n    async enableWebNavigation() {\n      r = wp({\n        back: this,\n        emitter: e\n      });\n    },\n    async disableWebNavigation() {\n      r == null || r(), r = void 0;\n    }\n  };\n};\nfunction wp({ emitter: t, back: e }) {\n  const r = xp();\n  if (r)\n    return bp({ emitter: t, back: e, navigation: r });\n  if (typeof window < \"u\")\n    return _p({ emitter: t, back: e, window });\n}\nfunction xp() {\n  if (typeof window < \"u\" && window.navigation !== void 0)\n    return window.navigation;\n}\nfunction bp({ emitter: t, back: e, navigation: r }) {\n  function n() {\n    r.canGoBack ? e.show() : e.hide();\n  }\n  function o() {\n    e.visible && r.canGoBack && r.back();\n  }\n  return r.addEventListener(\"navigatesuccess\", n), t.addListener(\"backNavigationTriggered\", o), () => {\n    r.removeEventListener(\"navigatesuccess\", n), t.removeListener(\"backNavigationTriggered\", o);\n  };\n}\nfunction _p({ emitter: t, back: e, window: r }) {\n  e.show();\n  function n() {\n    e.visible && r.history.back();\n  }\n  return t.addListener(\"backNavigationTriggered\", n), () => {\n    t.removeListener(\"backNavigationTriggered\", n);\n  };\n}\nfunction ll(t, e = {}) {\n  const { raw: r = !1 } = e, n = t;\n  if (r)\n    return t;\n  if (n.error) {\n    const { code: o } = n.error, i = o === Dn.code ? Dn : o === bi.code ? bi : o === Bi.code ? Bi : o === ki.code ? ki : o === Si.code ? Si : o === Ii.code ? Ii : o === Ci.code ? Ci : o === Ri.code ? Ri : o === _i.code ? _i : o === Ei.code ? Ei : o === Mi.code ? Mi : o === Ai.code ? Ai : Pt;\n    throw new i(n.error);\n  }\n  return n.result;\n}\nclass Pt extends Error {\n  constructor(e) {\n    const { code: r, message: n, data: o } = e;\n    super(n), Object.defineProperty(this, \"name\", {\n      enumerable: !0,\n      configurable: !0,\n      writable: !0,\n      value: \"RpcResponse.BaseError\"\n    }), Object.defineProperty(this, \"code\", {\n      enumerable: !0,\n      configurable: !0,\n      writable: !0,\n      value: void 0\n    }), Object.defineProperty(this, \"data\", {\n      enumerable: !0,\n      configurable: !0,\n      writable: !0,\n      value: void 0\n    }), this.code = r, this.data = o;\n  }\n}\nclass bi extends Pt {\n  constructor(e = {}) {\n    super({\n      message: \"Missing or invalid parameters.\",\n      ...e,\n      code: bi.code\n    }), Object.defineProperty(this, \"code\", {\n      enumerable: !0,\n      configurable: !0,\n      writable: !0,\n      value: -32e3\n    }), Object.defineProperty(this, \"name\", {\n      enumerable: !0,\n      configurable: !0,\n      writable: !0,\n      value: \"RpcResponse.InvalidInputError\"\n    });\n  }\n}\nObject.defineProperty(bi, \"code\", {\n  enumerable: !0,\n  configurable: !0,\n  writable: !0,\n  value: -32e3\n});\nclass _i extends Pt {\n  constructor(e = {}) {\n    super({\n      message: \"Requested resource not found.\",\n      ...e,\n      code: _i.code\n    }), Object.defineProperty(this, \"code\", {\n      enumerable: !0,\n      configurable: !0,\n      writable: !0,\n      value: -32001\n    }), Object.defineProperty(this, \"name\", {\n      enumerable: !0,\n      configurable: !0,\n      writable: !0,\n      value: \"RpcResponse.ResourceNotFoundError\"\n    });\n  }\n}\nObject.defineProperty(_i, \"code\", {\n  enumerable: !0,\n  configurable: !0,\n  writable: !0,\n  value: -32001\n});\nclass Ei extends Pt {\n  constructor(e = {}) {\n    super({\n      message: \"Requested resource not available.\",\n      ...e,\n      code: Ei.code\n    }), Object.defineProperty(this, \"code\", {\n      enumerable: !0,\n      configurable: !0,\n      writable: !0,\n      value: -32002\n    }), Object.defineProperty(this, \"name\", {\n      enumerable: !0,\n      configurable: !0,\n      writable: !0,\n      value: \"RpcResponse.ResourceUnavailableError\"\n    });\n  }\n}\nObject.defineProperty(Ei, \"code\", {\n  enumerable: !0,\n  configurable: !0,\n  writable: !0,\n  value: -32002\n});\nclass Mi extends Pt {\n  constructor(e = {}) {\n    super({\n      message: \"Transaction creation failed.\",\n      ...e,\n      code: Mi.code\n    }), Object.defineProperty(this, \"code\", {\n      enumerable: !0,\n      configurable: !0,\n      writable: !0,\n      value: -32003\n    }), Object.defineProperty(this, \"name\", {\n      enumerable: !0,\n      configurable: !0,\n      writable: !0,\n      value: \"RpcResponse.TransactionRejectedError\"\n    });\n  }\n}\nObject.defineProperty(Mi, \"code\", {\n  enumerable: !0,\n  configurable: !0,\n  writable: !0,\n  value: -32003\n});\nclass Ci extends Pt {\n  constructor(e = {}) {\n    super({\n      message: \"Method is not implemented.\",\n      ...e,\n      code: Ci.code\n    }), Object.defineProperty(this, \"code\", {\n      enumerable: !0,\n      configurable: !0,\n      writable: !0,\n      value: -32004\n    }), Object.defineProperty(this, \"name\", {\n      enumerable: !0,\n      configurable: !0,\n      writable: !0,\n      value: \"RpcResponse.MethodNotSupportedError\"\n    });\n  }\n}\nObject.defineProperty(Ci, \"code\", {\n  enumerable: !0,\n  configurable: !0,\n  writable: !0,\n  value: -32004\n});\nclass Si extends Pt {\n  constructor(e = {}) {\n    super({\n      message: \"Rate limit exceeded.\",\n      ...e,\n      code: Si.code\n    }), Object.defineProperty(this, \"code\", {\n      enumerable: !0,\n      configurable: !0,\n      writable: !0,\n      value: -32005\n    }), Object.defineProperty(this, \"name\", {\n      enumerable: !0,\n      configurable: !0,\n      writable: !0,\n      value: \"RpcResponse.LimitExceededError\"\n    });\n  }\n}\nObject.defineProperty(Si, \"code\", {\n  enumerable: !0,\n  configurable: !0,\n  writable: !0,\n  value: -32005\n});\nclass Ai extends Pt {\n  constructor(e = {}) {\n    super({\n      message: \"JSON-RPC version not supported.\",\n      ...e,\n      code: Ai.code\n    }), Object.defineProperty(this, \"code\", {\n      enumerable: !0,\n      configurable: !0,\n      writable: !0,\n      value: -32006\n    }), Object.defineProperty(this, \"name\", {\n      enumerable: !0,\n      configurable: !0,\n      writable: !0,\n      value: \"RpcResponse.VersionNotSupportedError\"\n    });\n  }\n}\nObject.defineProperty(Ai, \"code\", {\n  enumerable: !0,\n  configurable: !0,\n  writable: !0,\n  value: -32006\n});\nclass ki extends Pt {\n  constructor(e = {}) {\n    super({\n      message: \"Input is not a valid JSON-RPC request.\",\n      ...e,\n      code: ki.code\n    }), Object.defineProperty(this, \"code\", {\n      enumerable: !0,\n      configurable: !0,\n      writable: !0,\n      value: -32600\n    }), Object.defineProperty(this, \"name\", {\n      enumerable: !0,\n      configurable: !0,\n      writable: !0,\n      value: \"RpcResponse.InvalidRequestError\"\n    });\n  }\n}\nObject.defineProperty(ki, \"code\", {\n  enumerable: !0,\n  configurable: !0,\n  writable: !0,\n  value: -32600\n});\nclass Ii extends Pt {\n  constructor(e = {}) {\n    super({\n      message: \"Method does not exist.\",\n      ...e,\n      code: Ii.code\n    }), Object.defineProperty(this, \"code\", {\n      enumerable: !0,\n      configurable: !0,\n      writable: !0,\n      value: -32601\n    }), Object.defineProperty(this, \"name\", {\n      enumerable: !0,\n      configurable: !0,\n      writable: !0,\n      value: \"RpcResponse.MethodNotFoundError\"\n    });\n  }\n}\nObject.defineProperty(Ii, \"code\", {\n  enumerable: !0,\n  configurable: !0,\n  writable: !0,\n  value: -32601\n});\nclass Bi extends Pt {\n  constructor(e = {}) {\n    super({\n      message: \"Invalid method parameters.\",\n      ...e,\n      code: Bi.code\n    }), Object.defineProperty(this, \"code\", {\n      enumerable: !0,\n      configurable: !0,\n      writable: !0,\n      value: -32602\n    }), Object.defineProperty(this, \"name\", {\n      enumerable: !0,\n      configurable: !0,\n      writable: !0,\n      value: \"RpcResponse.InvalidParamsError\"\n    });\n  }\n}\nObject.defineProperty(Bi, \"code\", {\n  enumerable: !0,\n  configurable: !0,\n  writable: !0,\n  value: -32602\n});\nclass Dn extends Pt {\n  constructor(e = {}) {\n    super({\n      message: \"Internal JSON-RPC error.\",\n      ...e,\n      code: Dn.code\n    }), Object.defineProperty(this, \"code\", {\n      enumerable: !0,\n      configurable: !0,\n      writable: !0,\n      value: -32603\n    }), Object.defineProperty(this, \"name\", {\n      enumerable: !0,\n      configurable: !0,\n      writable: !0,\n      value: \"RpcResponse.InternalErrorError\"\n    });\n  }\n}\nObject.defineProperty(Dn, \"code\", {\n  enumerable: !0,\n  configurable: !0,\n  writable: !0,\n  value: -32603\n});\nclass Ri extends Pt {\n  constructor(e = {}) {\n    super({\n      message: \"Failed to parse JSON-RPC response.\",\n      ...e,\n      code: Ri.code\n    }), Object.defineProperty(this, \"code\", {\n      enumerable: !0,\n      configurable: !0,\n      writable: !0,\n      value: -32700\n    }), Object.defineProperty(this, \"name\", {\n      enumerable: !0,\n      configurable: !0,\n      writable: !0,\n      value: \"RpcResponse.ParseError\"\n    });\n  }\n}\nObject.defineProperty(Ri, \"code\", {\n  enumerable: !0,\n  configurable: !0,\n  writable: !0,\n  value: -32700\n});\nclass mn extends Error {\n  constructor(e, r) {\n    super(r), Object.defineProperty(this, \"name\", {\n      enumerable: !0,\n      configurable: !0,\n      writable: !0,\n      value: \"ProviderRpcError\"\n    }), Object.defineProperty(this, \"code\", {\n      enumerable: !0,\n      configurable: !0,\n      writable: !0,\n      value: void 0\n    }), Object.defineProperty(this, \"details\", {\n      enumerable: !0,\n      configurable: !0,\n      writable: !0,\n      value: void 0\n    }), this.code = e, this.details = r;\n  }\n}\nclass fl extends mn {\n  constructor({ message: e = \"The user rejected the request.\" } = {}) {\n    super(4001, e), Object.defineProperty(this, \"name\", {\n      enumerable: !0,\n      configurable: !0,\n      writable: !0,\n      value: \"Provider.UserRejectedRequestError\"\n    });\n  }\n}\nObject.defineProperty(fl, \"code\", {\n  enumerable: !0,\n  configurable: !0,\n  writable: !0,\n  value: 4001\n});\nclass hl extends mn {\n  constructor({ message: e = \"The requested method and/or account has not been authorized by the user.\" } = {}) {\n    super(4100, e), Object.defineProperty(this, \"name\", {\n      enumerable: !0,\n      configurable: !0,\n      writable: !0,\n      value: \"Provider.UnauthorizedError\"\n    });\n  }\n}\nObject.defineProperty(hl, \"code\", {\n  enumerable: !0,\n  configurable: !0,\n  writable: !0,\n  value: 4100\n});\nclass dl extends mn {\n  constructor({ message: e = \"The provider does not support the requested method.\" } = {}) {\n    super(4200, e), Object.defineProperty(this, \"name\", {\n      enumerable: !0,\n      configurable: !0,\n      writable: !0,\n      value: \"Provider.UnsupportedMethodError\"\n    });\n  }\n}\nObject.defineProperty(dl, \"code\", {\n  enumerable: !0,\n  configurable: !0,\n  writable: !0,\n  value: 4200\n});\nclass pl extends mn {\n  constructor({ message: e = \"The provider is disconnected from all chains.\" } = {}) {\n    super(4900, e), Object.defineProperty(this, \"name\", {\n      enumerable: !0,\n      configurable: !0,\n      writable: !0,\n      value: \"Provider.DisconnectedError\"\n    });\n  }\n}\nObject.defineProperty(pl, \"code\", {\n  enumerable: !0,\n  configurable: !0,\n  writable: !0,\n  value: 4900\n});\nclass ml extends mn {\n  constructor({ message: e = \"The provider is not connected to the requested chain.\" } = {}) {\n    super(4901, e), Object.defineProperty(this, \"name\", {\n      enumerable: !0,\n      configurable: !0,\n      writable: !0,\n      value: \"Provider.ChainDisconnectedError\"\n    });\n  }\n}\nObject.defineProperty(ml, \"code\", {\n  enumerable: !0,\n  configurable: !0,\n  writable: !0,\n  value: 4901\n});\nfunction Ep() {\n  const t = new Dc();\n  return {\n    get eventNames() {\n      return t.eventNames.bind(t);\n    },\n    get listenerCount() {\n      return t.listenerCount.bind(t);\n    },\n    get listeners() {\n      return t.listeners.bind(t);\n    },\n    addListener: t.addListener.bind(t),\n    emit: t.emit.bind(t),\n    off: t.off.bind(t),\n    on: t.on.bind(t),\n    once: t.once.bind(t),\n    removeAllListeners: t.removeAllListeners.bind(t),\n    removeListener: t.removeListener.bind(t)\n  };\n}\nfunction Mp(t, e = {}) {\n  var n, o;\n  const { includeEvents: r = !0 } = e;\n  if (!t)\n    throw new Cp();\n  return {\n    ...r ? {\n      on: (n = t.on) == null ? void 0 : n.bind(t),\n      removeListener: (o = t.removeListener) == null ? void 0 : o.bind(t)\n    } : {},\n    async request(i) {\n      const c = await t.request(i);\n      return c && typeof c == \"object\" && \"jsonrpc\" in c ? ll(c) : c;\n    }\n  };\n}\nclass Cp extends pp {\n  constructor() {\n    super(\"`provider` is undefined.\"), Object.defineProperty(this, \"name\", {\n      enumerable: !0,\n      configurable: !0,\n      writable: !0,\n      value: \"Provider.IsUndefinedError\"\n    });\n  }\n}\nfunction Sp(t = {}) {\n  let e = t.id ?? 0;\n  return {\n    prepare(r) {\n      return Ap({\n        id: e++,\n        ...r\n      });\n    },\n    get id() {\n      return e;\n    }\n  };\n}\nfunction Ap(t) {\n  return {\n    ...t,\n    jsonrpc: \"2.0\"\n  };\n}\n/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nconst gl = Symbol(\"Comlink.proxy\"), kp = Symbol(\"Comlink.endpoint\"), Ip = Symbol(\"Comlink.releaseProxy\"), go = Symbol(\"Comlink.finalizer\"), ss = Symbol(\"Comlink.thrown\"), yl = (t) => typeof t == \"object\" && t !== null || typeof t == \"function\", Bp = {\n  canHandle: (t) => yl(t) && t[gl],\n  serialize(t) {\n    const { port1: e, port2: r } = new MessageChannel();\n    return wl(t, e), [r, [r]];\n  },\n  deserialize(t) {\n    return t.start(), bl(t);\n  }\n}, Rp = {\n  canHandle: (t) => yl(t) && ss in t,\n  serialize({ value: t }) {\n    let e;\n    return t instanceof Error ? e = {\n      isError: !0,\n      value: {\n        message: t.message,\n        name: t.name,\n        stack: t.stack\n      }\n    } : e = { isError: !1, value: t }, [e, []];\n  },\n  deserialize(t) {\n    throw t.isError ? Object.assign(new Error(t.value.message), t.value) : t.value;\n  }\n}, vl = /* @__PURE__ */ new Map([\n  [\"proxy\", Bp],\n  [\"throw\", Rp]\n]);\nfunction Tp(t, e) {\n  for (const r of t)\n    if (e === r || r === \"*\" || r instanceof RegExp && r.test(e))\n      return !0;\n  return !1;\n}\nfunction wl(t, e = globalThis, r = [\"*\"]) {\n  e.addEventListener(\"message\", function n(o) {\n    if (!o || !o.data)\n      return;\n    if (!Tp(r, o.origin)) {\n      console.warn(`Invalid origin '${o.origin}' for comlink proxy`);\n      return;\n    }\n    const { id: i, type: c, path: f } = Object.assign({ path: [] }, o.data), v = (o.data.argumentList || []).map(nn);\n    let x;\n    try {\n      const b = f.slice(0, -1).reduce((T, C) => T[C], t), S = f.reduce((T, C) => T[C], t);\n      switch (c) {\n        case \"GET\":\n          x = S;\n          break;\n        case \"SET\":\n          b[f.slice(-1)[0]] = nn(o.data.value), x = !0;\n          break;\n        case \"APPLY\":\n          x = S.apply(b, v);\n          break;\n        case \"CONSTRUCT\":\n          {\n            const T = new S(...v);\n            x = Fp(T);\n          }\n          break;\n        case \"ENDPOINT\":\n          {\n            const { port1: T, port2: C } = new MessageChannel();\n            wl(t, C), x = Up(T, [T]);\n          }\n          break;\n        case \"RELEASE\":\n          x = void 0;\n          break;\n        default:\n          return;\n      }\n    } catch (b) {\n      x = { value: b, [ss]: 0 };\n    }\n    Promise.resolve(x).catch((b) => ({ value: b, [ss]: 0 })).then((b) => {\n      const [S, T] = Is(b);\n      e.postMessage(Object.assign(Object.assign({}, S), { id: i }), T), c === \"RELEASE\" && (e.removeEventListener(\"message\", n), xl(e), go in t && typeof t[go] == \"function\" && t[go]());\n    }).catch((b) => {\n      const [S, T] = Is({\n        value: new TypeError(\"Unserializable return value\"),\n        [ss]: 0\n      });\n      e.postMessage(Object.assign(Object.assign({}, S), { id: i }), T);\n    });\n  }), e.start && e.start();\n}\nfunction Lp(t) {\n  return t.constructor.name === \"MessagePort\";\n}\nfunction xl(t) {\n  Lp(t) && t.close();\n}\nfunction bl(t, e) {\n  const r = /* @__PURE__ */ new Map();\n  return t.addEventListener(\"message\", function(o) {\n    const { data: i } = o;\n    if (!i || !i.id)\n      return;\n    const c = r.get(i.id);\n    if (c)\n      try {\n        c(i);\n      } finally {\n        r.delete(i.id);\n      }\n  }), Fo(t, r, [], e);\n}\nfunction Ji(t) {\n  if (t)\n    throw new Error(\"Proxy has been released and is not useable\");\n}\nfunction _l(t) {\n  return Mn(t, /* @__PURE__ */ new Map(), {\n    type: \"RELEASE\"\n  }).then(() => {\n    xl(t);\n  });\n}\nconst As = /* @__PURE__ */ new WeakMap(), ks = \"FinalizationRegistry\" in globalThis && new FinalizationRegistry((t) => {\n  const e = (As.get(t) || 0) - 1;\n  As.set(t, e), e === 0 && _l(t);\n});\nfunction Op(t, e) {\n  const r = (As.get(e) || 0) + 1;\n  As.set(e, r), ks && ks.register(t, e, t);\n}\nfunction Np(t) {\n  ks && ks.unregister(t);\n}\nfunction Fo(t, e, r = [], n = function() {\n}) {\n  let o = !1;\n  const i = new Proxy(n, {\n    get(c, f) {\n      if (Ji(o), f === Ip)\n        return () => {\n          Np(i), _l(t), e.clear(), o = !0;\n        };\n      if (f === \"then\") {\n        if (r.length === 0)\n          return { then: () => i };\n        const v = Mn(t, e, {\n          type: \"GET\",\n          path: r.map((x) => x.toString())\n        }).then(nn);\n        return v.then.bind(v);\n      }\n      return Fo(t, e, [...r, f]);\n    },\n    set(c, f, v) {\n      Ji(o);\n      const [x, b] = Is(v);\n      return Mn(t, e, {\n        type: \"SET\",\n        path: [...r, f].map((S) => S.toString()),\n        value: x\n      }, b).then(nn);\n    },\n    apply(c, f, v) {\n      Ji(o);\n      const x = r[r.length - 1];\n      if (x === kp)\n        return Mn(t, e, {\n          type: \"ENDPOINT\"\n        }).then(nn);\n      if (x === \"bind\")\n        return Fo(t, e, r.slice(0, -1));\n      const [b, S] = gu(v);\n      return Mn(t, e, {\n        type: \"APPLY\",\n        path: r.map((T) => T.toString()),\n        argumentList: b\n      }, S).then(nn);\n    },\n    construct(c, f) {\n      Ji(o);\n      const [v, x] = gu(f);\n      return Mn(t, e, {\n        type: \"CONSTRUCT\",\n        path: r.map((b) => b.toString()),\n        argumentList: v\n      }, x).then(nn);\n    }\n  });\n  return Op(i, t), i;\n}\nfunction jp(t) {\n  return Array.prototype.concat.apply([], t);\n}\nfunction gu(t) {\n  const e = t.map(Is);\n  return [e.map((r) => r[0]), jp(e.map((r) => r[1]))];\n}\nconst El = /* @__PURE__ */ new WeakMap();\nfunction Up(t, e) {\n  return El.set(t, e), t;\n}\nfunction Fp(t) {\n  return Object.assign(t, { [gl]: !0 });\n}\nfunction Pp(t, e = globalThis, r = \"*\") {\n  return {\n    postMessage: (n, o) => t.postMessage(n, r, o),\n    addEventListener: e.addEventListener.bind(e),\n    removeEventListener: e.removeEventListener.bind(e)\n  };\n}\nfunction Is(t) {\n  for (const [e, r] of vl)\n    if (r.canHandle(t)) {\n      const [n, o] = r.serialize(t);\n      return [\n        {\n          type: \"HANDLER\",\n          name: e,\n          value: n\n        },\n        o\n      ];\n    }\n  return [\n    {\n      type: \"RAW\",\n      value: t\n    },\n    El.get(t) || []\n  ];\n}\nfunction nn(t) {\n  switch (t.type) {\n    case \"HANDLER\":\n      return vl.get(t.name).deserialize(t.value);\n    case \"RAW\":\n      return t.value;\n  }\n}\nfunction Mn(t, e, r, n) {\n  return new Promise((o) => {\n    const i = Dp();\n    e.set(i, o), t.start && t.start(), t.postMessage(Object.assign({ id: i }, r), n);\n  });\n}\nfunction Dp() {\n  return new Array(4).fill(0).map(() => Math.floor(Math.random() * Number.MAX_SAFE_INTEGER).toString(16)).join(\"-\");\n}\nconst $p = {\n  postMessage() {\n  },\n  addEventListener: () => {\n  },\n  removeEventListener: () => {\n  }\n}, zp = {\n  postMessage: (t) => {\n    console.debug(\"[webview:req]\", t), window.ReactNativeWebView.postMessage(JSON.stringify(t));\n  },\n  addEventListener: (t, e, ...r) => {\n    document.addEventListener(\"FarcasterFrameCallback\", e, ...r);\n  },\n  removeEventListener: (t, e) => {\n    document.removeEventListener(\"FarcasterFrameCallback\", e);\n  }\n}, qp = typeof window > \"u\" ? $p : window != null && window.ReactNativeWebView ? zp : Pp((window == null ? void 0 : window.parent) ?? window), Qe = bl(qp), ba = Ep(), Zp = Sp();\nfunction Vp({ code: t, details: e }) {\n  switch (t) {\n    case 4001:\n      return new fl();\n    case 4100:\n      return new hl();\n    case 4200:\n      return new dl();\n    case 4900:\n      return new pl();\n    case 4901:\n      return new ml();\n    default:\n      return new mn(t, e ?? \"Unknown provider RPC error\");\n  }\n}\nconst Ti = Mp({\n  ...ba,\n  async request(t) {\n    const e = Zp.prepare(t);\n    try {\n      const r = await Qe.ethProviderRequestV2(e).then((n) => ll(n, { request: e, raw: !0 }));\n      if (r.error)\n        throw Vp(r.error);\n      return r.result;\n    } catch (r) {\n      if (r instanceof Error && r.message.match(/cannot read property 'apply'/i))\n        return await Qe.ethProviderRequest(e);\n      throw r instanceof mn || r instanceof Pt ? r : new Dn({\n        message: r instanceof Error ? r.message : void 0\n      });\n    }\n  }\n});\nasync function Hp() {\n  try {\n    const t = await Qe.getCapabilities();\n    return !t.includes(\"wallet.getEthereumProvider\") && !t.includes(\"wallet.getEvmProvider\") ? void 0 : Ti;\n  } catch {\n    return Ti;\n  }\n}\nfunction Ml(t) {\n  const e = new CustomEvent(\"eip6963:announceProvider\", { detail: Object.freeze(t) });\n  window.dispatchEvent(e);\n  const r = () => window.dispatchEvent(e);\n  return window.addEventListener(\"eip6963:requestProvider\", r), () => window.removeEventListener(\"eip6963:requestProvider\", r);\n}\ntypeof document < \"u\" && (document.addEventListener(\"eip6963:requestProvider\", () => {\n  Qe.eip6963RequestProvider();\n}), document.addEventListener(\"FarcasterFrameEthProviderEvent\", (t) => {\n  if (t instanceof MessageEvent) {\n    const e = t.data;\n    ba.emit(e.event, ...e.params);\n  }\n}), document.addEventListener(\"FarcasterFrameEvent\", (t) => {\n  if (t instanceof MessageEvent) {\n    const e = t.data;\n    e.event === \"eip6963:announceProvider\" && Ml({\n      info: e.info,\n      provider: Ti\n    });\n  }\n}));\ntypeof window < \"u\" && (window.addEventListener(\"eip6963:requestProvider\", () => {\n  Qe.eip6963RequestProvider();\n}), window.addEventListener(\"message\", (t) => {\n  if (t instanceof MessageEvent && t.data.type === \"frameEthProviderEvent\") {\n    const e = t.data;\n    ba.emit(e.event, ...e.params);\n  }\n}), window.addEventListener(\"message\", (t) => {\n  if (t instanceof MessageEvent && t.data.type === \"frameEvent\") {\n    const e = t.data.event;\n    e.event === \"eip6963:announceProvider\" && Ml({\n      info: e.info,\n      provider: Ti\n    });\n  }\n}));\nfunction Kp() {\n  const t = new Dc();\n  return {\n    get eventNames() {\n      return t.eventNames.bind(t);\n    },\n    get listenerCount() {\n      return t.listenerCount.bind(t);\n    },\n    get listeners() {\n      return t.listeners.bind(t);\n    },\n    addListener: t.addListener.bind(t),\n    emit: t.emit.bind(t),\n    off: t.off.bind(t),\n    on: t.on.bind(t),\n    once: t.once.bind(t),\n    removeAllListeners: t.removeAllListeners.bind(t),\n    removeListener: t.removeListener.bind(t)\n  };\n}\nconst Tt = Kp(), { solanaProviderRequest: yu } = Qe;\nlet Cl;\nyu && (Cl = ip(op(yu)));\nasync function vu() {\n  let t;\n  try {\n    t = await Qe.getCapabilities();\n  } catch {\n  }\n  if (t != null && t.includes(\"wallet.getSolanaProvider\"))\n    return Cl;\n}\nlet wu = null;\nasync function Wp(t = 50) {\n  if (wu === !0)\n    return !0;\n  if (typeof window > \"u\" || !window.ReactNativeWebView && window === window.parent)\n    return !1;\n  const e = await Promise.race([\n    Qe.context.then((r) => !!r),\n    // Check if context resolves to truthy\n    new Promise((r) => {\n      setTimeout(() => r(!1), t);\n    })\n  ]).catch(() => !1);\n  return e && (wu = !0), e;\n}\nconst xu = async (t = {}) => {\n  const e = fp({\n    origin: t.quickAuthServerOrigin\n  }), { nonce: r } = await e.generateNonce(), n = await Qe.signIn({\n    nonce: r,\n    acceptAuthAddress: !0\n  });\n  if (n.result) {\n    const o = yp(n.result.message);\n    if (!o.domain)\n      throw new Error(\"Missing domain on SIWE message\");\n    return await e.verifySiwf({\n      domain: o.domain,\n      message: n.result.message,\n      signature: n.result.signature\n    });\n  }\n  throw n.error.type === \"rejected_by_user\" ? new Hu() : new Error(\"Unreachable\");\n}, bu = async () => {\n  const t = await Qe.addFrame();\n  if (t.result)\n    return t.result;\n  throw t.error.type === \"invalid_domain_manifest\" ? new nf() : t.error.type === \"rejected_by_user\" ? new sf() : new Error(\"Unreachable\");\n}, yt = {\n  ...Tt,\n  getCapabilities: Qe.getCapabilities,\n  getChains: Qe.getChains,\n  isInMiniApp: Wp,\n  context: Qe.context,\n  back: vp({ frameHost: Qe, emitter: Tt }),\n  actions: {\n    setPrimaryButton: Qe.setPrimaryButton.bind(Qe),\n    ready: async (t = {}) => await Qe.ready(t),\n    close: Qe.close.bind(Qe),\n    viewCast: Qe.viewCast.bind(Qe),\n    viewProfile: Qe.viewProfile.bind(Qe),\n    signIn: async (t) => {\n      const e = await Qe.signIn(t);\n      if (e.result)\n        return e.result;\n      throw e.error.type === \"rejected_by_user\" ? new Hu() : new Error(\"Unreachable\");\n    },\n    openUrl: (t) => {\n      const e = typeof t == \"string\" ? t : t.url;\n      return Qe.openUrl(e.trim());\n    },\n    addFrame: bu,\n    addMiniApp: bu,\n    composeCast(t = {}) {\n      return Qe.composeCast(t);\n    },\n    viewToken: Qe.viewToken.bind(Qe),\n    sendToken: Qe.sendToken.bind(Qe),\n    swapToken: Qe.swapToken.bind(Qe),\n    quickAuth: xu\n  },\n  experimental: {\n    getSolanaProvider: vu,\n    quickAuth: xu\n  },\n  wallet: {\n    ethProvider: Ti,\n    getEthereumProvider: Hp,\n    getSolanaProvider: vu\n  },\n  haptics: {\n    impactOccurred: Qe.impactOccurred.bind(Qe),\n    notificationOccurred: Qe.notificationOccurred.bind(Qe),\n    selectionChanged: Qe.selectionChanged.bind(Qe)\n  }\n};\ntypeof document < \"u\" && document.addEventListener(\"FarcasterFrameEvent\", (t) => {\n  if (t instanceof MessageEvent) {\n    const e = t.data;\n    e.event === \"primary_button_clicked\" ? Tt.emit(\"primaryButtonClicked\") : e.event === \"frame_added\" ? Tt.emit(\"frameAdded\", {\n      notificationDetails: e.notificationDetails\n    }) : e.event === \"frame_add_rejected\" ? Tt.emit(\"frameAddRejected\", { reason: e.reason }) : e.event === \"frame_removed\" ? Tt.emit(\"frameRemoved\") : e.event === \"notifications_enabled\" ? Tt.emit(\"notificationsEnabled\", {\n      notificationDetails: e.notificationDetails\n    }) : e.event === \"notifications_disabled\" ? Tt.emit(\"notificationsDisabled\") : e.event === \"back_navigation_triggered\" && Tt.emit(\"backNavigationTriggered\");\n  }\n});\ntypeof window < \"u\" && window.addEventListener(\"message\", (t) => {\n  if (t instanceof MessageEvent && t.data.type === \"frameEvent\") {\n    const e = t.data.event;\n    e.event === \"primary_button_clicked\" ? Tt.emit(\"primaryButtonClicked\") : e.event === \"frame_added\" ? Tt.emit(\"frameAdded\", {\n      notificationDetails: e.notificationDetails\n    }) : e.event === \"frame_add_rejected\" ? Tt.emit(\"frameAddRejected\", { reason: e.reason }) : e.event === \"frame_removed\" ? Tt.emit(\"frameRemoved\") : e.event === \"notifications_enabled\" ? Tt.emit(\"notificationsEnabled\", {\n      notificationDetails: e.notificationDetails\n    }) : e.event === \"notifications_disabled\" ? Tt.emit(\"notificationsDisabled\") : e.event === \"back_navigation_triggered\" && Tt.emit(\"backNavigationTriggered\");\n  }\n});\nfunction Gp(t) {\n  if (typeof window > \"u\")\n    return;\n  const e = (r) => t(r.detail);\n  return window.addEventListener(\"eip6963:announceProvider\", e), window.dispatchEvent(new CustomEvent(\"eip6963:requestProvider\")), () => window.removeEventListener(\"eip6963:announceProvider\", e);\n}\nfunction Yp() {\n  const t = /* @__PURE__ */ new Set();\n  let e = [];\n  const r = () => Gp((o) => {\n    e.some(({ info: i }) => i.uuid === o.info.uuid) || (e = [...e, o], t.forEach((i) => i(e, { added: [o] })));\n  });\n  let n = r();\n  return {\n    _listeners() {\n      return t;\n    },\n    clear() {\n      t.forEach((o) => o([], { removed: [...e] })), e = [];\n    },\n    destroy() {\n      this.clear(), t.clear(), n == null || n();\n    },\n    findProvider({ rdns: o }) {\n      return e.find((i) => i.info.rdns === o);\n    },\n    getProviders() {\n      return e;\n    },\n    reset() {\n      this.clear(), n == null || n(), n = r();\n    },\n    subscribe(o, { emitImmediately: i } = {}) {\n      return t.add(o), i && o(e, { added: e }), () => t.delete(o);\n    }\n  };\n}\nfunction Jp(t, e = {}, r) {\n  const n = {\n    event_type: t,\n    api_key: \"0c4fe46171b9bb8eca2ca61eb71f2e19\",\n    time: Date.now(),\n    user_id: r,\n    ...Object.keys(e).length && {\n      event_properties: e\n    }\n  };\n  fetch(\"https://api2.amplitude.com/2/httpapi\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      api_key: \"0c4fe46171b9bb8eca2ca61eb71f2e19\",\n      events: [n]\n    })\n  }).catch((o) => {\n    console.error(\"Amplitude tracking error:\", o);\n  });\n}\nconst Xp = react__WEBPACK_IMPORTED_MODULE_0___default().createContext(void 0);\nfunction Qp(t = !1) {\n  const [e, r] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1), [n, o] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null), [i, c] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1), [f, v] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null), [x, b] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"\"), [S, T] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({}), [C, P] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"\"), B = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((Z, Q = {}, j) => {\n    t && Jp(Z, Q, j);\n  }, [t]), R = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (Z) => {\n    await yt.isInMiniApp() ? await yt.actions.openUrl(Z) : window.open(Z, \"_blank\");\n  }, [yt]), z = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async () => {\n    await yt.isInMiniApp() ? await yt.actions.close() : window.close();\n  }, [yt]), K = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (Z, Q) => (Q && t && B(\"cast.composed\", {\n    ...S,\n    castText: Z == null ? void 0 : Z.text,\n    source: Q\n  }, C), yt.actions.composeCast(Z)), [yt, t, B, S, C]);\n  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    const Z = async () => {\n      var O, L;\n      const Q = await yt.context;\n      o(Q), r(!0);\n      const j = new URLSearchParams(window.location.search), V = j.get(\"utm_source\"), ee = j.get(\"utm_medium\"), G = j.get(\"utm_campaign\");\n      if (V === \"neynar\" && (ee != null && ee.startsWith(\"share-cast-\"))) {\n        const F = ee.replace(\"share-cast-\", \"\");\n        (O = Q == null ? void 0 : Q.user) != null && O.fid && B(\"cast.shared\", {\n          ...S,\n          sharedByFid: F\n        }, C);\n      }\n      if (V === \"neynar\" && G && ((L = Q == null ? void 0 : Q.user) != null && L.fid)) {\n        const F = `neynar_notification_tracked_${G}`;\n        if (!localStorage.getItem(F))\n          try {\n            const s = await fetch(\"https://api.neynar.com/v2/farcaster/frame/notifications/open\", {\n              method: \"POST\",\n              headers: {\n                \"content-type\": \"application/json\"\n              },\n              body: JSON.stringify({\n                campaign_id: G,\n                fid: Q.user.fid,\n                app_fid: Q.client.clientFid\n              })\n            });\n            s.ok ? localStorage.setItem(F, \"true\") : console.error(\"Failed to mark notification as opened: \", await s.text());\n          } catch (s) {\n            console.error(\"Error marking notification as opened: \", s);\n          }\n      }\n      yt.on(\"frameAdded\", ({\n        notificationDetails: F\n      }) => {\n        console.log(\"Frame added\", F), c(!0), v(F ?? null), b(\"Frame added\"), B(\"frame.added\", S, C);\n      }), yt.on(\"frameAddRejected\", ({\n        reason: F\n      }) => {\n        console.log(\"Frame add rejected\", F), c(!1), b(`Frame add rejected: ${F}`), B(\"frame.add.rejected\", S, C);\n      }), yt.on(\"frameRemoved\", () => {\n        console.log(\"Frame removed\"), c(!1), b(\"Frame removed\"), B(\"frame.removed\", S, C);\n      }), yt.on(\"notificationsEnabled\", ({\n        notificationDetails: F\n      }) => {\n        console.log(\"Notifications enabled\", F), v(F ?? null), b(\"Notifications enabled\"), B(\"notifications.enabled\", S, C);\n      }), yt.on(\"notificationsDisabled\", () => {\n        console.log(\"Notifications disabled\"), v(null), b(\"Notifications disabled\"), B(\"notifications.disabled\", S, C);\n      }), yt.on(\"primaryButtonClicked\", () => {\n        console.log(\"Primary button clicked\"), b(\"Primary button clicked\"), B(\"primary-button.clicked\", S, C);\n      }), console.log(\"Calling ready\"), yt.actions.ready({}), Yp().subscribe((F) => {\n        console.log(\"PROVIDER DETAILS\", F);\n      });\n    };\n    if (yt && !e)\n      return console.log(\"Calling load\"), r(!0), Z(), () => {\n        yt.removeAllListeners();\n      };\n  }, [yt, S, C, e, B]), (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    n != null && n.user && (n != null && n.client) && (T({\n      username: n.user.username,\n      clientFid: n.client.clientFid\n    }), P(`${n.user.fid}`), B(\"frame.opened\", {\n      username: n.user.username,\n      clientFid: n.client.clientFid,\n      location: n.location,\n      added: n.client.added\n    }, `${n.user.fid}`));\n  }, [n, B]), {\n    ...yt,\n    isSDKLoaded: e,\n    context: n,\n    added: i,\n    notificationDetails: f,\n    lastEvent: x,\n    actions: {\n      ...yt.actions,\n      openUrl: R,\n      close: z,\n      composeCast: K\n    }\n  };\n}\nfunction sy({\n  children: t,\n  analyticsEnabled: e = !1\n}) {\n  const r = Qp(e);\n  return r.isSDKLoaded ? /* @__PURE__ */ U.jsx(Xp.Provider, {\n    value: r,\n    children: t\n  }) : /* @__PURE__ */ U.jsx(\"div\", {\n    children: \"Loading...\"\n  });\n}\nvar Sl = /* @__PURE__ */ ((t) => (t.Light = \"light\", t.Dark = \"dark\", t))(Sl || {}), wr = /* @__PURE__ */ ((t) => (t.FARCASTER = \"farcaster\", t.NEYNAR = \"neynar\", t.WARPCAST = \"warpcast\", t))(wr || {});\nfunction _a(t, e = \"\", {\n  serialize: r = JSON.stringify,\n  deserialize: n = JSON.parse\n} = {}) {\n  const [o, i] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(() => {\n    if (typeof window > \"u\")\n      return e;\n    try {\n      const v = window.localStorage.getItem(t);\n      return v ? n(v) : e;\n    } catch (v) {\n      return console.error(\"Error reading from localStorage\", v), e;\n    }\n  });\n  return [o, (v) => {\n    try {\n      const x = v instanceof Function ? v(o) : v;\n      i(x), typeof window < \"u\" && window.localStorage.setItem(t, r(x));\n    } catch (x) {\n      console.error(\"Error writing to localStorage\", x);\n    }\n  }, () => {\n    try {\n      window.localStorage.removeItem(t), i(e);\n    } catch (v) {\n      console.error(\"Error removing from localStorage\", v);\n    }\n  }];\n}\nvar Zn = /* @__PURE__ */ ((t) => (t.NEYNAR_AUTHENTICATED_USER = \"neynar_authenticated_user\", t))(Zn || {});\nconst Al = (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(void 0), em = ({\n  children: t,\n  _setIsAuthenticated: e,\n  _setUser: r,\n  _onAuthSuccess: n,\n  _onSignout: o\n}) => {\n  const {\n    isAuthenticated: i\n  } = lr(), [c, f] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1), [v, x] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null), [b] = _a(Zn.NEYNAR_AUTHENTICATED_USER);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    e(c);\n  }, [c]), (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    f(i);\n  }, [i]), (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    b ? (x(b), f(!0)) : (x(null), f(!1));\n  }, []), (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    r(v);\n  }, [v]);\n  const S = (P) => {\n    n && n(P);\n  }, T = (P) => {\n    o && o(P);\n  }, C = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => ({\n    isAuthenticated: c,\n    user: v,\n    setIsAuthenticated: f,\n    setUser: x,\n    onAuthSuccess: S,\n    onSignout: T\n  }), [c, v]);\n  return /* @__PURE__ */ U.jsx(Al.Provider, {\n    value: C,\n    children: t\n  });\n}, kl = () => {\n  const t = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(Al);\n  if (!t)\n    throw new Error(\"useAuth must be used within a AuthContextProvider\");\n  return t;\n}, tm = /* @__PURE__ */ (0,_pigment_css_react__WEBPACK_IMPORTED_MODULE_2__.styled)(\"div\")({\n  classes: [\"tbaom7c\"]\n}), rm = /* @__PURE__ */ (0,_pigment_css_react__WEBPACK_IMPORTED_MODULE_2__.styled)(\"div\")({\n  classes: [\"t1ff44zi\"],\n  variants: [{\n    props: {\n      type: \"success\"\n    },\n    className: \"t1ff44zi-1\"\n  }, {\n    props: {\n      type: \"error\"\n    },\n    className: \"t1ff44zi-2\"\n  }, {\n    props: {\n      type: \"warning\"\n    },\n    className: \"t1ff44zi-3\"\n  }, {\n    props: {\n      type: \"info\"\n    },\n    className: \"t1ff44zi-4\"\n  }]\n});\nvar Il = /* @__PURE__ */ ((t) => (t.Success = \"success\", t.Error = \"error\", t.Warning = \"warning\", t.Info = \"info\", t))(Il || {});\nconst Bl = (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(void 0), oy = ({\n  children: t,\n  settings: {\n    clientId: e,\n    defaultTheme: r = Sl.Light,\n    eventsCallbacks: n\n  }\n}) => {\n  const [o] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(e), [i, c] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1), [f, v] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(r), [x, b] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]), [S, T] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null), C = (Z, Q) => {\n    const j = {\n      type: Z,\n      message: Q\n    };\n    b((V) => [...V, j]), setTimeout(() => P(j), 5e3);\n  }, P = (Z) => {\n    b((Q) => Q.filter((j) => j !== Z));\n  };\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    const Z = document.querySelector(\":root\");\n    Z && (f === \"light\" ? (Z.classList.add(\"theme-light\"), Z.classList.remove(\"theme-dark\")) : f === \"dark\" && (Z.classList.add(\"theme-dark\"), Z.classList.remove(\"theme-light\")));\n  }, [f]);\n  const B = (Z) => {\n    c(Z);\n  }, R = (Z) => {\n    T(Z);\n  }, z = () => {\n    if (S) {\n      const {\n        signer_uuid: Z,\n        ...Q\n      } = S;\n      T(null), c(!1), localStorage.removeItem(Zn.NEYNAR_AUTHENTICATED_USER), n != null && n.onSignout && n.onSignout(Q);\n    }\n  }, K = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => ({\n    client_id: o,\n    theme: f,\n    isAuthenticated: i,\n    user: S,\n    setTheme: v,\n    showToast: C,\n    logoutUser: z\n  }), [o, f, i, S, v, C, z]);\n  return /* @__PURE__ */ U.jsx(Bl.Provider, {\n    value: K,\n    children: /* @__PURE__ */ U.jsxs(em, {\n      _setIsAuthenticated: B,\n      _setUser: R,\n      _onAuthSuccess: n == null ? void 0 : n.onAuthSuccess,\n      _onSignout: n == null ? void 0 : n.onSignout,\n      children: [t, /* @__PURE__ */ U.jsx(tm, {\n        children: x.map((Z, Q) => /* @__PURE__ */ U.jsx(rm, {\n          type: Z.type,\n          children: Z.message\n        }, Q))\n      })]\n    })\n  });\n}, lr = () => {\n  const t = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(Bl);\n  if (!t)\n    throw new Error(\"useNeynarContext must be used within a NeynarContextProvider\");\n  return t;\n}, nm = () => /* @__PURE__ */ U.jsxs(\"svg\", {\n  width: \"18\",\n  height: \"17\",\n  viewBox: \"0 0 18 17\",\n  fill: \"none\",\n  xmlns: \"http://www.w3.org/2000/svg\",\n  children: [/* @__PURE__ */ U.jsx(\"path\", {\n    d: \"M13.7222 0H4.27778C2.19137 0 0.5 1.69137 0.5 3.77778V13.2222C0.5 15.3086 2.19137 17 4.27778 17H13.7222C15.8086 17 17.5 15.3086 17.5 13.2222V3.77778C17.5 1.69137 15.8086 0 13.7222 0Z\",\n    fill: \"#855DCD\"\n  }), /* @__PURE__ */ U.jsx(\"path\", {\n    d: \"M4.88281 2.64453H13.1184V14.3556H11.9095V8.9912H11.8976C11.764 7.50859 10.518 6.34675 9.00059 6.34675C7.4832 6.34675 6.23717 7.50859 6.10356 8.9912H6.0917V14.3556H4.88281V2.64453Z\",\n    fill: \"white\"\n  }), /* @__PURE__ */ U.jsx(\"path\", {\n    d: \"M2.69141 4.30664L3.18252 5.96886H3.59807V12.6933C3.38943 12.6933 3.2203 12.8625 3.2203 13.0711V13.5244H3.14474C2.9361 13.5244 2.76696 13.6936 2.76696 13.9022V14.3555H6.99807V13.9022C6.99807 13.6936 6.82893 13.5244 6.6203 13.5244H6.54474V13.0711C6.54474 12.8625 6.3756 12.6933 6.16696 12.6933H5.71363V4.30664H2.69141Z\",\n    fill: \"white\"\n  }), /* @__PURE__ */ U.jsx(\"path\", {\n    d: \"M11.9854 12.6933C11.7768 12.6933 11.6076 12.8625 11.6076 13.0711V13.5244H11.5321C11.3235 13.5244 11.1543 13.6936 11.1543 13.9022V14.3555H15.3854V13.9022C15.3854 13.6936 15.2162 13.5244 15.0076 13.5244H14.9321V13.0711C14.9321 12.8625 14.7629 12.6933 14.5543 12.6933V5.96886H14.9699L15.461 4.30664H12.4387V12.6933H11.9854Z\",\n    fill: \"white\"\n  })]\n}), _u = () => /* @__PURE__ */ U.jsxs(\"svg\", {\n  width: \"32\",\n  height: \"17\",\n  viewBox: \"0 0 50 28\",\n  fill: \"none\",\n  xmlns: \"http://www.w3.org/2000/svg\",\n  children: [/* @__PURE__ */ U.jsx(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M38.3744 13.7311C38.3744 16.1209 37.7639 18.368 36.6904 20.3252C32.5685 19.8525 27.847 18.9503 22.8999 17.6247C20.4058 16.9564 18.0151 16.2236 15.7697 15.4495L15.7693 15.4486C15.7579 15.445 15.7465 15.4413 15.7351 15.4376C15.6448 15.4064 15.5547 15.3752 15.4649 15.3439C12.8978 14.399 11.2356 12.2056 11.4168 10.0315L11.4482 10.0399L11.4215 10.0133C13.0427 4.23612 18.3483 0 24.6434 0C32.2268 0 38.3744 6.14762 38.3744 13.7311Z\",\n    fill: \"black\"\n  }), /* @__PURE__ */ U.jsx(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M11.3804 17.2987C12.4882 16.5313 13.9658 16.1804 15.5002 16.3953C17.7731 17.156 20.1682 17.8782 22.6535 18.5441C27.397 19.8151 31.9584 20.7444 36.0833 21.3275C33.623 25.0252 29.4177 27.4619 24.6434 27.4619C18.294 27.4619 12.9511 23.1524 11.3804 17.2987Z\",\n    fill: \"black\"\n  }), /* @__PURE__ */ U.jsx(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M43.0917 13.4458C41.6461 12.6648 39.9756 11.8759 38.1233 11.1029C38.0363 10.6544 37.9275 10.2136 37.7981 9.78174C39.9806 10.6648 41.9403 11.5752 43.6139 12.4794C45.7007 13.6069 47.3703 14.7394 48.4714 15.816C49.5356 16.8566 50.2295 18.0063 49.93 19.1241C49.6304 20.2419 48.4547 20.8906 47.0128 21.2597C45.5209 21.6415 43.5087 21.7875 41.1377 21.7206C39.6046 21.6773 37.9082 21.5444 36.0864 21.3234C36.3086 20.9891 36.5165 20.6446 36.7094 20.2906C38.3134 20.4733 39.8091 20.5841 41.1687 20.6225C43.4946 20.6882 45.3908 20.5409 46.7404 20.1955C48.14 19.8373 48.7389 19.3249 48.8689 18.8398C48.9989 18.3547 48.7364 17.6115 47.7034 16.6015C46.7073 15.6275 45.1388 14.5519 43.0917 13.4458ZM8.86229 3.16772C10.7583 3.22128 12.9038 3.41177 15.2278 3.73661C14.8974 4.04803 14.5824 4.37566 14.2841 4.71822C12.3016 4.46314 10.4678 4.312 8.83127 4.26577C6.50541 4.20006 4.6092 4.34737 3.25958 4.69279C1.86001 5.05099 1.26107 5.56342 1.13109 6.04849C1.00112 6.53356 1.2636 7.27681 2.29657 8.2868C3.29267 9.26075 4.86118 10.3364 6.90828 11.4425C6.94181 11.4606 6.97546 11.4787 7.00923 11.4968C6.84251 11.5938 6.72574 11.7161 6.66353 11.8645C6.57791 12.0688 6.60013 12.3121 6.72013 12.5874C6.60757 12.5279 6.49623 12.4684 6.38612 12.4089C4.29926 11.2814 2.62971 10.1489 1.5286 9.07223C0.464367 8.03166 -0.229485 6.882 0.0700354 5.76418C0.369556 4.64635 1.54528 3.99764 2.98722 3.6286C4.47911 3.24677 6.49126 3.10074 8.86229 3.16772Z\",\n    fill: \"black\"\n  }), /* @__PURE__ */ U.jsx(\"ellipse\", {\n    cx: \"5.94866\",\n    cy: \"11.5309\",\n    rx: \"3.76009\",\n    ry: \"0.575832\",\n    transform: \"rotate(29.2824 5.94866 11.5309)\",\n    fill: \"black\"\n  })]\n}), im = () => /* @__PURE__ */ U.jsxs(\"svg\", {\n  width: \"17\",\n  height: \"17\",\n  viewBox: \"0 0 17 17\",\n  fill: \"none\",\n  xmlns: \"http://www.w3.org/2000/svg\",\n  children: [/* @__PURE__ */ U.jsx(\"mask\", {\n    id: \"mask0_875_48\",\n    maskUnits: \"userSpaceOnUse\",\n    x: \"0\",\n    y: \"0\",\n    width: \"17\",\n    height: \"17\",\n    children: /* @__PURE__ */ U.jsx(\"path\", {\n      d: \"M16.9947 0H0V16.9947H16.9947V0Z\",\n      fill: \"white\"\n    })\n  }), /* @__PURE__ */ U.jsxs(\"g\", {\n    mask: \"url(#mask0_875_48)\",\n    children: [/* @__PURE__ */ U.jsx(\"path\", {\n      d: \"M12.7871 16.9947H4.20765C1.88755 16.9947 0 15.1073 0 12.7871V4.20771C0 1.88756 1.88755 0 4.20765 0H12.7871C15.1072 0 16.9947 1.88756 16.9947 4.20771V12.7871C16.9947 15.1073 15.1072 16.9947 12.7871 16.9947Z\",\n      fill: \"#472A91\"\n    }), /* @__PURE__ */ U.jsx(\"path\", {\n      d: \"M11.1523 5.37891L10.3143 8.52601L9.47364 5.37891H7.53893L6.69017 8.54919L5.84419 5.37891H3.64062L5.68823 12.3371H7.58931L8.49835 9.10599L9.40736 12.3371H11.3125L13.3557 5.37891H11.1523Z\",\n      fill: \"white\"\n    })]\n  })]\n});\nvar sm = {};\nconst Po = /* @__PURE__ */ (0,_pigment_css_react__WEBPACK_IMPORTED_MODULE_2__.styled)(\"img\")({\n  classes: [\"ippfsqr\"]\n}), om = /* @__PURE__ */ (0,_pigment_css_react__WEBPACK_IMPORTED_MODULE_2__.styled)(\"button\")({\n  classes: [\"b1yzssjb\"]\n}), am = /* @__PURE__ */ (0,_pigment_css_react__WEBPACK_IMPORTED_MODULE_2__.styled)(\"div\")({\n  classes: [\"m1xn8b2e\"]\n}), um = /* @__PURE__ */ (0,_pigment_css_react__WEBPACK_IMPORTED_MODULE_2__.styled)(\"button\")({\n  classes: [\"mwuiqyg\"]\n}), cm = (t, e) => {\n  if (e)\n    return e;\n  switch (t) {\n    case wr.FARCASTER:\n      return \"Sign in with Farcaster\";\n    case wr.NEYNAR:\n      return \"Sign in with Neynar\";\n    case wr.WARPCAST:\n      return \"Sign in with Warpcast\";\n    default:\n      return \"Sign in with Neynar\";\n  }\n}, lm = (t, e, r) => {\n  if (e)\n    return e;\n  if (r)\n    return /* @__PURE__ */ U.jsx(Po, {\n      src: r,\n      alt: \"Custom logo\"\n    });\n  switch (t) {\n    case wr.FARCASTER:\n      return /* @__PURE__ */ U.jsx(nm, {});\n    case wr.NEYNAR:\n      return /* @__PURE__ */ U.jsx(_u, {});\n    case wr.WARPCAST:\n      return /* @__PURE__ */ U.jsx(im, {});\n    default:\n      return /* @__PURE__ */ U.jsx(_u, {});\n  }\n}, fm = ({\n  children: t,\n  label: e,\n  variant: r = wr.NEYNAR,\n  icon: n,\n  customLogoUrl: o,\n  modalStyle: i = {},\n  modalButtonStyle: c = {},\n  ...f\n}) => {\n  const {\n    client_id: v,\n    user: x,\n    isAuthenticated: b\n  } = lr(), {\n    setIsAuthenticated: S,\n    setUser: T,\n    onAuthSuccess: C,\n    onSignout: P\n  } = kl(), [B, R, z] = _a(Zn.NEYNAR_AUTHENTICATED_USER), [K, Z] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1), Q = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null), j = `${sm.NEYNAR_LOGIN_URL ?? \"https://app.neynar.com/login\"}?client_id=${v}`, V = new URL(j).origin, ee = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null), G = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (s) => {\n    var u;\n    if (s.origin === V && s.data && s.data.is_authenticated) {\n      S(!0), (u = Q.current) == null || u.close(), window.removeEventListener(\"message\", G);\n      const h = {\n        signer_uuid: s.data.signer_uuid,\n        ...s.data.user\n      };\n      R(h), T(h), C({\n        user: h\n      });\n    }\n  }, [v, S]), N = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {\n    const h = window.screen.width / 2 - 300, w = `width=600,height=700,top=${window.screen.height / 2 - 700 / 2},left=${h}`;\n    if (Q.current = window.open(j, \"_blank\", w), !Q.current) {\n      console.error(\"Failed to open the authentication window. Please check your pop-up blocker settings.\");\n      return;\n    }\n    window.addEventListener(\"message\", G, !1);\n  }, [v, G]), O = () => {\n    if (x) {\n      const s = x;\n      z(), S(!1), F();\n      const {\n        signer_uuid: u,\n        ...h\n      } = s;\n      P(h);\n    }\n  }, L = () => Z(!0), F = () => Z(!1);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => () => {\n    window.removeEventListener(\"message\", G);\n  }, [G]);\n  const d = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((s) => {\n    ee.current && !ee.current.contains(s.target) && F();\n  }, []);\n  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => (K ? document.addEventListener(\"mousedown\", d) : document.removeEventListener(\"mousedown\", d), () => {\n    document.removeEventListener(\"mousedown\", d);\n  }), [K, d]), /* @__PURE__ */ U.jsxs(U.Fragment, {\n    children: [K && /* @__PURE__ */ U.jsxs(am, {\n      style: i,\n      ref: ee,\n      children: [/* @__PURE__ */ U.jsx(Po, {\n        src: x == null ? void 0 : x.pfp_url,\n        alt: x == null ? void 0 : x.username\n      }), /* @__PURE__ */ U.jsxs(\"span\", {\n        children: [\"@\", x == null ? void 0 : x.username]\n      }), /* @__PURE__ */ U.jsx(um, {\n        style: c,\n        onClick: O,\n        children: \"Sign out\"\n      })]\n    }), /* @__PURE__ */ U.jsx(om, {\n      onClick: b ? L : N,\n      ...f,\n      children: b ? /* @__PURE__ */ U.jsxs(U.Fragment, {\n        children: [/* @__PURE__ */ U.jsx(Po, {\n          src: x == null ? void 0 : x.pfp_url,\n          alt: `${x == null ? void 0 : x.username} profile picture`\n        }), /* @__PURE__ */ U.jsxs(\"span\", {\n          style: {\n            marginLeft: \"10px\"\n          },\n          children: [\"@\", x == null ? void 0 : x.username]\n        })]\n      }) : /* @__PURE__ */ U.jsxs(U.Fragment, {\n        children: [lm(r, n, o), /* @__PURE__ */ U.jsx(\"span\", {\n          style: {\n            marginLeft: \"5px\"\n          },\n          children: cm(r, e)\n        })]\n      })\n    })]\n  });\n}, Bs = /* @__PURE__ */ (0,_pigment_css_react__WEBPACK_IMPORTED_MODULE_2__.styled)(\"img\")({\n  classes: [\"a11pt0xp\"],\n  vars: {\n    \"a11pt0xp-0\": [(t, e = rr) => t.width || \"45px\", !1],\n    \"a11pt0xp-1\": [(t, e = rr) => t.width || \"45px\", !1]\n  }\n}), Eu = \"https://farcaster.xyz\", Rl = /(^|\\s)\\/\\w+/g, Tl = /@\\w+(\\.eth)?/g, Ll = /((https?:\\/\\/)?([a-zA-Z0-9.-]+\\.[a-zA-Z]{2,})(\\/[^\\s]*)?)/g, Mu = new RegExp(`(${Rl.source})|(${Tl.source})|(${Ll.source})`, \"g\"), hm = (t) => Rl.test(t) ? `${Eu}/~/channel${t.trim()}` : Tl.test(t) ? `${Eu}/${t.substring(1)}` : Ll.test(t) ? t.startsWith(\"http\") ? t : `http://${t}` : \"\", dm = /* @__PURE__ */ (0,_pigment_css_react__WEBPACK_IMPORTED_MODULE_2__.styled)(\"a\")({\n  classes: [\"s4xymqs\"]\n}), pm = (t) => t.filter((e) => e.url).map((e) => e.url), mm = (t, e) => {\n  if (!t) return [];\n  const r = pm(e), n = [];\n  let o = 0, i;\n  for (; (i = Mu.exec(t)) !== null; ) {\n    const c = i.index;\n    o < c && n.push(t.slice(o, c));\n    const f = i[0].trim();\n    if (r.includes(f))\n      n.push(f);\n    else {\n      const v = hm(f);\n      n.push(/* @__PURE__ */ U.jsx(dm, {\n        href: v,\n        target: \"_blank\",\n        children: f\n      }, c));\n    }\n    o = Mu.lastIndex;\n  }\n  return o < t.length && n.push(t.slice(o)), n;\n}, Vt = /* @__PURE__ */ (0,_pigment_css_react__WEBPACK_IMPORTED_MODULE_2__.styled)(\"div\")({\n  classes: [\"be87m0m\"],\n  vars: {\n    \"be87m0m-0\": [(t, e = rr) => t.alignItems || \"flex-start\", !1],\n    \"be87m0m-1\": [(t, e = rr) => t.justifyContent || \"flex-start\", !1],\n    \"be87m0m-2\": [(t, e = rr) => t.flexGrow || \"initial\", !0],\n    \"be87m0m-3\": [(t, e = rr) => t.flexShrink || \"initial\", !0],\n    \"be87m0m-4\": [(t, e = rr) => t.spacing ?? t.spacingVertical ?? t.spacingTop ?? \"0px\", !1],\n    \"be87m0m-5\": [(t, e = rr) => t.spacing ?? t.spacingHorizontal ?? t.spacingRight ?? \"0px\", !1],\n    \"be87m0m-6\": [(t, e = rr) => t.spacing ?? t.spacingVertical ?? t.spacingBottom ?? \"0px\", !1],\n    \"be87m0m-7\": [(t, e = rr) => t.spacing ?? t.spacingHorizontal ?? t.spacingLeft ?? \"0px\", !1]\n  }\n}), gm = () => Vt, Ol = /* @__PURE__ */ (0,_pigment_css_react__WEBPACK_IMPORTED_MODULE_2__.styled)(gm())({\n  classes: [\"v1lr8cv7\"]\n}), ym = () => Vt, Ht = /* @__PURE__ */ (0,_pigment_css_react__WEBPACK_IMPORTED_MODULE_2__.styled)(ym())({\n  classes: [\"ha1dvpi\"]\n}), gn = \"https://sdk-api.neynar.com\", vm = \"https://api.allorigins.win/get\", Li = \"https://i.imgur.com/gxH8azy.png\";\nvar wm = {\n  SDK_VERSION: '\"1.2.3\"'\n};\nconst xm = wm.SDK_VERSION, yn = async (t, e = {}) => (e.headers = {\n  ...e.headers,\n  \"x-sdk\": \"react\",\n  \"x-sdk-version\": xm\n}, fetch(t, e));\nasync function bm({\n  type: t,\n  identifier: e,\n  viewerFid: r,\n  client_id: n\n}) {\n  try {\n    let o = `${gn}/v2/farcaster/cast?type=${t}&identifier=${e}${r ? `&viewer_fid=${r}` : \"\"}&client_id=${n}`;\n    const c = await (await yn(o)).json();\n    return (c == null ? void 0 : c.cast) || null;\n  } catch (o) {\n    return console.error(\"Error fetching cast by identifier\", o), null;\n  }\n}\nconst _m = ({\n  type: t,\n  identifier: e,\n  viewerFid: r,\n  allowReactions: n = !1,\n  renderEmbeds: o = !0,\n  renderFrames: i = !1,\n  onLikeBtnPress: c,\n  onRecastBtnPress: f,\n  onCommentBtnPress: v,\n  onFrameBtnPress: x,\n  containerStyles: b,\n  textStyles: S\n}) => {\n  var Q;\n  const {\n    client_id: T\n  } = lr(), [C, P] = react__WEBPACK_IMPORTED_MODULE_0___default().useState(null), [B, R] = react__WEBPACK_IMPORTED_MODULE_0___default().useState(!0), [z, K] = react__WEBPACK_IMPORTED_MODULE_0___default().useState(null), Z = (C == null ? void 0 : C.author.fid) === r;\n  return react__WEBPACK_IMPORTED_MODULE_0___default().useEffect(() => {\n    t && e && (R(!0), K(null), bm({\n      type: t,\n      identifier: e,\n      viewerFid: r,\n      client_id: T\n    }).then((j) => {\n      P(j);\n    }).catch((j) => {\n      K(j);\n    }).finally(() => {\n      R(!1);\n    }));\n  }, [t, e, r, T]), B ? /* @__PURE__ */ U.jsx(\"div\", {\n    children: \"Loading...\"\n  }) : !C || z ? /* @__PURE__ */ U.jsx(\"div\", {\n    children: \"Error: could not fetch cast data\"\n  }) : i && !x ? /* @__PURE__ */ U.jsx(\"div\", {\n    children: \"Error: onFrameBtnPress must be provided when renderEmbeds is true.\"\n  }) : /* @__PURE__ */ U.jsx(Rs, {\n    username: C.author.username,\n    displayName: C.author.display_name,\n    avatarImgUrl: C.author.pfp_url,\n    text: C.text,\n    hash: C.hash,\n    reactions: C.reactions,\n    replies: C.replies.count,\n    embeds: C.embeds ?? [],\n    frames: C.frames ?? [],\n    renderEmbeds: o,\n    renderFrames: i,\n    channel: C.channel ? {\n      id: C.channel.id,\n      name: C.channel.name,\n      url: C.parent_url\n    } : void 0,\n    viewerFid: r,\n    allowReactions: n,\n    hasPowerBadge: C.author.power_badge,\n    appAvatarImgUrl: ((Q = C.app) == null ? void 0 : Q.pfp_url) || null,\n    isOwnProfile: Z,\n    containerStyles: b,\n    textStyles: S,\n    onLikeBtnPress: c,\n    onRecastBtnPress: f,\n    onCommentBtnPress: v,\n    onFrameBtnPress: x,\n    timestamp: C.timestamp\n  });\n}, Em = /* @__PURE__ */ (0,_pigment_css_react__WEBPACK_IMPORTED_MODULE_2__.styled)(\"a\")({\n  classes: [\"s1uo4lx4\"]\n}), yo = /* @__PURE__ */ new Map(), Xi = /* @__PURE__ */ new Map(), Cu = /* @__PURE__ */ new Map(), Su = (t) => new Promise((e) => setTimeout(e, t)), Nl = async (t, e = 0) => {\n  const r = new URL(t).hostname;\n  if (Cu.get(r))\n    return {\n      ogImage: \"\",\n      ogTitle: \"\",\n      ogDescription: \"\"\n    };\n  if (yo.has(t))\n    return yo.get(t);\n  if (Xi.has(t))\n    return Xi.get(t);\n  const n = (async () => {\n    try {\n      await Su(100);\n      const o = await fetch(`${vm}?url=${encodeURIComponent(t)}`, {\n        method: \"GET\"\n      });\n      if (!o.ok) {\n        if (o.status === 429 && e < 5) {\n          const R = Math.pow(2, e) * 1e3;\n          return await Su(R), Nl(t, e + 1);\n        }\n        throw Cu.set(r, !0), new Error(`Failed to fetch Open Graph data: ${o.statusText}`);\n      }\n      const i = await o.json(), f = new DOMParser().parseFromString(i.contents, \"text/html\"), v = f.querySelector('meta[property=\"og:image\"]'), x = f.querySelector('meta[property=\"og:title\"]'), b = f.querySelector('meta[property=\"og:description\"]'), S = f.querySelector(\"title\"), T = v && v.getAttribute(\"content\") || \"\", C = x ? x.getAttribute(\"content\") || \"\" : S ? S.innerText : \"\", P = b && b.getAttribute(\"content\") || \"\", B = {\n        ogImage: T,\n        ogTitle: C,\n        ogDescription: P\n      };\n      return yo.set(t, B), B;\n    } catch (o) {\n      return console.error(\"Error fetching Open Graph data\", o), {\n        ogImage: \"\",\n        ogTitle: \"\",\n        ogDescription: \"\"\n      };\n    } finally {\n      Xi.delete(t);\n    }\n  })();\n  return Xi.set(t, n), n;\n}, Do = [];\nlet vo = 0;\nconst Mm = 5, Cm = (t) => {\n  Do.push(t), jl();\n}, jl = async () => {\n  if (vo >= Mm || Do.length === 0)\n    return;\n  vo++;\n  const t = Do.shift();\n  t && await t(), vo--, jl();\n}, Sm = ({\n  src: t,\n  alt: e,\n  style: r\n}) => /* @__PURE__ */ U.jsx(\"img\", {\n  src: t,\n  alt: e,\n  style: {\n    display: \"block\",\n    height: \"auto\",\n    maxHeight: \"150px\",\n    width: \"auto\",\n    maxWidth: \"100%\",\n    objectFit: \"cover\",\n    border: \"1px solid grey\",\n    borderRadius: \"10px\",\n    margin: \"4px 0\",\n    ...r\n  }\n}), Am = ({\n  url: t\n}) => {\n  const e = react__WEBPACK_IMPORTED_MODULE_0___default().useRef(null);\n  return react__WEBPACK_IMPORTED_MODULE_0___default().useEffect(() => {\n    if (e.current)\n      if (hls_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].isSupported() && t.endsWith(\".m3u8\")) {\n        const r = new hls_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]();\n        r.loadSource(t), r.attachMedia(e.current), r.on(hls_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].Events.MANIFEST_PARSED, () => {\n          e.current.play();\n        });\n      } else\n        e.current.src = t, e.current.addEventListener(\"loadedmetadata\", () => {\n          e.current.play();\n        });\n  }, [t]), /* @__PURE__ */ U.jsx(\"video\", {\n    ref: e,\n    controls: !0,\n    muted: !0,\n    style: {\n      width: \"auto\",\n      maxWidth: \"100%\",\n      maxHeight: \"400px\",\n      borderRadius: \"10px\",\n      margin: \"10px 0\",\n      objectFit: \"contain\"\n    }\n  });\n}, km = (t) => /\\.(jpeg|jpg|gif|png|webp|bmp|svg)$/.test(t) || t.startsWith(\"https://imagedelivery.net\"), Im = (t, e, r) => {\n  const [n, o] = react__WEBPACK_IMPORTED_MODULE_0___default().useState([]), i = react__WEBPACK_IMPORTED_MODULE_0___default().useCallback(async (c) => (await Promise.all(c.map(async (v) => {\n    if (v.url) {\n      const x = v.url;\n      return km(x) ? /* @__PURE__ */ U.jsx(Sm, {\n        src: x,\n        alt: \"Embedded image\"\n      }, x) : x.endsWith(\".m3u8\") || x.endsWith(\".mp4\") ? /* @__PURE__ */ U.jsx(Am, {\n        url: x\n      }, x) : new Promise((b) => {\n        Cm(async () => {\n          const {\n            ogImage: S,\n            ogTitle: T\n          } = await Nl(x), C = new URL(x).hostname.replace(\"www.\", \"\");\n          b(/* @__PURE__ */ U.jsxs(Em, {\n            href: x,\n            target: \"_blank\",\n            rel: \"noreferrer\",\n            children: [S && /* @__PURE__ */ U.jsx(\"img\", {\n              src: S,\n              alt: T,\n              style: {\n                width: \"50px\",\n                height: \"50px\",\n                objectFit: \"cover\",\n                borderRadius: \"5px\"\n              }\n            }), /* @__PURE__ */ U.jsxs(\"div\", {\n              style: {\n                display: \"flex\",\n                flexDirection: \"column\"\n              },\n              children: [/* @__PURE__ */ U.jsx(\"p\", {\n                style: {\n                  margin: 0\n                },\n                children: T || x\n              }), /* @__PURE__ */ U.jsx(\"p\", {\n                style: {\n                  margin: 0,\n                  color: \"grey\",\n                  fontSize: \"12px\"\n                },\n                children: C\n              })]\n            })]\n          }, x));\n        });\n      });\n    } else if (v.cast_id)\n      return /* @__PURE__ */ U.jsx(\"div\", {\n        style: {\n          maxWidth: \"85%\"\n        },\n        children: /* @__PURE__ */ U.jsx(_m, {\n          type: \"hash\",\n          identifier: v.cast_id.hash,\n          viewerFid: r,\n          allowReactions: e,\n          renderEmbeds: !1\n        }, v.cast_id.fid)\n      }, `cast-${v.cast_id.hash}`);\n    return null;\n  }))).filter((v) => v !== null), [e, r]);\n  return react__WEBPACK_IMPORTED_MODULE_0___default().useEffect(() => {\n    i(t).then(o);\n  }, [t, i]), n;\n}, Bm = ({\n  onClick: t\n}) => /* @__PURE__ */ U.jsx(\"svg\", {\n  width: \"18\",\n  height: \"17\",\n  viewBox: \"0 0 18 17\",\n  fill: \"none\",\n  xmlns: \"http://www.w3.org/2000/svg\",\n  onClick: (e) => t ? t(e) : void 0,\n  style: {\n    cursor: \"pointer\"\n  },\n  children: /* @__PURE__ */ U.jsx(\"path\", {\n    d: \"M6.22857 12.6828H7.01285C7.01285 12.2496 6.66172 11.8985 6.22857 11.8985V12.6828ZM6.22857 15.8199H5.4443C5.4443 16.1137 5.60848 16.3828 5.8697 16.5172C6.13092 16.6517 6.44537 16.6288 6.68443 16.4581L6.22857 15.8199ZM10.6205 12.6828V11.8985C10.4571 11.8985 10.2977 11.9496 10.1647 12.0446L10.6205 12.6828ZM1.78428 3.27146C1.78428 2.54955 2.3695 1.96433 3.09141 1.96433V0.395777C1.50321 0.395777 0.215723 1.68327 0.215723 3.27146H1.78428ZM1.78428 10.5914V3.27146H0.215723V10.5914H1.78428ZM3.0914 11.8985C2.3695 11.8985 1.78428 11.3133 1.78428 10.5914H0.215723C0.215723 12.1796 1.50321 13.4671 3.0914 13.4671V11.8985ZM6.22857 11.8985H3.0914V13.4671H6.22857V11.8985ZM7.01285 15.8199V12.6828H5.4443V15.8199H7.01285ZM10.1647 12.0446L5.77272 15.1817L6.68443 16.4581L11.0764 13.321L10.1647 12.0446ZM14.5941 11.8985H10.6205V13.4671H14.5941V11.8985ZM15.9013 10.5914C15.9013 11.3133 15.316 11.8985 14.5941 11.8985V13.4671C16.1823 13.4671 17.4698 12.1796 17.4698 10.5914H15.9013ZM15.9013 3.27146V10.5914H17.4698V3.27146H15.9013ZM14.5941 1.96433C15.316 1.96433 15.9013 2.54955 15.9013 3.27146H17.4698C17.4698 1.68326 16.1823 0.395777 14.5941 0.395777V1.96433ZM3.09141 1.96433H14.5941V0.395777H3.09141V1.96433Z\",\n    fill: \"#A0A3AD\"\n  })\n}), Rm = ({\n  fill: t,\n  onClick: e\n}) => /* @__PURE__ */ U.jsxs(\"svg\", {\n  width: \"16\",\n  height: \"15\",\n  viewBox: \"0 0 16 15\",\n  fill: t || \"none\",\n  xmlns: \"http://www.w3.org/2000/svg\",\n  onClick: (r) => e ? e(r) : void 0,\n  style: {\n    cursor: \"pointer\"\n  },\n  children: [/* @__PURE__ */ U.jsx(\"path\", {\n    d: \"M14.9245 14.2506C14.7258 14.2506 14.5352 14.1716 14.3946 14.0311C14.2541 13.8905 14.1751 13.6999 14.1751 13.5011V10.5034H11.1774C10.9787 10.5034 10.7881 10.4245 10.6475 10.2839C10.507 10.1434 10.428 9.95279 10.428 9.75403C10.428 9.55527 10.507 9.36465 10.6475 9.22411C10.7881 9.08357 10.9787 9.00461 11.1774 9.00461H14.9245C15.1233 9.00461 15.3139 9.08357 15.4545 9.22411C15.595 9.36465 15.674 9.55527 15.674 9.75403V13.5011C15.674 13.6999 15.595 13.8905 15.4545 14.0311C15.3139 14.1716 15.1233 14.2506 14.9245 14.2506ZM5.18207 6.00693H1.43497C1.23621 6.00693 1.04559 5.92797 0.905047 5.78743C0.764503 5.64688 0.685547 5.45627 0.685547 5.25751V1.51041C0.685547 1.31165 0.764503 1.12103 0.905047 0.980486C1.04559 0.839943 1.23621 0.760986 1.43497 0.760986C1.63373 0.760986 1.82434 0.839943 1.96489 0.980486C2.10543 1.12103 2.18439 1.31165 2.18439 1.51041V4.50809H5.18207C5.38083 4.50809 5.57145 4.58704 5.71199 4.72759C5.85253 4.86813 5.93149 5.05875 5.93149 5.25751C5.93149 5.45627 5.85253 5.64688 5.71199 5.78743C5.57145 5.92797 5.38083 6.00693 5.18207 6.00693Z\",\n    fill: t || \"#A0A3AD\"\n  }), /* @__PURE__ */ U.jsx(\"path\", {\n    d: \"M8.17934 15C6.33556 15.0003 4.55637 14.3209 3.18205 13.0918C1.80774 11.8627 0.934766 10.17 0.730106 8.33765C0.719281 8.23923 0.727945 8.13965 0.755606 8.04458C0.783266 7.94951 0.82938 7.86083 0.891315 7.78358C1.0164 7.62758 1.19833 7.52765 1.39709 7.50579C1.59585 7.48393 1.79515 7.54191 1.95116 7.667C2.10716 7.79208 2.20708 7.97401 2.22895 8.17277C2.37708 9.52376 2.97983 10.7843 3.93838 11.7478C4.89692 12.7113 6.15438 13.3205 7.50459 13.4755C8.85479 13.6306 10.2176 13.3223 11.3696 12.6012C12.5216 11.8801 13.3944 10.789 13.845 9.50674C13.8731 9.40817 13.9211 9.31642 13.986 9.23714C14.051 9.15787 14.1316 9.09277 14.2227 9.04586C14.3138 8.99895 14.4136 8.97123 14.5159 8.96442C14.6181 8.95761 14.7207 8.97185 14.8173 9.00625C14.9138 9.04066 15.0023 9.09451 15.0772 9.16446C15.1521 9.23442 15.2118 9.31899 15.2528 9.41296C15.2937 9.50693 15.3149 9.6083 15.3151 9.71079C15.3153 9.81329 15.2944 9.91473 15.2539 10.0089C14.7359 11.4705 13.7774 12.7355 12.5103 13.6294C11.2432 14.5233 9.73002 15.0022 8.17934 15ZM14.8792 7.50579C14.6939 7.50691 14.5148 7.43937 14.3764 7.3162C14.238 7.19302 14.1501 7.02295 14.1297 6.8388C13.975 5.49429 13.3699 4.24169 12.4128 3.28476C11.4558 2.32782 10.2031 1.72285 8.85858 1.56824C7.51405 1.41364 6.15676 1.7185 5.0075 2.43324C3.85823 3.14798 2.9846 4.23054 2.52872 5.50484C2.50062 5.6034 2.4526 5.69516 2.38763 5.77443C2.32266 5.85371 2.24212 5.91881 2.15099 5.96572C2.05987 6.01263 1.96008 6.04035 1.85781 6.04716C1.75555 6.05397 1.65297 6.03973 1.55642 6.00532C1.45988 5.97092 1.37141 5.91707 1.29651 5.84712C1.2216 5.77716 1.16183 5.69258 1.12091 5.59861C1.07999 5.50464 1.05878 5.40328 1.05859 5.30078C1.0584 5.19829 1.07923 5.09685 1.1198 5.00273C1.68406 3.40202 2.77497 2.04025 4.21397 1.14029C5.65297 0.240337 7.35485 -0.144505 9.04106 0.0487522C10.7273 0.242009 12.2979 1.00192 13.496 2.20411C14.6941 3.4063 15.4486 4.97958 15.6361 6.66644C15.6571 6.86306 15.5997 7.06004 15.4761 7.21445C15.3526 7.36887 15.173 7.4682 14.9766 7.4908L14.8792 7.50579Z\",\n    fill: t || \"#A0A3AD\"\n  })]\n}), Tm = ({\n  fill: t,\n  onClick: e\n}) => /* @__PURE__ */ U.jsxs(\"svg\", {\n  width: \"17\",\n  height: \"15\",\n  viewBox: \"0 0 17 15\",\n  fill: t ? \"red\" : \"none\",\n  xmlns: \"http://www.w3.org/2000/svg\",\n  onClick: (r) => e ? e(r) : void 0,\n  style: {\n    cursor: \"pointer\"\n  },\n  children: [/* @__PURE__ */ U.jsx(\"path\", {\n    d: \"M13.8719 2.25042L14.2947 1.58984L13.8719 2.25042C15.2467 3.13022 15.7676 5.22206 14.8856 7.61317C14.0436 9.89583 11.9555 12.2374 8.51573 13.3648C5.07606 12.2374 2.98799 9.89584 2.14596 7.61316C1.26392 5.22203 1.7848 3.13022 3.15951 2.25042L3.15951 2.25042C4.58542 1.33783 5.64997 1.52983 6.39945 1.92503C7.21272 2.35388 7.73108 3.07114 7.86143 3.26838L8.51573 4.25838L9.17002 3.26838C9.30038 3.07113 9.81873 2.35388 10.632 1.92503C11.3815 1.52983 12.446 1.33783 13.8719 2.25042Z\",\n    stroke: t || \"#A0A3AD\",\n    strokeWidth: \"1.56855\"\n  }), /* @__PURE__ */ U.jsx(\"mask\", {\n    id: \"path-2-inside-1_187_1051\",\n    fill: \"white\",\n    children: /* @__PURE__ */ U.jsx(\"path\", {\n      d: \"M8.58444 13.9397C7.76139 13.6864 7.05334 13.3937 6.29976 12.9825C5.95633 12.7951 5.62285 12.5895 5.3003 12.3681C5.14416 12.2609 4.99108 12.1493 4.84063 12.0343C4.78132 11.9889 4.88038 12.0652 4.82156 12.0195C4.80388 12.0058 4.7863 11.9919 4.76869 11.9781C4.73364 11.9505 4.69884 11.9225 4.66413 11.8945C4.58948 11.8342 4.51582 11.7727 4.4428 11.7105C3.90499 11.252 3.41381 10.7389 2.98016 10.1809C3.01856 10.2303 2.97651 10.176 2.97064 10.1683C2.9583 10.1522 2.94604 10.1359 2.9338 10.1197C2.90939 10.0874 2.88527 10.0548 2.86126 10.0221C2.80961 9.95189 2.75908 9.8808 2.70932 9.8092C2.61492 9.67345 2.52441 9.535 2.4371 9.39457C2.2673 9.12145 2.11213 8.83926 1.97147 8.55006C1.93849 8.48228 1.90657 8.41396 1.87531 8.34537C1.85978 8.3113 1.84459 8.27709 1.82948 8.24284C1.82195 8.22575 1.81456 8.20864 1.80714 8.19152C1.80167 8.17889 1.76856 8.10061 1.79664 8.16736C1.73728 8.0262 1.68205 7.88329 1.63029 7.73916C1.52982 7.45942 1.44498 7.17407 1.37575 6.88502C1.34218 6.74492 1.31301 6.60379 1.28746 6.46202C1.2754 6.39502 1.2645 6.32782 1.2543 6.26052C1.24925 6.22713 1.24453 6.19369 1.23994 6.16023C1.25136 6.24358 1.23495 6.11772 1.23231 6.09532C1.20042 5.82444 1.18535 5.55158 1.18721 5.27885C1.18811 5.14691 1.19374 5.01501 1.20334 4.88343C1.20788 4.82128 1.21368 4.75922 1.22023 4.69726C1.2235 4.66651 1.22713 4.6358 1.23089 4.60511C1.23278 4.58982 1.23477 4.57457 1.23678 4.5593C1.22562 4.64425 1.23563 4.56956 1.23823 4.55163C1.27428 4.30419 1.32861 4.05943 1.40097 3.82006C1.43614 3.70375 1.47635 3.58899 1.52072 3.47587C1.53125 3.449 1.54219 3.42229 1.55326 3.39564C1.51941 3.47716 1.55889 3.38334 1.56717 3.36464C1.59226 3.30803 1.61886 3.25209 1.64643 3.19664C1.75101 2.98624 1.87476 2.78549 2.01534 2.59724C2.02371 2.58603 2.03221 2.57492 2.04071 2.5638C1.99275 2.62656 2.02446 2.58496 2.03493 2.57169C2.05223 2.54974 2.06993 2.52808 2.08773 2.50653C2.12631 2.45984 2.16629 2.41434 2.20713 2.36962C2.28587 2.28341 2.36926 2.20151 2.456 2.12339C2.49787 2.08568 2.54084 2.0492 2.58443 2.01352C2.60631 1.99561 2.62852 1.97808 2.65084 1.9607C2.58164 2.01466 2.67191 1.94557 2.68962 1.93265C2.83338 1.8277 2.98587 1.7348 3.14013 1.6463C3.54393 1.41459 3.92437 1.25567 4.3831 1.15072C4.47716 1.12921 4.57219 1.11204 4.6676 1.09771C4.74483 1.08611 4.61527 1.10399 4.69217 1.09444C4.71513 1.0916 4.73817 1.08917 4.76119 1.08677C4.81403 1.08124 4.86704 1.07739 4.92007 1.07423C5.10084 1.06348 5.28237 1.06851 5.46252 1.0864C5.48336 1.08846 5.50417 1.09092 5.52495 1.09338C5.59508 1.10167 5.46943 1.08526 5.53899 1.09521C5.57965 1.10103 5.62016 1.10795 5.66059 1.11524C5.74647 1.13073 5.83159 1.1503 5.91604 1.17227C6.0728 1.21311 6.22621 1.26621 6.37595 1.32786C6.31111 1.30115 6.41877 1.34702 6.43584 1.35477C6.46987 1.3702 6.50356 1.38639 6.53714 1.4028C6.60865 1.43779 6.67886 1.47543 6.74817 1.51462C6.87662 1.58723 7.00062 1.66753 7.12092 1.7529C7.14882 1.77271 7.17637 1.79297 7.20383 1.81338C7.21739 1.82348 7.23087 1.8337 7.24432 1.84396C7.29158 1.87992 7.1988 1.80839 7.24529 1.84482C7.30109 1.88853 7.35568 1.93375 7.40949 1.97982C7.50652 2.06288 7.59994 2.15008 7.69053 2.24011C7.84008 2.38879 7.98044 2.54677 8.11149 2.71194C8.12572 2.72987 8.17533 2.79414 8.11485 2.7157C8.12636 2.73065 8.13776 2.74568 8.1491 2.76075C8.1694 2.78769 8.18934 2.81491 8.20905 2.8423C8.23825 2.88286 8.2667 2.92398 8.29429 2.96566C8.40374 3.131 8.6286 3.131 8.73805 2.96566C8.76707 2.92181 8.79712 2.87866 8.82785 2.83598C8.84783 2.80823 8.86819 2.78075 8.88875 2.75344C8.90242 2.73529 8.94928 2.67474 8.88935 2.75214C8.90409 2.73312 8.919 2.71424 8.93399 2.69542C9.0671 2.52834 9.21071 2.36968 9.36261 2.21954C9.45411 2.12907 9.5493 2.04234 9.64732 1.95897C9.69737 1.91641 9.74847 1.87507 9.80017 1.83456C9.7388 1.88263 9.82694 1.81457 9.84213 1.80327C9.87427 1.77937 9.90683 1.75606 9.9396 1.73301C10.0608 1.64773 10.1866 1.56915 10.3159 1.49682C10.3802 1.46084 10.4457 1.42703 10.5119 1.39467C10.5455 1.37823 10.5795 1.36251 10.6136 1.34704C10.6308 1.33926 10.6481 1.33171 10.6654 1.32417C10.6915 1.31296 10.6885 1.3142 10.6564 1.3279C10.6681 1.32303 10.6798 1.31822 10.6916 1.31349C10.8423 1.25235 10.9973 1.20246 11.1548 1.16239C11.2332 1.14248 11.3123 1.12599 11.3918 1.11166C11.4323 1.10435 11.473 1.09815 11.5138 1.09231C11.4471 1.10186 11.5171 1.09226 11.5281 1.09095C11.5559 1.08767 11.5838 1.08499 11.6117 1.0824C11.793 1.06553 11.9757 1.06513 12.1573 1.0771C12.203 1.08011 12.2485 1.08444 12.294 1.08921C12.3172 1.09163 12.3402 1.0945 12.3633 1.09734C12.3036 1.08994 12.3813 1.10022 12.3881 1.10123C12.4921 1.11685 12.5952 1.13785 12.6975 1.16193C13.1586 1.27048 13.5378 1.44037 13.9464 1.67761C14.0904 1.76129 14.2314 1.8507 14.3656 1.9495C14.377 1.95791 14.3884 1.96648 14.3997 1.97503C14.4419 2.00688 14.351 1.93696 14.3926 1.96945C14.4149 1.98683 14.4369 2.00462 14.4588 2.02252C14.5059 2.06115 14.5519 2.1013 14.5971 2.14228C14.6835 2.22073 14.7656 2.30388 14.8439 2.39035C14.8815 2.43176 14.9178 2.47427 14.9534 2.51736C14.9712 2.53891 14.9887 2.56077 15.006 2.58274C15.0384 2.62388 14.9682 2.53335 15 2.575C15.0114 2.58983 15.0225 2.60479 15.0336 2.61978C15.1736 2.80871 15.2946 3.01142 15.3985 3.22224C15.4238 3.27356 15.4477 3.32553 15.4709 3.37782C15.4767 3.39096 15.4824 3.40414 15.4881 3.41734C15.5093 3.46656 15.464 3.35945 15.4845 3.40902C15.4975 3.44013 15.5099 3.47148 15.5221 3.50289C15.5661 3.61632 15.6049 3.73175 15.6398 3.84833C15.7115 4.08832 15.763 4.33416 15.7984 4.58204C15.8064 4.63806 15.7901 4.51842 15.7975 4.57463C15.7995 4.58992 15.8014 4.60521 15.8033 4.6205C15.807 4.6512 15.8104 4.68197 15.8137 4.71273C15.8208 4.77994 15.8264 4.84732 15.8312 4.91474C15.8404 5.04658 15.8447 5.17876 15.8453 5.31093C15.8464 5.58418 15.8287 5.85737 15.7961 6.12862C15.7941 6.14529 15.7919 6.16192 15.7898 6.17856C15.7822 6.23827 15.7983 6.11722 15.7901 6.17697C15.7855 6.21044 15.7806 6.24389 15.7755 6.27731C15.7644 6.35031 15.752 6.4231 15.7388 6.49573C15.7129 6.63769 15.6823 6.7788 15.6484 6.91905C15.5784 7.20843 15.4909 7.49348 15.3897 7.77343C15.3648 7.84232 15.3388 7.9108 15.3121 7.97902C15.2987 8.01338 15.2849 8.0476 15.2711 8.08179C15.2641 8.09896 15.257 8.11604 15.25 8.13315C15.2452 8.14458 15.2405 8.15598 15.2357 8.16738C15.2496 8.13453 15.251 8.13117 15.2399 8.15734C15.1786 8.30137 15.1131 8.44355 15.0443 8.58416C14.9028 8.87351 14.7451 9.15483 14.5745 9.42799C14.4868 9.56844 14.395 9.70634 14.3002 9.84213C14.254 9.90821 14.2069 9.97355 14.1592 10.0385C14.1351 10.0711 14.1108 10.1036 14.0864 10.136C14.0741 10.1522 14.0617 10.1684 14.0494 10.1845C14.0319 10.2073 14.0329 10.2061 14.0522 10.181C14.0439 10.1918 14.0355 10.2025 14.0271 10.2132C13.8135 10.4869 13.5849 10.7488 13.3445 10.9992C13.0948 11.2594 12.8309 11.5058 12.556 11.7391C12.4884 11.7965 12.4199 11.8528 12.3509 11.9086C12.3162 11.9366 12.2812 11.9643 12.2461 11.992C12.2285 12.0058 12.2108 12.0196 12.1931 12.0333C12.2377 11.9987 12.1636 12.0558 12.156 12.0616C12.005 12.1765 11.8508 12.2871 11.6942 12.3941C11.3706 12.6153 11.0348 12.8185 10.6904 13.0055C10.5122 13.1023 10.3313 13.1939 10.1484 13.2815C10.059 13.3243 9.96904 13.3658 9.87868 13.4064C9.8331 13.4269 9.78733 13.4469 9.74151 13.4669C9.7185 13.4769 9.69541 13.4868 9.67233 13.4966C9.6442 13.5086 9.64146 13.5098 9.66417 13.5002C9.64864 13.5067 9.63313 13.5132 9.61758 13.5196C9.2349 13.6788 8.84398 13.8179 8.44786 13.9398C8.31409 13.9809 8.2304 14.1178 8.26839 14.2559C8.3047 14.3878 8.45064 14.4765 8.5845 14.4353C10.1534 13.9525 11.626 13.1871 12.8857 12.131C13.9425 11.245 14.8349 10.1456 15.4543 8.91165C15.9942 7.83608 16.3357 6.64744 16.3583 5.43967C16.3774 4.41628 16.149 3.35704 15.5742 2.49789C15.2929 2.07732 14.9371 1.71816 14.5205 1.43134C13.7956 0.932295 12.9294 0.592822 12.045 0.557214C10.7717 0.505949 9.60126 1.17157 8.7697 2.09685C8.59779 2.28813 8.43634 2.49172 8.29431 2.70629C8.44223 2.70629 8.59015 2.70629 8.73807 2.70629C8.22434 1.93023 7.48255 1.25338 6.6264 0.880424C5.9305 0.577258 5.18555 0.490164 4.43721 0.617179C3.98766 0.69348 3.55546 0.856508 3.14849 1.05915C2.81945 1.22296 2.50653 1.41842 2.22115 1.65017C1.44904 2.27713 0.973026 3.20995 0.783732 4.17519C0.56509 5.29004 0.68737 6.45381 1.02051 7.53339C1.41084 8.79827 2.09407 9.95916 2.95641 10.9589C3.94757 12.1081 5.19614 13.0306 6.5582 13.6933C7.16712 13.9896 7.8008 14.2362 8.44788 14.4353C8.58174 14.4765 8.72768 14.3878 8.76399 14.2559C8.80189 14.1177 8.71821 13.9809 8.58444 13.9397Z\"\n    })\n  }), /* @__PURE__ */ U.jsx(\"path\", {\n    d: \"M8.58444 13.9397C7.76139 13.6864 7.05334 13.3937 6.29976 12.9825C5.95633 12.7951 5.62285 12.5895 5.3003 12.3681C5.14416 12.2609 4.99108 12.1493 4.84063 12.0343C4.78132 11.9889 4.88038 12.0652 4.82156 12.0195C4.80388 12.0058 4.7863 11.9919 4.76869 11.9781C4.73364 11.9505 4.69884 11.9225 4.66413 11.8945C4.58948 11.8342 4.51582 11.7727 4.4428 11.7105C3.90499 11.252 3.41381 10.7389 2.98016 10.1809C3.01856 10.2303 2.97651 10.176 2.97064 10.1683C2.9583 10.1522 2.94604 10.1359 2.9338 10.1197C2.90939 10.0874 2.88527 10.0548 2.86126 10.0221C2.80961 9.95189 2.75908 9.8808 2.70932 9.8092C2.61492 9.67345 2.52441 9.535 2.4371 9.39457C2.2673 9.12145 2.11213 8.83926 1.97147 8.55006C1.93849 8.48228 1.90657 8.41396 1.87531 8.34537C1.85978 8.3113 1.84459 8.27709 1.82948 8.24284C1.82195 8.22575 1.81456 8.20864 1.80714 8.19152C1.80167 8.17889 1.76856 8.10061 1.79664 8.16736C1.73728 8.0262 1.68205 7.88329 1.63029 7.73916C1.52982 7.45942 1.44498 7.17407 1.37575 6.88502C1.34218 6.74492 1.31301 6.60379 1.28746 6.46202C1.2754 6.39502 1.2645 6.32782 1.2543 6.26052C1.24925 6.22713 1.24453 6.19369 1.23994 6.16023C1.25136 6.24358 1.23495 6.11772 1.23231 6.09532C1.20042 5.82444 1.18535 5.55158 1.18721 5.27885C1.18811 5.14691 1.19374 5.01501 1.20334 4.88343C1.20788 4.82128 1.21368 4.75922 1.22023 4.69726C1.2235 4.66651 1.22713 4.6358 1.23089 4.60511C1.23278 4.58982 1.23477 4.57457 1.23678 4.5593C1.22562 4.64425 1.23563 4.56956 1.23823 4.55163C1.27428 4.30419 1.32861 4.05943 1.40097 3.82006C1.43614 3.70375 1.47635 3.58899 1.52072 3.47587C1.53125 3.449 1.54219 3.42229 1.55326 3.39564C1.51941 3.47716 1.55889 3.38334 1.56717 3.36464C1.59226 3.30803 1.61886 3.25209 1.64643 3.19664C1.75101 2.98624 1.87476 2.78549 2.01534 2.59724C2.02371 2.58603 2.03221 2.57492 2.04071 2.5638C1.99275 2.62656 2.02446 2.58496 2.03493 2.57169C2.05223 2.54974 2.06993 2.52808 2.08773 2.50653C2.12631 2.45984 2.16629 2.41434 2.20713 2.36962C2.28587 2.28341 2.36926 2.20151 2.456 2.12339C2.49787 2.08568 2.54084 2.0492 2.58443 2.01352C2.60631 1.99561 2.62852 1.97808 2.65084 1.9607C2.58164 2.01466 2.67191 1.94557 2.68962 1.93265C2.83338 1.8277 2.98587 1.7348 3.14013 1.6463C3.54393 1.41459 3.92437 1.25567 4.3831 1.15072C4.47716 1.12921 4.57219 1.11204 4.6676 1.09771C4.74483 1.08611 4.61527 1.10399 4.69217 1.09444C4.71513 1.0916 4.73817 1.08917 4.76119 1.08677C4.81403 1.08124 4.86704 1.07739 4.92007 1.07423C5.10084 1.06348 5.28237 1.06851 5.46252 1.0864C5.48336 1.08846 5.50417 1.09092 5.52495 1.09338C5.59508 1.10167 5.46943 1.08526 5.53899 1.09521C5.57965 1.10103 5.62016 1.10795 5.66059 1.11524C5.74647 1.13073 5.83159 1.1503 5.91604 1.17227C6.0728 1.21311 6.22621 1.26621 6.37595 1.32786C6.31111 1.30115 6.41877 1.34702 6.43584 1.35477C6.46987 1.3702 6.50356 1.38639 6.53714 1.4028C6.60865 1.43779 6.67886 1.47543 6.74817 1.51462C6.87662 1.58723 7.00062 1.66753 7.12092 1.7529C7.14882 1.77271 7.17637 1.79297 7.20383 1.81338C7.21739 1.82348 7.23087 1.8337 7.24432 1.84396C7.29158 1.87992 7.1988 1.80839 7.24529 1.84482C7.30109 1.88853 7.35568 1.93375 7.40949 1.97982C7.50652 2.06288 7.59994 2.15008 7.69053 2.24011C7.84008 2.38879 7.98044 2.54677 8.11149 2.71194C8.12572 2.72987 8.17533 2.79414 8.11485 2.7157C8.12636 2.73065 8.13776 2.74568 8.1491 2.76075C8.1694 2.78769 8.18934 2.81491 8.20905 2.8423C8.23825 2.88286 8.2667 2.92398 8.29429 2.96566C8.40374 3.131 8.6286 3.131 8.73805 2.96566C8.76707 2.92181 8.79712 2.87866 8.82785 2.83598C8.84783 2.80823 8.86819 2.78075 8.88875 2.75344C8.90242 2.73529 8.94928 2.67474 8.88935 2.75214C8.90409 2.73312 8.919 2.71424 8.93399 2.69542C9.0671 2.52834 9.21071 2.36968 9.36261 2.21954C9.45411 2.12907 9.5493 2.04234 9.64732 1.95897C9.69737 1.91641 9.74847 1.87507 9.80017 1.83456C9.7388 1.88263 9.82694 1.81457 9.84213 1.80327C9.87427 1.77937 9.90683 1.75606 9.9396 1.73301C10.0608 1.64773 10.1866 1.56915 10.3159 1.49682C10.3802 1.46084 10.4457 1.42703 10.5119 1.39467C10.5455 1.37823 10.5795 1.36251 10.6136 1.34704C10.6308 1.33926 10.6481 1.33171 10.6654 1.32417C10.6915 1.31296 10.6885 1.3142 10.6564 1.3279C10.6681 1.32303 10.6798 1.31822 10.6916 1.31349C10.8423 1.25235 10.9973 1.20246 11.1548 1.16239C11.2332 1.14248 11.3123 1.12599 11.3918 1.11166C11.4323 1.10435 11.473 1.09815 11.5138 1.09231C11.4471 1.10186 11.5171 1.09226 11.5281 1.09095C11.5559 1.08767 11.5838 1.08499 11.6117 1.0824C11.793 1.06553 11.9757 1.06513 12.1573 1.0771C12.203 1.08011 12.2485 1.08444 12.294 1.08921C12.3172 1.09163 12.3402 1.0945 12.3633 1.09734C12.3036 1.08994 12.3813 1.10022 12.3881 1.10123C12.4921 1.11685 12.5952 1.13785 12.6975 1.16193C13.1586 1.27048 13.5378 1.44037 13.9464 1.67761C14.0904 1.76129 14.2314 1.8507 14.3656 1.9495C14.377 1.95791 14.3884 1.96648 14.3997 1.97503C14.4419 2.00688 14.351 1.93696 14.3926 1.96945C14.4149 1.98683 14.4369 2.00462 14.4588 2.02252C14.5059 2.06115 14.5519 2.1013 14.5971 2.14228C14.6835 2.22073 14.7656 2.30388 14.8439 2.39035C14.8815 2.43176 14.9178 2.47427 14.9534 2.51736C14.9712 2.53891 14.9887 2.56077 15.006 2.58274C15.0384 2.62388 14.9682 2.53335 15 2.575C15.0114 2.58983 15.0225 2.60479 15.0336 2.61978C15.1736 2.80871 15.2946 3.01142 15.3985 3.22224C15.4238 3.27356 15.4477 3.32553 15.4709 3.37782C15.4767 3.39096 15.4824 3.40414 15.4881 3.41734C15.5093 3.46656 15.464 3.35945 15.4845 3.40902C15.4975 3.44013 15.5099 3.47148 15.5221 3.50289C15.5661 3.61632 15.6049 3.73175 15.6398 3.84833C15.7115 4.08832 15.763 4.33416 15.7984 4.58204C15.8064 4.63806 15.7901 4.51842 15.7975 4.57463C15.7995 4.58992 15.8014 4.60521 15.8033 4.6205C15.807 4.6512 15.8104 4.68197 15.8137 4.71273C15.8208 4.77994 15.8264 4.84732 15.8312 4.91474C15.8404 5.04658 15.8447 5.17876 15.8453 5.31093C15.8464 5.58418 15.8287 5.85737 15.7961 6.12862C15.7941 6.14529 15.7919 6.16192 15.7898 6.17856C15.7822 6.23827 15.7983 6.11722 15.7901 6.17697C15.7855 6.21044 15.7806 6.24389 15.7755 6.27731C15.7644 6.35031 15.752 6.4231 15.7388 6.49573C15.7129 6.63769 15.6823 6.7788 15.6484 6.91905C15.5784 7.20843 15.4909 7.49348 15.3897 7.77343C15.3648 7.84232 15.3388 7.9108 15.3121 7.97902C15.2987 8.01338 15.2849 8.0476 15.2711 8.08179C15.2641 8.09896 15.257 8.11604 15.25 8.13315C15.2452 8.14458 15.2405 8.15598 15.2357 8.16738C15.2496 8.13453 15.251 8.13117 15.2399 8.15734C15.1786 8.30137 15.1131 8.44355 15.0443 8.58416C14.9028 8.87351 14.7451 9.15483 14.5745 9.42799C14.4868 9.56844 14.395 9.70634 14.3002 9.84213C14.254 9.90821 14.2069 9.97355 14.1592 10.0385C14.1351 10.0711 14.1108 10.1036 14.0864 10.136C14.0741 10.1522 14.0617 10.1684 14.0494 10.1845C14.0319 10.2073 14.0329 10.2061 14.0522 10.181C14.0439 10.1918 14.0355 10.2025 14.0271 10.2132C13.8135 10.4869 13.5849 10.7488 13.3445 10.9992C13.0948 11.2594 12.8309 11.5058 12.556 11.7391C12.4884 11.7965 12.4199 11.8528 12.3509 11.9086C12.3162 11.9366 12.2812 11.9643 12.2461 11.992C12.2285 12.0058 12.2108 12.0196 12.1931 12.0333C12.2377 11.9987 12.1636 12.0558 12.156 12.0616C12.005 12.1765 11.8508 12.2871 11.6942 12.3941C11.3706 12.6153 11.0348 12.8185 10.6904 13.0055C10.5122 13.1023 10.3313 13.1939 10.1484 13.2815C10.059 13.3243 9.96904 13.3658 9.87868 13.4064C9.8331 13.4269 9.78733 13.4469 9.74151 13.4669C9.7185 13.4769 9.69541 13.4868 9.67233 13.4966C9.6442 13.5086 9.64146 13.5098 9.66417 13.5002C9.64864 13.5067 9.63313 13.5132 9.61758 13.5196C9.2349 13.6788 8.84398 13.8179 8.44786 13.9398C8.31409 13.9809 8.2304 14.1178 8.26839 14.2559C8.3047 14.3878 8.45064 14.4765 8.5845 14.4353C10.1534 13.9525 11.626 13.1871 12.8857 12.131C13.9425 11.245 14.8349 10.1456 15.4543 8.91165C15.9942 7.83608 16.3357 6.64744 16.3583 5.43967C16.3774 4.41628 16.149 3.35704 15.5742 2.49789C15.2929 2.07732 14.9371 1.71816 14.5205 1.43134C13.7956 0.932295 12.9294 0.592822 12.045 0.557214C10.7717 0.505949 9.60126 1.17157 8.7697 2.09685C8.59779 2.28813 8.43634 2.49172 8.29431 2.70629C8.44223 2.70629 8.59015 2.70629 8.73807 2.70629C8.22434 1.93023 7.48255 1.25338 6.6264 0.880424C5.9305 0.577258 5.18555 0.490164 4.43721 0.617179C3.98766 0.69348 3.55546 0.856508 3.14849 1.05915C2.81945 1.22296 2.50653 1.41842 2.22115 1.65017C1.44904 2.27713 0.973026 3.20995 0.783732 4.17519C0.56509 5.29004 0.68737 6.45381 1.02051 7.53339C1.41084 8.79827 2.09407 9.95916 2.95641 10.9589C3.94757 12.1081 5.19614 13.0306 6.5582 13.6933C7.16712 13.9896 7.8008 14.2362 8.44788 14.4353C8.58174 14.4765 8.72768 14.3878 8.76399 14.2559C8.80189 14.1177 8.71821 13.9809 8.58444 13.9397Z\",\n    stroke: t || \"#A0A3AD\",\n    strokeWidth: \"3.13711\",\n    mask: \"url(#path-2-inside-1_187_1051)\"\n  })]\n});\nfunction Ul({\n  onClick: t,\n  size: e = 24\n}) {\n  return /* @__PURE__ */ U.jsx(\"svg\", {\n    \"aria-hidden\": \"true\",\n    focusable: \"false\",\n    role: \"img\",\n    viewBox: \"0 0 16 16\",\n    width: e,\n    height: e,\n    fill: \"#4A4A4A\",\n    style: {\n      display: \"inline-block\",\n      userSelect: \"none\",\n      verticalAlign: \"text-bottom\",\n      overflow: \"visible\",\n      cursor: \"pointer\",\n      padding: \"4px\"\n    },\n    onClick: t,\n    children: /* @__PURE__ */ U.jsx(\"path\", {\n      d: \"M3.72 3.72a.75.75 0 0 1 1.06 0L8 6.94l3.22-3.22a.749.749 0 0 1 1.275.326.749.749 0 0 1-.215.734L9.06 8l3.22 3.22a.749.749 0 0 1-.326 1.275.749.749 0 0 1-.734-.215L8 9.06l-3.22 3.22a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042L6.94 8 3.72 4.78a.75.75 0 0 1 0-1.06Z\"\n    })\n  });\n}\nconst Lm = () => Vt, Om = /* @__PURE__ */ (0,_pigment_css_react__WEBPACK_IMPORTED_MODULE_2__.styled)(Lm())({\n  classes: [\"rect7e5\"]\n}), Nm = () => Vt, jm = /* @__PURE__ */ (0,_pigment_css_react__WEBPACK_IMPORTED_MODULE_2__.styled)(Nm())({\n  classes: [\"p13mqntt\"]\n}), Um = () => Vt, Fm = /* @__PURE__ */ (0,_pigment_css_react__WEBPACK_IMPORTED_MODULE_2__.styled)(Um())({\n  classes: [\"p1r47dz2\"]\n}), Pm = () => Vt, Dm = /* @__PURE__ */ (0,_pigment_css_react__WEBPACK_IMPORTED_MODULE_2__.styled)(Pm())({\n  classes: [\"cnojpqv\"]\n}), $m = ({\n  hash: t,\n  reactions: e,\n  onComment: r,\n  onRecast: n,\n  onLike: o,\n  isLiked: i\n}) => {\n  const {\n    client_id: c,\n    user: f,\n    isAuthenticated: v\n  } = lr(), [x, b] = react__WEBPACK_IMPORTED_MODULE_0___default().useState(!1), [S, T] = react__WEBPACK_IMPORTED_MODULE_0___default().useState({\n    top: 0,\n    left: 0\n  }), [C, P] = react__WEBPACK_IMPORTED_MODULE_0___default().useState(null), [B, R] = react__WEBPACK_IMPORTED_MODULE_0___default().useState(i), [z, K] = react__WEBPACK_IMPORTED_MODULE_0___default().useState(!1), Z = react__WEBPACK_IMPORTED_MODULE_0___default().useRef(null), Q = react__WEBPACK_IMPORTED_MODULE_0___default().useRef({\n    comment: null,\n    recast: null,\n    like: null\n  });\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    R(e.likes.some((V) => V.fid === (f == null ? void 0 : f.fid))), K(e.recasts.some((V) => V.fid === (f == null ? void 0 : f.fid)));\n  }, [e, f]), (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    const V = localStorage.getItem(Zn.NEYNAR_AUTHENTICATED_USER);\n    if (V)\n      try {\n        P(JSON.parse(V).signer_uuid);\n      } catch (ee) {\n        console.error(\"Error parsing JSON from local storage:\", ee), P(null);\n      }\n    else\n      console.warn(\"No NEYNAR_AUTHENTICATED_USER found in local storage.\");\n  }, [v]), (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    (C || v) && x && b(!1);\n  }, [C, v, x]);\n  const j = async (V, ee) => {\n    if (C)\n      switch (ee) {\n        case \"comment\":\n          if (r)\n            r();\n          else\n            throw new Error(\"No comment handler function provided\");\n          break;\n        case \"recast\":\n          if (n)\n            K(n());\n          else\n            throw new Error(\"No recast handler function provided\");\n          break;\n        case \"like\":\n          if (o)\n            R(o());\n          else\n            throw new Error(\"No like handler function provided\");\n          break;\n      }\n    const G = Q.current[ee];\n    if (G) {\n      const N = G.getBoundingClientRect(), O = Z.current;\n      if (O) {\n        const L = O.getBoundingClientRect();\n        T({\n          top: N.top - L.height - 10,\n          left: N.left + N.width / 2 - L.width / 2\n        });\n      }\n    }\n  };\n  return /* @__PURE__ */ U.jsxs(Om, {\n    children: [x && /* @__PURE__ */ U.jsxs(jm, {\n      ref: Z,\n      style: {\n        top: S.top,\n        left: S.left\n      },\n      children: [/* @__PURE__ */ U.jsx(Fm, {\n        children: /* @__PURE__ */ U.jsx(fm, {\n          variant: wr.NEYNAR\n        })\n      }), /* @__PURE__ */ U.jsx(Dm, {\n        children: /* @__PURE__ */ U.jsx(Ul, {\n          onClick: () => b(!1),\n          size: 16\n        })\n      })]\n    }), /* @__PURE__ */ U.jsx(Vt, {\n      style: {\n        display: \"flex\",\n        justifyContent: \"space-between\",\n        alignItems: \"center\"\n      },\n      children: /* @__PURE__ */ U.jsxs(Vt, {\n        spacingVertical: \"15px\",\n        style: {\n          display: \"flex\",\n          gap: \"10px\"\n        },\n        children: [/* @__PURE__ */ U.jsx(\"div\", {\n          ref: (V) => Q.current.comment = V,\n          children: /* @__PURE__ */ U.jsx(Bm, {\n            onClick: (V) => j(V, \"comment\")\n          })\n        }), /* @__PURE__ */ U.jsx(\"div\", {\n          ref: (V) => Q.current.recast = V,\n          children: /* @__PURE__ */ U.jsx(Rm, {\n            fill: z ? \"green\" : void 0,\n            onClick: (V) => j(V, \"recast\")\n          })\n        }), /* @__PURE__ */ U.jsx(\"div\", {\n          ref: (V) => Q.current.like = V,\n          children: /* @__PURE__ */ U.jsx(Tm, {\n            fill: B ? \"red\" : void 0,\n            onClick: (V) => j(V, \"like\")\n          })\n        })]\n      })\n    })]\n  });\n};\nfunction zm({\n  onClick: t\n}) {\n  return /* @__PURE__ */ U.jsx(\"svg\", {\n    style: {\n      cursor: \"pointer\"\n    },\n    width: \"16\",\n    height: \"15\",\n    viewBox: \"0 0 16 15\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    onClick: (e) => t ? t(e) : void 0,\n    children: /* @__PURE__ */ U.jsx(\"path\", {\n      d: \"M15.2003 7.49063C14.7504 7.49063 14.4504 7.79057 14.4504 8.24048V12.7396C14.4504 13.1895 14.1505 13.4894 13.7006 13.4894H3.20268C2.75277 13.4894 2.45283 13.1895 2.45283 12.7396V8.24048C2.45283 7.79057 2.15289 7.49063 1.70298 7.49063C1.25307 7.49063 0.953125 7.79057 0.953125 8.24048V12.7396C0.953125 14.0143 1.92793 14.9891 3.20268 14.9891H13.7006C14.9753 14.9891 15.9501 14.0143 15.9501 12.7396V8.24048C15.9501 7.79057 15.6502 7.49063 15.2003 7.49063ZM5.97713 4.26627L7.70178 2.54161V9.74018C7.70178 10.1901 8.00172 10.49 8.45163 10.49C8.90155 10.49 9.20149 10.1901 9.20149 9.74018V2.54161L10.9261 4.26627C11.2261 4.56621 11.676 4.56621 11.9759 4.26627C12.2759 3.96633 12.2759 3.51642 11.9759 3.21648L8.97653 0.217073C8.90155 0.142088 8.82656 0.0671031 8.75157 0.0671031C8.6016 -0.00788202 8.37665 -0.00788202 8.15169 0.0671031C8.07671 0.0671031 8.00172 0.142088 7.92674 0.217073L4.92734 3.21648C4.62739 3.51642 4.62739 3.96633 4.92734 4.26627C5.22728 4.56621 5.67719 4.56621 5.97713 4.26627Z\",\n      fill: \"#A0A3AD\"\n    })\n  });\n}\nconst Au = ({\n  url: t\n}) => {\n  const [e, r] = react__WEBPACK_IMPORTED_MODULE_0___default().useState(!1), n = async (o) => {\n    try {\n      await navigator.clipboard.writeText(t), r(!0), setTimeout(() => {\n        r(!1);\n      }, 2e3);\n    } catch (i) {\n      console.error(\"Failed to copy the text to clipboard:\", i);\n    }\n  };\n  return /* @__PURE__ */ U.jsx(\"div\", {\n    children: e ? /* @__PURE__ */ U.jsx(\"svg\", {\n      style: {\n        cursor: \"pointer\",\n        fill: \"green\"\n      },\n      width: \"16\",\n      height: \"15\",\n      viewBox: \"0 0 16 15\",\n      xmlns: \"http://www.w3.org/2000/svg\",\n      children: /* @__PURE__ */ U.jsx(\"path\", {\n        d: \"M5.99967 12.8136L1.71967 8.53364L0.559673 9.69364L5.99967 15.1336L16.4397 4.69364L15.2797 3.53364L5.99967 12.8136Z\"\n      })\n    }) : /* @__PURE__ */ U.jsx(zm, {\n      onClick: n\n    })\n  });\n}, qm = () => /* @__PURE__ */ U.jsxs(\"svg\", {\n  width: \"10\",\n  height: \"10\",\n  viewBox: \"0 0 10 10\",\n  fill: \"none\",\n  xmlns: \"http://www.w3.org/2000/svg\",\n  children: [/* @__PURE__ */ U.jsx(\"path\", {\n    d: \"M5.85855 0.555664H8.31281M8.31281 0.555664V2.73754M8.31281 0.555664L4.31445 4.11122\",\n    stroke: \"#FFFFFF\",\n    \"stroke-linecap\": \"round\",\n    \"stroke-linejoin\": \"round\"\n  }), /* @__PURE__ */ U.jsx(\"path\", {\n    \"fill-rule\": \"evenodd\",\n    \"clip-rule\": \"evenodd\",\n    d: \"M3.31445 1H1.31445C0.762168 1 0.314453 1.44772 0.314453 2V8C0.314453 8.55228 0.762168 9 1.31445 9H7.31445C7.86674 9 8.31445 8.55228 8.31445 8V6H7.31445V8H1.31445V2H3.31445V1Z\",\n    fill: \"#FFFFFF\"\n  })]\n}), Zm = () => /* @__PURE__ */ U.jsx(\"svg\", {\n  width: \"10\",\n  height: \"14\",\n  viewBox: \"0 0 10 14\",\n  fill: \"none\",\n  xmlns: \"http://www.w3.org/2000/svg\",\n  children: /* @__PURE__ */ U.jsx(\"path\", {\n    d: \"M5.01451 12.5187L4.96833 12.5174L4.93914 12.522C4.93113 12.516 4.92402 12.5087 4.91808 12.5005L4.51231 12.7926L4.91808 12.5005C4.9049 12.4822 4.89824 12.46 4.89913 12.4375L4.89953 12.4275V12.4176V8.81194V8.31194H4.39953H1.8876H1.88753C1.76188 8.31196 1.63853 8.27825 1.53036 8.21433C1.42218 8.1504 1.33315 8.05862 1.27256 7.94854C1.21196 7.83847 1.18203 7.71415 1.18588 7.58856C1.18973 7.46301 1.2272 7.34079 1.29438 7.23466C1.2944 7.23463 1.29442 7.23459 1.29444 7.23456L4.90001 1.54377L4.90567 1.53483L4.91095 1.52567C4.92227 1.50601 4.93988 1.49074 4.96094 1.48232C4.982 1.47389 5.00528 1.47281 5.02703 1.47924L5.02912 1.47985C5.05077 1.48614 5.06969 1.4995 5.08286 1.5178C5.09603 1.53609 5.1027 1.55827 5.1018 1.58079L5.10141 1.59073V1.60067V5.20631V5.70631H5.60141H8.11333H8.1134C8.23905 5.70629 8.3624 5.74 8.47058 5.80392C8.57875 5.86784 8.66778 5.95963 8.72838 6.06971C8.78897 6.17978 8.81891 6.3041 8.81506 6.42969C8.81121 6.55528 8.77371 6.67753 8.70649 6.78369L5.10232 12.4723C5.10219 12.4725 5.10205 12.4727 5.10191 12.4729C5.09255 12.4873 5.07969 12.499 5.06452 12.507C5.04914 12.5152 5.03191 12.5192 5.01451 12.5187Z\",\n    stroke: \"#FFFFFF\"\n  })\n}), Vm = /* @__PURE__ */ (0,_pigment_css_react__WEBPACK_IMPORTED_MODULE_2__.styled)(\"button\")({\n  classes: [\"f1hmcrrf\"]\n}), Hm = /* @__PURE__ */ (0,_pigment_css_react__WEBPACK_IMPORTED_MODULE_2__.styled)(\"div\")({\n  classes: [\"f1ki4il6\"]\n}), Km = /* @__PURE__ */ (0,_pigment_css_react__WEBPACK_IMPORTED_MODULE_2__.styled)(\"div\")({\n  classes: [\"bgnz0ud\"]\n}), Wm = /* @__PURE__ */ (0,_pigment_css_react__WEBPACK_IMPORTED_MODULE_2__.styled)(\"img\")({\n  classes: [\"f1gbget9\"]\n}), Gm = /* @__PURE__ */ (0,_pigment_css_react__WEBPACK_IMPORTED_MODULE_2__.styled)(\"div\")({\n  classes: [\"f4rwe4i\"]\n}), Ym = /* @__PURE__ */ (0,_pigment_css_react__WEBPACK_IMPORTED_MODULE_2__.styled)(\"div\")({\n  classes: [\"f1qellgw\"]\n}), Jm = /* @__PURE__ */ (0,_pigment_css_react__WEBPACK_IMPORTED_MODULE_2__.styled)(\"input\")({\n  classes: [\"i1hgxwhi\"]\n}), Xm = /* @__PURE__ */ (0,_pigment_css_react__WEBPACK_IMPORTED_MODULE_2__.styled)(\"div\")({\n  classes: [\"s1ahcfax\"]\n}), Qm = () => {\n  const t = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    if (t.current) {\n      let e = 0;\n      const r = () => {\n        e += 6, t.current && (t.current.style.transform = `rotate(${e}deg)`), requestAnimationFrame(r);\n      };\n      requestAnimationFrame(r);\n    }\n  }, []), /* @__PURE__ */ U.jsx(\"svg\", {\n    ref: t,\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: \"1.5\",\n    stroke: \"currentColor\",\n    className: \"size-6 text-white\",\n    style: {\n      width: \"24px\",\n      height: \"24px\"\n    },\n    children: /* @__PURE__ */ U.jsx(\"path\", {\n      strokeLinecap: \"round\",\n      strokeLinejoin: \"round\",\n      d: \"M16.023 9.348h4.992v-.001M2.985 19.644v-4.992m0 0h4.992m-4.993 0 3.181 3.183a8.25 8.25 0 0 0 13.803-3.7M4.031 9.865a8.25 8.25 0 0 1 13.803-3.7l3.181 3.182m0-4.991v4.99\"\n    })\n  });\n};\nfunction eg({\n  number: t,\n  text: e,\n  actionType: r,\n  target: n,\n  frameUrl: o,\n  handleOnClick: i\n}) {\n  return /* @__PURE__ */ U.jsxs(Vm, {\n    onClick: () => i(t),\n    children: [e, (r === \"link\" || r === \"post_redirect\" || r === \"mint\") && /* @__PURE__ */ U.jsx(qm, {}), r === \"tx\" && /* @__PURE__ */ U.jsx(Zm, {})]\n  });\n}\nfunction tg({\n  frame: t,\n  onFrameBtnPress: e\n}) {\n  var T;\n  const [r, n] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(t), [o, i] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"\"), [c, f] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1), v = () => {\n    const C = r.buttons.map((P) => /* @__PURE__ */ U.jsx(eg, {\n      number: P.index,\n      text: P.title,\n      actionType: P.action_type,\n      target: P.target,\n      frameUrl: t.frames_url,\n      handleOnClick: (B) => {\n        f(!0), e(B, r, n, o).finally(() => f(!1));\n      }\n    }, P.index));\n    return /* @__PURE__ */ U.jsx(Km, {\n      children: C\n    });\n  }, x = (C) => {\n    i(C);\n  }, b = (C) => {\n    try {\n      return new URL(C).hostname.replace(\"www.\", \"\");\n    } catch {\n      return \"\";\n    }\n  }, S = () => {\n    switch (r.image_aspect_ratio) {\n      case \"1:1\":\n        return {\n          aspectRatio: \"1 / 1\"\n        };\n      case \"1.91:1\":\n        return {\n          aspectRatio: \"1.91 / 1\"\n        };\n      default:\n        return {\n          aspectRatio: \"1.91 / 1\"\n        };\n    }\n  };\n  return /* @__PURE__ */ U.jsxs(U.Fragment, {\n    children: [/* @__PURE__ */ U.jsxs(Hm, {\n      children: [c && /* @__PURE__ */ U.jsx(Xm, {\n        children: /* @__PURE__ */ U.jsx(Qm, {})\n      }), r.frames_url && /* @__PURE__ */ U.jsxs(U.Fragment, {\n        children: [/* @__PURE__ */ U.jsx(\"a\", {\n          href: r.frames_url,\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          style: {\n            width: \"100%\"\n          },\n          children: /* @__PURE__ */ U.jsx(Wm, {\n            src: r.image,\n            alt: `Frame image for ${r.frames_url}`,\n            style: S()\n          })\n        }), ((T = r.input) == null ? void 0 : T.text) && /* @__PURE__ */ U.jsx(Jm, {\n          type: \"text\",\n          placeholder: r.input.text,\n          value: o,\n          onChange: (C) => x(C.target.value)\n        }), v()]\n      })]\n    }), r.frames_url && /* @__PURE__ */ U.jsx(Gm, {\n      children: b(r.frames_url)\n    })]\n  });\n}\nconst rg = ({\n  frame: t,\n  onFrameBtnPress: e\n}) => /* @__PURE__ */ U.jsx(Ym, {\n  children: t ? /* @__PURE__ */ U.jsx(tg, {\n    frame: t,\n    onFrameBtnPress: e\n  }) : /* @__PURE__ */ U.jsx(U.Fragment, {})\n}), ng = ({\n  url: t,\n  onFrameBtnPress: e,\n  initialFrame: r\n}) => {\n  const {\n    client_id: n,\n    showToast: o\n  } = lr(), [i] = _a(Zn.NEYNAR_AUTHENTICATED_USER, null), [c, f] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null), [v, x] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(r || null), [b, S] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    i ? f(i.signer_uuid) : console.warn(\"No NEYNAR_AUTHENTICATED_USER found in local storage.\");\n  }, [i]), (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    r || (async () => {\n      try {\n        const B = await ig(`${gn}/v2/farcaster/frame/crawl?url=${t}&client_id=${n}`, {\n          method: \"GET\"\n        });\n        if (B.ok) {\n          const z = (await B.json()).frame;\n          if (Object.keys(z).length === 0)\n            throw new Error(\"No frame data available\");\n          x(z), S(null);\n        } else\n          throw new Error(`HTTP error! status: ${B.status}`);\n      } catch (B) {\n        console.error(`An error occurred: ${B}`), S(`Failed to fetch: ${B.message}`);\n      }\n    })();\n  }, [t, o, r]);\n  const T = (P) => {\n    if (typeof P != \"object\" || P === null) return !1;\n    const B = [\"version\", \"image\", \"buttons\", \"frames_url\"];\n    for (const R of B)\n      if (!(R in P)) return !1;\n    return !(!Array.isArray(P.buttons) || P.buttons.some((R) => typeof R.index != \"number\"));\n  }, C = async (P, B, R, z) => {\n    try {\n      const K = await e(P, B, R, z);\n      if (!T(K))\n        throw new Error(\"Invalid frame data received\");\n      R(K);\n    } catch (K) {\n      o(Il.Error, `An error occurred while processing the button press: ${K}`);\n    }\n  };\n  return b ? /* @__PURE__ */ U.jsx(\"div\", {\n    style: {\n      color: \"red\",\n      padding: \"10px\",\n      border: \"1px solid red\",\n      borderRadius: \"5px\"\n    },\n    children: b\n  }) : /* @__PURE__ */ U.jsx(rg, {\n    frame: v,\n    onFrameBtnPress: C\n  });\n};\nfunction ig(t, e, r = 8e3) {\n  return Promise.race([yn(t, e), new Promise((n, o) => setTimeout(() => o(new Error(\"Request timed out\")), r))]);\n}\nfunction ku(t) {\n  const e = Math.min(t, 1e9);\n  return e >= 1e9 ? Math.floor(e / 1e8) / 10 + \"B\" : e >= 1e6 ? Math.floor(e / 1e5) / 10 + \"M\" : e >= 1e3 ? Math.floor(e / 100) / 10 + \"K\" : e.toString();\n}\nfunction sg(t) {\n  if (!t)\n    return console.error(\"Error: Timestamp is undefined or empty.\"), \"Invalid timestamp\";\n  const e = new Date(t);\n  if (isNaN(e.getTime()))\n    return console.error(\"Error: Invalid timestamp provided:\", t), \"Invalid timestamp\";\n  const r = /* @__PURE__ */ new Date(), o = new Intl.DateTimeFormat(void 0, {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    hour12: !0\n  }).format(e).replace(\" \", \"\"), i = r.toDateString() === e.toDateString(), c = new Date(r.setDate(r.getDate() - 1)).toDateString() === e.toDateString();\n  if (i)\n    return `${o}, today`;\n  if (c)\n    return `${o}, yesterday`;\n  const f = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"], v = e.getDate(), x = f[e.getMonth()], b = e.getFullYear(), T = `${x} ${((C) => {\n    if (C > 3 && C < 21) return `${C}th`;\n    const P = [\"st\", \"nd\", \"rd\"], B = C % 10;\n    return `${C}${P[B - 1] || \"th\"}`;\n  })(v)} ${b}`;\n  return `${o}, ${T}`;\n}\nconst og = /* @__PURE__ */ (0,_pigment_css_react__WEBPACK_IMPORTED_MODULE_2__.styled)(\"div\")({\n  classes: [\"sxqvxvq\"]\n}), ag = /* @__PURE__ */ (0,_pigment_css_react__WEBPACK_IMPORTED_MODULE_2__.styled)(\"a\")({\n  classes: [\"s3kamov\"]\n}), ug = /* @__PURE__ */ (0,_pigment_css_react__WEBPACK_IMPORTED_MODULE_2__.styled)(\"div\")({\n  classes: [\"m1wrvvhk\"]\n}), cg = /* @__PURE__ */ (0,_pigment_css_react__WEBPACK_IMPORTED_MODULE_2__.styled)(\"div\")({\n  classes: [\"t1lcaq27\"]\n}), lg = /* @__PURE__ */ (0,_pigment_css_react__WEBPACK_IMPORTED_MODULE_2__.styled)(\"div\")({\n  classes: [\"ugtp1wh\"]\n}), fg = /* @__PURE__ */ (0,_pigment_css_react__WEBPACK_IMPORTED_MODULE_2__.styled)(\"div\")({\n  classes: [\"l1dqpn4e\"]\n}), hg = /* @__PURE__ */ (0,_pigment_css_react__WEBPACK_IMPORTED_MODULE_2__.styled)(\"div\")({\n  classes: [\"l1bjnv2t\"]\n}), Iu = /* @__PURE__ */ (0,_pigment_css_react__WEBPACK_IMPORTED_MODULE_2__.styled)(\"div\")({\n  classes: [\"e15yf123\"]\n}), dg = /* @__PURE__ */ (0,_pigment_css_react__WEBPACK_IMPORTED_MODULE_2__.styled)(\"div\")({\n  classes: [\"rxra94g\"]\n}), Bu = /* @__PURE__ */ (0,_pigment_css_react__WEBPACK_IMPORTED_MODULE_2__.styled)(\"div\")({\n  classes: [\"s1whgqrs\"]\n}), Rs = react__WEBPACK_IMPORTED_MODULE_0___default().memo(({\n  username: t,\n  displayName: e,\n  avatarImgUrl: r,\n  text: n = \"\",\n  hash: o,\n  reactions: i,\n  replies: c,\n  embeds: f = [],\n  frames: v = [],\n  channel: x,\n  viewerFid: b,\n  hasPowerBadge: S,\n  isEmbed: T = !0,\n  allowReactions: C,\n  renderEmbeds: P,\n  renderFrames: B,\n  onLikeBtnPress: R,\n  onRecastBtnPress: z,\n  onCommentBtnPress: K,\n  onFrameBtnPress: Z,\n  direct_replies: Q,\n  containerStyles: j,\n  textStyles: V,\n  timestamp: ee,\n  appAvatarImgUrl: G\n}) => {\n  const [N, O] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(i.likes_count), [L, F] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(i.likes.some((A) => A.fid === b)), d = /* @__PURE__ */ U.jsx(hg, {\n    children: mm(n, f)\n  }), s = (f == null ? void 0 : f.length) === 1, u = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => v.map((A) => A.frames_url), [v]), h = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => f.filter((A) => !u.includes(A.url)), [f, u]), g = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((A) => {\n    A.currentTarget.src = Li;\n  }, []);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    F(i.likes.some((A) => A.fid === b));\n  }, [i.likes, b]);\n  const w = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => R && R() ? (O((p) => p + 1), F(!L), !0) : !1, [R]), _ = Im(h, C, b);\n  return /* @__PURE__ */ U.jsx(og, {\n    style: {\n      ...j,\n      borderWidth: T ? \"1px\" : \"0\"\n    },\n    children: /* @__PURE__ */ U.jsxs(Ht, {\n      children: [/* @__PURE__ */ U.jsx(Vt, {\n        spacingRight: \"10px\",\n        children: /* @__PURE__ */ U.jsx(Bs, {\n          src: r && r.length > 0 ? r : Li,\n          onError: g,\n          loading: \"lazy\",\n          alt: `${e ?? \"Skeleton\"} Avatar`\n        })\n      }), /* @__PURE__ */ U.jsxs(ug, {\n        children: [/* @__PURE__ */ U.jsx(Ht, {\n          justifyContent: \"space-between\",\n          flexGrow: 1,\n          alignItems: \"center\",\n          children: /* @__PURE__ */ U.jsxs(Ol, {\n            children: [/* @__PURE__ */ U.jsxs(Ht, {\n              children: [/* @__PURE__ */ U.jsx(\"strong\", {\n                children: e\n              }), \" \", G && /* @__PURE__ */ U.jsx(Vt, {\n                spacingLeft: \"5px\",\n                children: /* @__PURE__ */ U.jsx(\"img\", {\n                  style: {\n                    padding: \"2px\",\n                    borderWidth: \"0.5px\"\n                  },\n                  className: \"border-white rounded-full\",\n                  src: G,\n                  width: \"18\",\n                  height: \"18\",\n                  onError: (A) => {\n                    A.currentTarget.style.display = \"none\";\n                  }\n                })\n              })]\n            }), /* @__PURE__ */ U.jsxs(Ht, {\n              alignItems: \"center\",\n              children: [/* @__PURE__ */ U.jsxs(lg, {\n                children: [\"@\", t, \" ·\"]\n              }), \" \", /* @__PURE__ */ U.jsx(cg, {\n                children: sg(ee)\n              })]\n            })]\n          })\n        }), /* @__PURE__ */ U.jsx(Vt, {\n          children: /* @__PURE__ */ U.jsx(fg, {\n            style: V,\n            children: d\n          })\n        }), P && h && h.length > 0 ? /* @__PURE__ */ U.jsx(Iu, {\n          style: {\n            margin: s ? \"4px 0\" : \"0\"\n          },\n          children: _.map((A, p) => /* @__PURE__ */ U.jsx(\"div\", {\n            style: {\n              width: \"100%\"\n            },\n            children: A\n          }, p))\n        }) : /* @__PURE__ */ U.jsx(U.Fragment, {}), B && v && v.length > 0 ? /* @__PURE__ */ U.jsx(Iu, {\n          children: v.map((A) => /* @__PURE__ */ U.jsx(ng, {\n            url: A.frames_url,\n            initialFrame: A,\n            onFrameBtnPress: Z\n          }, A.frames_url))\n        }) : null, /* @__PURE__ */ U.jsxs(dg, {\n          style: {\n            justifyContent: C ? \"space-between\" : \"flex-end\"\n          },\n          children: [C && /* @__PURE__ */ U.jsx($m, {\n            hash: o,\n            reactions: i,\n            onComment: K,\n            onRecast: z,\n            onLike: w,\n            isLiked: L\n          }), C && t && o && /* @__PURE__ */ U.jsx(Au, {\n            url: `https://farcaster.xyz/${t}/${o.slice(0, 10)}`\n          })]\n        }), /* @__PURE__ */ U.jsxs(Bu, {\n          style: {\n            justifyContent: C ? \"\" : \"space-between\"\n          },\n          children: [/* @__PURE__ */ U.jsxs(Bu, {\n            style: {\n              justifyContent: C ? \"\" : \"space-between\",\n              gap: 6\n            },\n            children: [/* @__PURE__ */ U.jsxs(\"div\", {\n              children: [c, \" replies\"]\n            }), /* @__PURE__ */ U.jsx(\"div\", {\n              children: \"·\"\n            }), /* @__PURE__ */ U.jsxs(\"div\", {\n              children: [N, \" likes\"]\n            }), x && /* @__PURE__ */ U.jsxs(U.Fragment, {\n              children: [/* @__PURE__ */ U.jsx(\"div\", {\n                children: \"·\"\n              }), /* @__PURE__ */ U.jsx(ag, {\n                href: `https://farcaster.xyz/~/channel/${x.id}`,\n                target: \"_blank\",\n                children: x.id\n              })]\n            })]\n          }), !C && t && o && /* @__PURE__ */ U.jsx(Au, {\n            url: `https://farcaster.xyz/${t}/${o.slice(0, 10)}`\n          })]\n        })]\n      })]\n    })\n  });\n}), pg = /* @__PURE__ */ (0,_pigment_css_react__WEBPACK_IMPORTED_MODULE_2__.styled)(\"div\")({\n  classes: [\"s1m6ob1a\"]\n}), Ru = /* @__PURE__ */ (0,_pigment_css_react__WEBPACK_IMPORTED_MODULE_2__.styled)(\"div\")({\n  classes: [\"r1esevc7\"]\n}), Tu = /* @__PURE__ */ (0,_pigment_css_react__WEBPACK_IMPORTED_MODULE_2__.styled)(\"div\")({\n  classes: [\"vxb1f00\"]\n}), mg = /* @__PURE__ */ (0,_pigment_css_react__WEBPACK_IMPORTED_MODULE_2__.styled)(\"div\")({\n  classes: [\"htv0qz7\"]\n}), Lu = /* @__PURE__ */ (0,_pigment_css_react__WEBPACK_IMPORTED_MODULE_2__.styled)(\"div\")({\n  classes: [\"rzksy2\"]\n});\nfunction gg(t) {\n  return /* @__PURE__ */ U.jsx(pg, {\n    children: t.casts.map((e, r) => /* @__PURE__ */ U.jsxs(Ru, {\n      children: [r !== 0 && /* @__PURE__ */ U.jsx(Tu, {\n        style: {\n          left: \"42px\"\n        }\n      }), /* @__PURE__ */ U.jsxs(Lu, {\n        children: [/* @__PURE__ */ U.jsx(Rs, {\n          isEmbed: !1,\n          ...e\n        }), r === 0 && /* @__PURE__ */ U.jsx(mg, {}), e.direct_replies && e.direct_replies.length > 0 && e.direct_replies.map((n, o) => /* @__PURE__ */ U.jsxs(Ru, {\n          children: [/* @__PURE__ */ U.jsx(Tu, {\n            style: {\n              left: \"42px\"\n            }\n          }), /* @__PURE__ */ U.jsx(Lu, {\n            children: /* @__PURE__ */ U.jsx(Rs, {\n              isEmbed: !1,\n              ...n\n            })\n          })]\n        }, o))]\n      })]\n    }, r))\n  });\n}\nasync function yg({\n  type: t,\n  identifier: e,\n  replyDepth: r = 2,\n  includeChronologicalParentCasts: n = !1,\n  limit: o = 20,\n  viewerFid: i,\n  clientId: c\n}) {\n  try {\n    let f = `${gn}/v2/farcaster/cast/conversation?identifier=${encodeURIComponent(e)}&type=${t}&reply_depth=${r}&include_chronological_parent_casts=${n}&limit=${o}&client_id=${c}`;\n    return i && (f += `&viewer_fid=${i}`), await (await yn(f, {\n      method: \"GET\",\n      headers: {\n        accept: \"application/json\"\n      }\n    })).json() || null;\n  } catch (f) {\n    return console.error(\"Error fetching conversation\", f), null;\n  }\n}\nfunction Fl(t) {\n  return {\n    username: t.author.username,\n    displayName: t.author.display_name,\n    avatarImgUrl: t.author.pfp_url,\n    text: t.text,\n    hash: t.hash,\n    reactions: t.reactions,\n    replies: t.replies.count,\n    embeds: t.embeds,\n    frames: t.frames,\n    renderEmbeds: t.renderEmbeds,\n    channel: t.channel,\n    viewerFid: 2,\n    hasPowerBadge: t.author.power_badge,\n    appAvatarImgUrl: t.app.pfp_url,\n    isOwnProfile: !1,\n    allowReactions: !0,\n    renderFrames: !1,\n    direct_replies: t.direct_replies ? t.direct_replies.map(Fl) : [],\n    timestamp: t.timestamp\n  };\n}\nfunction vg(t) {\n  const e = [];\n  return t.cast && e.push(Fl(t.cast)), e;\n}\nconst ay = ({\n  type: t,\n  identifier: e,\n  replyDepth: r = 2,\n  includeChronologicalParentCasts: n = !1,\n  limit: o = 20,\n  viewerFid: i\n}) => {\n  const {\n    client_id: c\n  } = lr(), [f, v] = react__WEBPACK_IMPORTED_MODULE_0___default().useState(null), [x, b] = react__WEBPACK_IMPORTED_MODULE_0___default().useState(!0), [S, T] = react__WEBPACK_IMPORTED_MODULE_0___default().useState(null);\n  return react__WEBPACK_IMPORTED_MODULE_0___default().useEffect(() => {\n    b(!0), T(null), yg({\n      type: t,\n      identifier: e,\n      replyDepth: r,\n      includeChronologicalParentCasts: n,\n      limit: o,\n      viewerFid: i,\n      clientId: c\n    }).then((C) => {\n      v(C);\n    }).catch((C) => {\n      T(C);\n    }).finally(() => {\n      b(!1);\n    });\n  }, [t, e, r, n, o, i, c]), x ? /* @__PURE__ */ U.jsx(U.Fragment, {\n    children: \" \"\n  }) : S ? /* @__PURE__ */ U.jsx(U.Fragment, {\n    children: \" \"\n  }) : /* @__PURE__ */ U.jsx(gg, {\n    casts: vg(f.conversation)\n  });\n};\nvar wo = { exports: {} }, xo = {};\n/**\n * @license React\n * use-sync-external-store-shim.production.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nvar Ou;\nfunction wg() {\n  if (Ou) return xo;\n  Ou = 1;\n  var t = (react__WEBPACK_IMPORTED_MODULE_0___default());\n  function e(S, T) {\n    return S === T && (S !== 0 || 1 / S === 1 / T) || S !== S && T !== T;\n  }\n  var r = typeof Object.is == \"function\" ? Object.is : e, n = t.useState, o = t.useEffect, i = t.useLayoutEffect, c = t.useDebugValue;\n  function f(S, T) {\n    var C = T(), P = n({ inst: { value: C, getSnapshot: T } }), B = P[0].inst, R = P[1];\n    return i(\n      function() {\n        B.value = C, B.getSnapshot = T, v(B) && R({ inst: B });\n      },\n      [S, C, T]\n    ), o(\n      function() {\n        return v(B) && R({ inst: B }), S(function() {\n          v(B) && R({ inst: B });\n        });\n      },\n      [S]\n    ), c(C), C;\n  }\n  function v(S) {\n    var T = S.getSnapshot;\n    S = S.value;\n    try {\n      var C = T();\n      return !r(S, C);\n    } catch {\n      return !0;\n    }\n  }\n  function x(S, T) {\n    return T();\n  }\n  var b = typeof window > \"u\" || typeof window.document > \"u\" || typeof window.document.createElement > \"u\" ? x : f;\n  return xo.useSyncExternalStore = t.useSyncExternalStore !== void 0 ? t.useSyncExternalStore : b, xo;\n}\nvar Nu;\nfunction xg() {\n  return Nu || (Nu = 1, wo.exports = wg()), wo.exports;\n}\nvar Pl = xg();\nconst Dl = 0, $l = 1, zl = 2, ju = 3;\nvar Uu = Object.prototype.hasOwnProperty;\nfunction $o(t, e) {\n  var r, n;\n  if (t === e) return !0;\n  if (t && e && (r = t.constructor) === e.constructor) {\n    if (r === Date) return t.getTime() === e.getTime();\n    if (r === RegExp) return t.toString() === e.toString();\n    if (r === Array) {\n      if ((n = t.length) === e.length)\n        for (; n-- && $o(t[n], e[n]); ) ;\n      return n === -1;\n    }\n    if (!r || typeof t == \"object\") {\n      n = 0;\n      for (r in t)\n        if (Uu.call(t, r) && ++n && !Uu.call(e, r) || !(r in e) || !$o(t[r], e[r])) return !1;\n      return Object.keys(e).length === n;\n    }\n  }\n  return t !== t && e !== e;\n}\nconst nr = /* @__PURE__ */ new WeakMap(), Br = () => {\n}, Et = (\n  /*#__NOINLINE__*/\n  Br()\n), zo = Object, Ye = (t) => t === Et, Kt = (t) => typeof t == \"function\", Ur = (t, e) => ({\n  ...t,\n  ...e\n}), ql = (t) => Kt(t.then), bo = {}, Qi = {}, Ea = \"undefined\", zi = typeof window != Ea, qo = typeof document != Ea, bg = zi && \"Deno\" in window, _g = () => zi && typeof window.requestAnimationFrame != Ea, kr = (t, e) => {\n  const r = nr.get(t);\n  return [\n    // Getter\n    () => !Ye(e) && t.get(e) || bo,\n    // Setter\n    (n) => {\n      if (!Ye(e)) {\n        const o = t.get(e);\n        e in Qi || (Qi[e] = o), r[5](e, Ur(o, n), o || bo);\n      }\n    },\n    // Subscriber\n    r[6],\n    // Get server cache snapshot\n    () => !Ye(e) && e in Qi ? Qi[e] : !Ye(e) && t.get(e) || bo\n  ];\n};\nlet Zo = !0;\nconst Eg = () => Zo, [Vo, Ho] = zi && window.addEventListener ? [\n  window.addEventListener.bind(window),\n  window.removeEventListener.bind(window)\n] : [\n  Br,\n  Br\n], Mg = () => {\n  const t = qo && document.visibilityState;\n  return Ye(t) || t !== \"hidden\";\n}, Cg = (t) => (qo && document.addEventListener(\"visibilitychange\", t), Vo(\"focus\", t), () => {\n  qo && document.removeEventListener(\"visibilitychange\", t), Ho(\"focus\", t);\n}), Sg = (t) => {\n  const e = () => {\n    Zo = !0, t();\n  }, r = () => {\n    Zo = !1;\n  };\n  return Vo(\"online\", e), Vo(\"offline\", r), () => {\n    Ho(\"online\", e), Ho(\"offline\", r);\n  };\n}, Ag = {\n  isOnline: Eg,\n  isVisible: Mg\n}, kg = {\n  initFocus: Cg,\n  initReconnect: Sg\n}, Fu = !(react__WEBPACK_IMPORTED_MODULE_0___default().useId), Oi = !zi || bg, Ig = (t) => _g() ? window.requestAnimationFrame(t) : setTimeout(t, 1), os = Oi ? react__WEBPACK_IMPORTED_MODULE_0__.useEffect : react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect, _o = typeof navigator < \"u\" && navigator.connection, Pu = !Oi && _o && ([\n  \"slow-2g\",\n  \"2g\"\n].includes(_o.effectiveType) || _o.saveData), es = /* @__PURE__ */ new WeakMap(), Eo = (t, e) => zo.prototype.toString.call(t) === `[object ${e}]`;\nlet Bg = 0;\nconst Ko = (t) => {\n  const e = typeof t, r = Eo(t, \"Date\"), n = Eo(t, \"RegExp\"), o = Eo(t, \"Object\");\n  let i, c;\n  if (zo(t) === t && !r && !n) {\n    if (i = es.get(t), i) return i;\n    if (i = ++Bg + \"~\", es.set(t, i), Array.isArray(t)) {\n      for (i = \"@\", c = 0; c < t.length; c++)\n        i += Ko(t[c]) + \",\";\n      es.set(t, i);\n    }\n    if (o) {\n      i = \"#\";\n      const f = zo.keys(t).sort();\n      for (; !Ye(c = f.pop()); )\n        Ye(t[c]) || (i += c + \":\" + Ko(t[c]) + \",\");\n      es.set(t, i);\n    }\n  } else\n    i = r ? t.toJSON() : e == \"symbol\" ? t.toString() : e == \"string\" ? JSON.stringify(t) : \"\" + t;\n  return i;\n}, Ni = (t) => {\n  if (Kt(t))\n    try {\n      t = t();\n    } catch {\n      t = \"\";\n    }\n  const e = t;\n  return t = typeof t == \"string\" ? t : (Array.isArray(t) ? t.length : t) ? Ko(t) : \"\", [\n    t,\n    e\n  ];\n};\nlet Rg = 0;\nconst Wo = () => ++Rg;\nasync function Zl(...t) {\n  const [e, r, n, o] = t, i = Ur({\n    populateCache: !0,\n    throwOnError: !0\n  }, typeof o == \"boolean\" ? {\n    revalidate: o\n  } : o || {});\n  let c = i.populateCache;\n  const f = i.rollbackOnError;\n  let v = i.optimisticData;\n  const x = (T) => typeof f == \"function\" ? f(T) : f !== !1, b = i.throwOnError;\n  if (Kt(r)) {\n    const T = r, C = [], P = e.keys();\n    for (const B of P)\n      // Skip the special useSWRInfinite and useSWRSubscription keys.\n      !/^\\$(inf|sub)\\$/.test(B) && T(e.get(B)._k) && C.push(B);\n    return Promise.all(C.map(S));\n  }\n  return S(r);\n  async function S(T) {\n    const [C] = Ni(T);\n    if (!C) return;\n    const [P, B] = kr(e, C), [R, z, K, Z] = nr.get(e), Q = () => {\n      const d = R[C];\n      return (Kt(i.revalidate) ? i.revalidate(P().data, T) : i.revalidate !== !1) && (delete K[C], delete Z[C], d && d[0]) ? d[0](zl).then(() => P().data) : P().data;\n    };\n    if (t.length < 3)\n      return Q();\n    let j = n, V;\n    const ee = Wo();\n    z[C] = [\n      ee,\n      0\n    ];\n    const G = !Ye(v), N = P(), O = N.data, L = N._c, F = Ye(L) ? O : L;\n    if (G && (v = Kt(v) ? v(F, O) : v, B({\n      data: v,\n      _c: F\n    })), Kt(j))\n      try {\n        j = j(F);\n      } catch (d) {\n        V = d;\n      }\n    if (j && ql(j))\n      if (j = await j.catch((d) => {\n        V = d;\n      }), ee !== z[C][0]) {\n        if (V) throw V;\n        return j;\n      } else V && G && x(V) && (c = !0, B({\n        data: F,\n        _c: Et\n      }));\n    if (c && !V)\n      if (Kt(c)) {\n        const d = c(j, F);\n        B({\n          data: d,\n          error: Et,\n          _c: Et\n        });\n      } else\n        B({\n          data: j,\n          error: Et,\n          _c: Et\n        });\n    if (z[C][1] = Wo(), Promise.resolve(Q()).then(() => {\n      B({\n        _c: Et\n      });\n    }), V) {\n      if (b) throw V;\n      return;\n    }\n    return j;\n  }\n}\nconst Du = (t, e) => {\n  for (const r in t)\n    t[r][0] && t[r][0](e);\n}, Tg = (t, e) => {\n  if (!nr.has(t)) {\n    const r = Ur(kg, e), n = /* @__PURE__ */ Object.create(null), o = Zl.bind(Et, t);\n    let i = Br;\n    const c = /* @__PURE__ */ Object.create(null), f = (b, S) => {\n      const T = c[b] || [];\n      return c[b] = T, T.push(S), () => T.splice(T.indexOf(S), 1);\n    }, v = (b, S, T) => {\n      t.set(b, S);\n      const C = c[b];\n      if (C)\n        for (const P of C)\n          P(S, T);\n    }, x = () => {\n      if (!nr.has(t) && (nr.set(t, [\n        n,\n        /* @__PURE__ */ Object.create(null),\n        /* @__PURE__ */ Object.create(null),\n        /* @__PURE__ */ Object.create(null),\n        o,\n        v,\n        f\n      ]), !Oi)) {\n        const b = r.initFocus(setTimeout.bind(Et, Du.bind(Et, n, Dl))), S = r.initReconnect(setTimeout.bind(Et, Du.bind(Et, n, $l)));\n        i = () => {\n          b && b(), S && S(), nr.delete(t);\n        };\n      }\n    };\n    return x(), [\n      t,\n      o,\n      x,\n      i\n    ];\n  }\n  return [\n    t,\n    nr.get(t)[4]\n  ];\n}, Lg = (t, e, r, n, o) => {\n  const i = r.errorRetryCount, c = o.retryCount, f = ~~((Math.random() + 0.5) * (1 << (c < 8 ? c : 8))) * r.errorRetryInterval;\n  !Ye(i) && c > i || setTimeout(n, f, o);\n}, Og = $o, [Ma, Ng] = Tg(/* @__PURE__ */ new Map()), jg = Ur(\n  {\n    // events\n    onLoadingSlow: Br,\n    onSuccess: Br,\n    onError: Br,\n    onErrorRetry: Lg,\n    onDiscarded: Br,\n    // switches\n    revalidateOnFocus: !0,\n    revalidateOnReconnect: !0,\n    revalidateIfStale: !0,\n    shouldRetryOnError: !0,\n    // timeouts\n    errorRetryInterval: Pu ? 1e4 : 5e3,\n    focusThrottleInterval: 5 * 1e3,\n    dedupingInterval: 2 * 1e3,\n    loadingTimeout: Pu ? 5e3 : 3e3,\n    // providers\n    compare: Og,\n    isPaused: () => !1,\n    cache: Ma,\n    mutate: Ng,\n    fallback: {}\n  },\n  // use web preset by default\n  Ag\n), Ug = (t, e) => {\n  const r = Ur(t, e);\n  if (e) {\n    const { use: n, fallback: o } = t, { use: i, fallback: c } = e;\n    n && i && (r.use = n.concat(i)), o && c && (r.fallback = Ur(o, c));\n  }\n  return r;\n}, Fg = (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({}), Vl = \"$inf$\", Hl = zi && window.__SWR_DEVTOOLS_USE__, Pg = Hl ? window.__SWR_DEVTOOLS_USE__ : [], Dg = () => {\n  Hl && (window.__SWR_DEVTOOLS_REACT__ = (react__WEBPACK_IMPORTED_MODULE_0___default()));\n}, Kl = (t) => Kt(t[1]) ? [\n  t[0],\n  t[1],\n  t[2] || {}\n] : [\n  t[0],\n  null,\n  (t[1] === null ? t[2] : t[1]) || {}\n], $g = () => Ur(jg, (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(Fg)), zg = (t) => (e, r, n) => t(e, r && ((...i) => {\n  const [c] = Ni(e), [, , , f] = nr.get(Ma);\n  if (c.startsWith(Vl))\n    return r(...i);\n  const v = f[c];\n  return Ye(v) ? r(...i) : (delete f[c], v);\n}), n), qg = Pg.concat(zg), Zg = (t) => function(...r) {\n  const n = $g(), [o, i, c] = Kl(r), f = Ug(n, c);\n  let v = t;\n  const { use: x } = f, b = (x || []).concat(qg);\n  for (let S = b.length; S--; )\n    v = b[S](v);\n  return v(o, i || f.fetcher || null, f);\n}, Vg = (t, e, r) => {\n  const n = e[t] || (e[t] = []);\n  return n.push(r), () => {\n    const o = n.indexOf(r);\n    o >= 0 && (n[o] = n[n.length - 1], n.pop());\n  };\n}, Hg = (t, e) => (...r) => {\n  const [n, o, i] = Kl(r), c = (i.use || []).concat(e);\n  return t(n, o, {\n    ...i,\n    use: c\n  });\n};\nDg();\nconst Mo = (react__WEBPACK_IMPORTED_MODULE_0___default().use) || // This extra generic is to avoid TypeScript mixing up the generic and JSX sytax\n// and emitting an error.\n// We assume that this is only for the `use(thenable)` case, not `use(context)`.\n// https://github.com/facebook/react/blob/aed00dacfb79d17c53218404c52b1c7aa59c4a89/packages/react-server/src/ReactFizzThenable.js#L45\n((t) => {\n  switch (t.status) {\n    case \"pending\":\n      throw t;\n    case \"fulfilled\":\n      return t.value;\n    case \"rejected\":\n      throw t.reason;\n    default:\n      throw t.status = \"pending\", t.then((e) => {\n        t.status = \"fulfilled\", t.value = e;\n      }, (e) => {\n        t.status = \"rejected\", t.reason = e;\n      }), t;\n  }\n}), Co = {\n  dedupe: !0\n}, Kg = (t, e, r) => {\n  const { cache: n, compare: o, suspense: i, fallbackData: c, revalidateOnMount: f, revalidateIfStale: v, refreshInterval: x, refreshWhenHidden: b, refreshWhenOffline: S, keepPreviousData: T } = r, [C, P, B, R] = nr.get(n), [z, K] = Ni(t), Z = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(!1), Q = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(!1), j = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(z), V = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(e), ee = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(r), G = () => ee.current, N = () => G().isVisible() && G().isOnline(), [O, L, F, d] = kr(n, z), s = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)({}).current, u = Ye(c) ? Ye(r.fallback) ? Et : r.fallback[z] : c, h = (Xe, ae) => {\n    for (const ge in s) {\n      const it = ge;\n      if (it === \"data\") {\n        if (!o(Xe[it], ae[it]) && (!Ye(Xe[it]) || !o(k, ae[it])))\n          return !1;\n      } else if (ae[it] !== Xe[it])\n        return !1;\n    }\n    return !0;\n  }, g = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n    const Xe = !z || !e ? !1 : Ye(f) ? G().isPaused() || i ? !1 : v !== !1 : f, ae = (ye) => {\n      const be = Ur(ye);\n      return delete be._k, Xe ? {\n        isValidating: !0,\n        isLoading: !0,\n        ...be\n      } : be;\n    }, ge = O(), it = d(), we = ae(ge), Me = ge === it ? we : ae(it);\n    let ft = we;\n    return [\n      () => {\n        const ye = ae(O());\n        return h(ye, ft) ? (ft.data = ye.data, ft.isLoading = ye.isLoading, ft.isValidating = ye.isValidating, ft.error = ye.error, ft) : (ft = ye, ye);\n      },\n      () => Me\n    ];\n  }, [\n    n,\n    z\n  ]), w = Pl.useSyncExternalStore((0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n    (Xe) => F(z, (ae, ge) => {\n      h(ge, ae) || Xe();\n    }),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      n,\n      z\n    ]\n  ), g[0], g[1]), _ = !Z.current, A = C[z] && C[z].length > 0, p = w.data, a = Ye(p) ? u && ql(u) ? Mo(u) : u : p, l = w.error, M = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(a), k = T ? Ye(p) ? Ye(M.current) ? a : M.current : p : a, $ = A && !Ye(l) ? !1 : _ && !Ye(f) ? f : G().isPaused() ? !1 : i ? Ye(a) ? !1 : v : Ye(a) || v, X = !!(z && e && _ && $), re = Ye(w.isValidating) ? X : w.isValidating, se = Ye(w.isLoading) ? X : w.isLoading, ut = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n    async (Xe) => {\n      const ae = V.current;\n      if (!z || !ae || Q.current || G().isPaused())\n        return !1;\n      let ge, it, we = !0;\n      const Me = Xe || {}, ft = !B[z] || !Me.dedupe, ye = () => Fu ? !Q.current && z === j.current && Z.current : z === j.current, be = {\n        isValidating: !1,\n        isLoading: !1\n      }, xt = () => {\n        L(be);\n      }, Se = () => {\n        const ct = B[z];\n        ct && ct[1] === it && delete B[z];\n      }, ke = {\n        isValidating: !0\n      };\n      Ye(O().data) && (ke.isLoading = !0);\n      try {\n        if (ft && (L(ke), r.loadingTimeout && Ye(O().data) && setTimeout(() => {\n          we && ye() && G().onLoadingSlow(z, r);\n        }, r.loadingTimeout), B[z] = [\n          ae(K),\n          Wo()\n        ]), [ge, it] = B[z], ge = await ge, ft && setTimeout(Se, r.dedupingInterval), !B[z] || B[z][1] !== it)\n          return ft && ye() && G().onDiscarded(z), !1;\n        be.error = Et;\n        const ct = P[z];\n        if (!Ye(ct) && // case 1\n        (it <= ct[0] || // case 2\n        it <= ct[1] || // case 3\n        ct[1] === 0))\n          return xt(), ft && ye() && G().onDiscarded(z), !1;\n        const _e = O().data;\n        be.data = o(_e, ge) ? _e : ge, ft && ye() && G().onSuccess(ge, z, r);\n      } catch (ct) {\n        Se();\n        const _e = G(), { shouldRetryOnError: E } = _e;\n        _e.isPaused() || (be.error = ct, ft && ye() && (_e.onError(ct, z, _e), (E === !0 || Kt(E) && E(ct)) && (!G().revalidateOnFocus || !G().revalidateOnReconnect || N()) && _e.onErrorRetry(ct, z, _e, (m) => {\n          const y = C[z];\n          y && y[0] && y[0](ju, m);\n        }, {\n          retryCount: (Me.retryCount || 0) + 1,\n          dedupe: !0\n        })));\n      }\n      return we = !1, xt(), !0;\n    },\n    // `setState` is immutable, and `eventsCallback`, `fnArg`, and\n    // `keyValidating` are depending on `key`, so we can exclude them from\n    // the deps array.\n    //\n    // FIXME:\n    // `fn` and `config` might be changed during the lifecycle,\n    // but they might be changed every render like this.\n    // `useSWR('key', () => fetch('/api/'), { suspense: true })`\n    // So we omit the values from the deps array\n    // even though it might cause unexpected behaviors.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      z,\n      n\n    ]\n  ), xe = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n    // Use callback to make sure `keyRef.current` returns latest result every time\n    (...Xe) => Zl(n, j.current, ...Xe),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    []\n  );\n  if (os(() => {\n    V.current = e, ee.current = r, Ye(p) || (M.current = p);\n  }), os(() => {\n    if (!z) return;\n    const Xe = ut.bind(Et, Co);\n    let ae = 0;\n    G().revalidateOnFocus && (ae = Date.now() + G().focusThrottleInterval);\n    const it = Vg(z, C, (we, Me = {}) => {\n      if (we == Dl) {\n        const ft = Date.now();\n        G().revalidateOnFocus && ft > ae && N() && (ae = ft + G().focusThrottleInterval, Xe());\n      } else if (we == $l)\n        G().revalidateOnReconnect && N() && Xe();\n      else {\n        if (we == zl)\n          return ut();\n        if (we == ju)\n          return ut(Me);\n      }\n    });\n    return Q.current = !1, j.current = z, Z.current = !0, L({\n      _k: K\n    }), $ && (Ye(a) || Oi ? Xe() : Ig(Xe)), () => {\n      Q.current = !0, it();\n    };\n  }, [\n    z\n  ]), os(() => {\n    let Xe;\n    function ae() {\n      const it = Kt(x) ? x(O().data) : x;\n      it && Xe !== -1 && (Xe = setTimeout(ge, it));\n    }\n    function ge() {\n      !O().error && (b || G().isVisible()) && (S || G().isOnline()) ? ut(Co).then(ae) : ae();\n    }\n    return ae(), () => {\n      Xe && (clearTimeout(Xe), Xe = -1);\n    };\n  }, [\n    x,\n    b,\n    S,\n    z\n  ]), (0,react__WEBPACK_IMPORTED_MODULE_0__.useDebugValue)(k), i && Ye(a) && z) {\n    if (!Fu && Oi)\n      throw new Error(\"Fallback data is required when using Suspense in SSR.\");\n    V.current = e, ee.current = r, Q.current = !1;\n    const Xe = R[z];\n    if (!Ye(Xe)) {\n      const ae = xe(Xe);\n      Mo(ae);\n    }\n    if (Ye(l)) {\n      const ae = ut(Co);\n      Ye(k) || (ae.status = \"fulfilled\", ae.value = !0), Mo(ae);\n    } else\n      throw l;\n  }\n  return {\n    mutate: xe,\n    get data() {\n      return s.data = !0, k;\n    },\n    get error() {\n      return s.error = !0, l;\n    },\n    get isValidating() {\n      return s.isValidating = !0, re;\n    },\n    get isLoading() {\n      return s.isLoading = !0, se;\n    }\n  };\n}, Wg = Zg(Kg), Gg = () => {\n}, Yg = (\n  /*#__NOINLINE__*/\n  Gg()\n), Go = Object, $u = (t) => t === Yg, Jg = (t) => typeof t == \"function\", ts = /* @__PURE__ */ new WeakMap(), So = (t, e) => Go.prototype.toString.call(t) === `[object ${e}]`;\nlet Xg = 0;\nconst Yo = (t) => {\n  const e = typeof t, r = So(t, \"Date\"), n = So(t, \"RegExp\"), o = So(t, \"Object\");\n  let i, c;\n  if (Go(t) === t && !r && !n) {\n    if (i = ts.get(t), i) return i;\n    if (i = ++Xg + \"~\", ts.set(t, i), Array.isArray(t)) {\n      for (i = \"@\", c = 0; c < t.length; c++)\n        i += Yo(t[c]) + \",\";\n      ts.set(t, i);\n    }\n    if (o) {\n      i = \"#\";\n      const f = Go.keys(t).sort();\n      for (; !$u(c = f.pop()); )\n        $u(t[c]) || (i += c + \":\" + Yo(t[c]) + \",\");\n      ts.set(t, i);\n    }\n  } else\n    i = r ? t.toJSON() : e == \"symbol\" ? t.toString() : e == \"string\" ? JSON.stringify(t) : \"\" + t;\n  return i;\n}, Qg = (t) => {\n  if (Jg(t))\n    try {\n      t = t();\n    } catch {\n      t = \"\";\n    }\n  const e = t;\n  return t = typeof t == \"string\" ? t : (Array.isArray(t) ? t.length : t) ? Yo(t) : \"\", [\n    t,\n    e\n  ];\n}, e2 = (t) => Qg(t ? t(0, null) : null)[0], Ao = Promise.resolve(), t2 = (t) => (e, r, n) => {\n  const o = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(!1), { cache: i, initialSize: c = 1, revalidateAll: f = !1, persistSize: v = !1, revalidateFirstPage: x = !0, revalidateOnMount: b = !1, parallel: S = !1 } = n, [, , , T] = nr.get(Ma);\n  let C;\n  try {\n    C = e2(e), C && (C = Vl + C);\n  } catch {\n  }\n  const [P, B, R] = kr(i, C), z = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => Ye(P()._l) ? c : P()._l, [\n    i,\n    C,\n    c\n  ]);\n  Pl.useSyncExternalStore((0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n    (G) => C ? R(C, () => {\n      G();\n    }) : () => {\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      i,\n      C\n    ]\n  ), z, z);\n  const K = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {\n    const G = P()._l;\n    return Ye(G) ? c : G;\n  }, [\n    C,\n    c\n  ]), Z = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(K());\n  os(() => {\n    if (!o.current) {\n      o.current = !0;\n      return;\n    }\n    C && B({\n      _l: v ? Z.current : K()\n    });\n  }, [\n    C,\n    i\n  ]);\n  const Q = b && !o.current, j = t(C, async (G) => {\n    const N = P()._i, O = P()._r;\n    B({\n      _r: Et\n    });\n    const L = [], F = K(), [d] = kr(i, G), s = d().data, u = [];\n    let h = null;\n    for (let g = 0; g < F; ++g) {\n      const [w, _] = Ni(e(g, S ? null : h));\n      if (!w)\n        break;\n      const [A, p] = kr(i, w);\n      let a = A().data;\n      const l = f || N || Ye(a) || x && !g && !Ye(s) || Q || s && !Ye(s[g]) && !n.compare(s[g], a);\n      if (r && (typeof O == \"function\" ? O(a, _) : l)) {\n        const M = async () => {\n          if (!(w in T))\n            a = await r(_);\n          else {\n            const $ = T[w];\n            delete T[w], a = await $;\n          }\n          p({\n            data: a,\n            _k: _\n          }), L[g] = a;\n        };\n        S ? u.push(M) : await M();\n      } else\n        L[g] = a;\n      S || (h = a);\n    }\n    return S && await Promise.all(u.map((g) => g())), B({\n      _i: Et\n    }), L;\n  }, n), V = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n    // eslint-disable-next-line func-names\n    function(G, N) {\n      const O = typeof N == \"boolean\" ? {\n        revalidate: N\n      } : N || {}, L = O.revalidate !== !1;\n      return C ? (L && (Ye(G) ? B({\n        _i: !0,\n        _r: O.revalidate\n      }) : B({\n        _i: !1,\n        _r: O.revalidate\n      })), arguments.length ? j.mutate(G, {\n        ...O,\n        revalidate: L\n      }) : j.mutate()) : Ao;\n    },\n    // swr.mutate is always the same reference\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      C,\n      i\n    ]\n  ), ee = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n    (G) => {\n      if (!C) return Ao;\n      const [, N] = kr(i, C);\n      let O;\n      if (Kt(G) ? O = G(K()) : typeof G == \"number\" && (O = G), typeof O != \"number\") return Ao;\n      N({\n        _l: O\n      }), Z.current = O;\n      const L = [], [F] = kr(i, C);\n      let d = null;\n      for (let s = 0; s < O; ++s) {\n        const [u] = Ni(e(s, d)), [h] = kr(i, u), g = u ? h().data : Et;\n        if (Ye(g))\n          return V(F().data);\n        L.push(g), d = g;\n      }\n      return V(L);\n    },\n    // exclude getKey from the dependencies, which isn't allowed to change during the lifecycle\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      C,\n      i,\n      V,\n      K\n    ]\n  );\n  return {\n    size: K(),\n    setSize: ee,\n    mutate: V,\n    get data() {\n      return j.data;\n    },\n    get error() {\n      return j.error;\n    },\n    get isValidating() {\n      return j.isValidating;\n    },\n    get isLoading() {\n      return j.isLoading;\n    }\n  };\n}, r2 = Hg(Wg, t2), n2 = /* @__PURE__ */ (0,_pigment_css_react__WEBPACK_IMPORTED_MODULE_2__.styled)(\"div\")({\n  classes: [\"sfmkqcr\"]\n}), i2 = /* @__PURE__ */ (0,_pigment_css_react__WEBPACK_IMPORTED_MODULE_2__.styled)(\"div\")({\n  classes: [\"hrldtio\"]\n}), s2 = (0,react__WEBPACK_IMPORTED_MODULE_0__.memo)(({\n  casts: t,\n  cursor: e\n}) => /* @__PURE__ */ U.jsx(n2, {\n  children: t.map((r, n) => /* @__PURE__ */ U.jsxs((react__WEBPACK_IMPORTED_MODULE_0___default().Fragment), {\n    children: [/* @__PURE__ */ U.jsx(Rs, {\n      isEmbed: !1,\n      ...r\n    }), n < t.length - 1 && /* @__PURE__ */ U.jsx(i2, {})]\n  }, r.hash))\n}));\nfunction o2(t) {\n  return t ? t.map((e) => {\n    var n, o, i, c, f;\n    const r = e != null && e.replies && typeof e.replies == \"object\" ? Number(e.replies.count) || 0 : Number(e == null ? void 0 : e.replies) || 0;\n    return {\n      username: ((n = e == null ? void 0 : e.author) == null ? void 0 : n.username) ?? \"\",\n      displayName: ((o = e == null ? void 0 : e.author) == null ? void 0 : o.display_name) ?? \"\",\n      avatarImgUrl: ((i = e == null ? void 0 : e.author) == null ? void 0 : i.pfp_url) ?? \"\",\n      text: (e == null ? void 0 : e.text) ?? \"\",\n      hash: (e == null ? void 0 : e.hash) ?? \"\",\n      reactions: (e == null ? void 0 : e.reactions) ?? [],\n      replies: r,\n      embeds: (e == null ? void 0 : e.embeds) ?? [],\n      frames: (e == null ? void 0 : e.frames) ?? [],\n      renderEmbeds: (e == null ? void 0 : e.renderEmbeds) ?? !0,\n      channel: (e == null ? void 0 : e.channel) ?? \"\",\n      viewerFid: 2,\n      hasPowerBadge: ((c = e == null ? void 0 : e.author) == null ? void 0 : c.power_badge) ?? !1,\n      appAvatarImgUrl: ((f = e == null ? void 0 : e.app) == null ? void 0 : f.pfp_url) ?? \"\",\n      isOwnProfile: !1,\n      allowReactions: !0,\n      renderFrames: !1,\n      timestamp: e.timestamp ?? \"\"\n    };\n  }) : [];\n}\nconst a2 = (t) => yn(t).then(async (e) => await e.json()), u2 = (t, e, r, n, o) => {\n  if (e && (!e.casts || !e.casts.length)) return null;\n  let i = `${gn}/v2/farcaster/feed${r ? \"\" : \"?\"}`;\n  const c = new URLSearchParams();\n  r && (i += `${r}?`), o && (i += `client_id=${o}`), e && (i += `&cursor=${e.next.cursor}`);\n  const f = (v, x) => {\n    x != null && !i.includes(`${v}=`) && c.append(v, String(x));\n  };\n  if (n) {\n    Object.entries(n).forEach(([x, b]) => {\n      const S = x.replace(/([a-z])([A-Z])/g, \"$1_$2\").toLowerCase();\n      f(S, b);\n    });\n    const v = c.toString();\n    v && (i += i.includes(\"?\") ? `&${v}` : `?${v}`);\n  }\n  if (Object.keys(n).length > 1)\n    return i;\n}, uy = ({\n  path: t,\n  ...e\n}) => {\n  var C;\n  const {\n    client_id: r\n  } = lr(), n = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null), [o, i] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1), c = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null), {\n    data: f,\n    error: v,\n    size: x,\n    setSize: b,\n    isValidating: S\n  } = r2((P, B) => u2(P, B, t, e, r), a2), T = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n    if (!f) return [];\n    const P = f.flatMap((R) => (R == null ? void 0 : R.casts) ?? []), B = Array.from(new Set(P.map((R) => R.hash))).map((R) => P.find((z) => z.hash === R));\n    return o2(B);\n  }, [f]);\n  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => (c.current && c.current.disconnect(), c.current = new IntersectionObserver((P) => {\n    var R, z;\n    const [B] = P;\n    B.isIntersecting && !o && !S && f && ((z = (R = f[f.length - 1]) == null ? void 0 : R.next) != null && z.cursor) && (i(!0), b(x + 1).then(() => i(!1)));\n  }, {\n    rootMargin: \"100px\"\n  }), n.current && c.current.observe(n.current), () => {\n    c.current && c.current.disconnect();\n  }), [n.current, o, S, f, x]), v ? /* @__PURE__ */ U.jsx(\"div\", {\n    children: \"Error fetching feed data\"\n  }) : /* @__PURE__ */ U.jsxs(\"div\", {\n    children: [T.length !== 0 ? /* @__PURE__ */ U.jsx(s2, {\n      casts: T,\n      cursor: \"\"\n    }) : /* @__PURE__ */ U.jsx(\"div\", {\n      children: (C = f == null ? void 0 : f[0]) == null ? void 0 : C.message\n    }), S && /* @__PURE__ */ U.jsxs(\"div\", {\n      style: {\n        display: \"flex\",\n        justifyContent: \"center\",\n        padding: \"10px\"\n      },\n      children: [/* @__PURE__ */ U.jsxs(\"span\", {\n        style: {\n          animation: \"blink 1.5s infinite\"\n        },\n        children: [\"Loading\", /* @__PURE__ */ U.jsx(\"span\", {\n          className: \"dots\",\n          children: \"...\"\n        })]\n      }), /* @__PURE__ */ U.jsx(\"style\", {\n        children: `\n                        @keyframes blink {\n                            0% { opacity: 1; }\n                            50% { opacity: 0; }\n                            100% { opacity: 1; }\n                        }\n                    `\n      })]\n    }), /* @__PURE__ */ U.jsx(\"div\", {\n      ref: n\n    })]\n  });\n}, c2 = /* @__PURE__ */ (0,_pigment_css_react__WEBPACK_IMPORTED_MODULE_2__.styled)(\"button\")({\n  classes: [\"b1bqug8r\"]\n}), l2 = /* @__PURE__ */ (0,_pigment_css_react__WEBPACK_IMPORTED_MODULE_2__.styled)(\"button\")({\n  classes: [\"b1mra45w\"]\n}), zu = \"https://farcaster.xyz\", Wl = /(^|\\s)\\/\\w+/g, Gl = /@\\w+/g, Yl = /((https?:\\/\\/)?([a-zA-Z0-9.-]+\\.[a-zA-Z]{2,})(\\/[^\\s]*)?)/g, qu = new RegExp(`(${Wl.source})|(${Gl.source})|(${Yl.source})`, \"g\"), f2 = (t) => Wl.test(t) ? `${zu}/~/channel${t.trim()}` : Gl.test(t) ? `${zu}/${t.substring(1)}` : Yl.test(t) ? t.startsWith(\"http\") ? t : `http://${t}` : \"\", h2 = /* @__PURE__ */ (0,_pigment_css_react__WEBPACK_IMPORTED_MODULE_2__.styled)(\"a\")({\n  classes: [\"sby9wa2\"]\n}), d2 = (t) => {\n  if (!t) return [];\n  const e = [];\n  let r = 0, n;\n  for (; (n = qu.exec(t)) !== null; ) {\n    const o = n.index;\n    r < o && e.push(t.slice(r, o));\n    const i = f2(n[0]), c = n[0].trim().startsWith(\"/\");\n    e.push(/* @__PURE__ */ U.jsx(h2, {\n      href: i,\n      target: \"_blank\",\n      style: c ? {\n        marginLeft: 3.5\n      } : {},\n      children: n[0].trim()\n    }, o)), r = qu.lastIndex;\n  }\n  return r < t.length && e.push(t.slice(r)), e;\n}, p2 = /* @__PURE__ */ (0,_pigment_css_react__WEBPACK_IMPORTED_MODULE_2__.styled)(\"div\")({\n  classes: [\"sdahm58\"]\n}), m2 = /* @__PURE__ */ (0,_pigment_css_react__WEBPACK_IMPORTED_MODULE_2__.styled)(\"div\")({\n  classes: [\"mziqyxp\"]\n}), g2 = /* @__PURE__ */ (0,_pigment_css_react__WEBPACK_IMPORTED_MODULE_2__.styled)(\"div\")({\n  classes: [\"uz7tpmf\"]\n}), y2 = /* @__PURE__ */ (0,_pigment_css_react__WEBPACK_IMPORTED_MODULE_2__.styled)(\"div\")({\n  classes: [\"u1rxlwac\"]\n}), Zu = /* @__PURE__ */ (0,_pigment_css_react__WEBPACK_IMPORTED_MODULE_2__.styled)(\"div\")({\n  classes: [\"pgc6yqp\"]\n}), v2 = /* @__PURE__ */ (0,_pigment_css_react__WEBPACK_IMPORTED_MODULE_2__.styled)(\"div\")({\n  classes: [\"torjf9a\"]\n}), w2 = (0,react__WEBPACK_IMPORTED_MODULE_0__.memo)(({\n  fid: t,\n  username: e,\n  displayName: r,\n  avatarImgUrl: n,\n  bio: o,\n  followers: i,\n  following: c,\n  hasPowerBadge: f,\n  isFollowing: v,\n  isOwnProfile: x,\n  onCast: b,\n  containerStyles: S\n}) => {\n  const T = d2(o), C = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => ku(c), [c]), P = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => ku(i), [i]), B = () => {\n    window.open(\"https://farcaster.xyz/~/settings\", \"_blank\");\n  }, R = {\n    color: S == null ? void 0 : S.color\n  };\n  return /* @__PURE__ */ U.jsxs(p2, {\n    style: S,\n    children: [x && b && /* @__PURE__ */ U.jsxs(Ht, {\n      alignItems: \"center\",\n      justifyContent: \"space-between\",\n      spacingBottom: \"20px\",\n      children: [/* @__PURE__ */ U.jsxs(y2, {\n        style: S,\n        children: [\"@\", e]\n      }), /* @__PURE__ */ U.jsx(c2, {\n        onClick: b,\n        children: \"Cast\"\n      })]\n    }), /* @__PURE__ */ U.jsxs(Ht, {\n      children: [/* @__PURE__ */ U.jsx(Vt, {\n        spacingRight: \"10px\",\n        children: /* @__PURE__ */ U.jsx(Bs, {\n          src: n ?? Li,\n          loading: \"lazy\",\n          alt: `${r ?? \"Skeleton\"} Avatar`\n        })\n      }), /* @__PURE__ */ U.jsxs(m2, {\n        children: [/* @__PURE__ */ U.jsxs(Ht, {\n          justifyContent: \"space-between\",\n          flexGrow: 1,\n          children: [/* @__PURE__ */ U.jsxs(Ol, {\n            children: [/* @__PURE__ */ U.jsx(Ht, {\n              children: /* @__PURE__ */ U.jsx(\"strong\", {\n                children: r || `!${t}`\n              })\n            }), /* @__PURE__ */ U.jsxs(Ht, {\n              alignItems: \"center\",\n              children: [/* @__PURE__ */ U.jsxs(g2, {\n                style: S,\n                children: [\"@\", e]\n              }), v && /* @__PURE__ */ U.jsx(v2, {\n                style: S,\n                children: \"Follows you\"\n              })]\n            })]\n          }), /* @__PURE__ */ U.jsx(Ht, {\n            children: x && /* @__PURE__ */ U.jsx(l2, {\n              style: S,\n              onClick: B,\n              children: \"Edit Profile\"\n            })\n          })]\n        }), /* @__PURE__ */ U.jsx(Vt, {\n          spacingVertical: \"15px\",\n          children: /* @__PURE__ */ U.jsx(\"div\", {\n            style: S,\n            children: T\n          })\n        }), /* @__PURE__ */ U.jsxs(Ht, {\n          children: [/* @__PURE__ */ U.jsxs(Zu, {\n            children: [/* @__PURE__ */ U.jsx(\"strong\", {\n              style: R,\n              children: C\n            }), \" \", \"Following\"]\n          }), /* @__PURE__ */ U.jsxs(Zu, {\n            children: [/* @__PURE__ */ U.jsx(\"strong\", {\n              style: R,\n              children: P\n            }), \" \", \"Followers\"]\n          })]\n        })]\n      })]\n    })]\n  });\n});\nasync function x2({\n  fid: t,\n  viewerFid: e,\n  clientId: r\n}) {\n  var n;\n  try {\n    let o = `${gn}/v2/farcaster/user/bulk?client_id=${r}&fids=${t}`;\n    e && (o += `&viewer_fid=${e}`);\n    const c = await (await yn(o)).json();\n    return ((n = c == null ? void 0 : c.users) == null ? void 0 : n[0]) ?? null;\n  } catch (o) {\n    return console.error(\"Error fetching user by fid\", o), null;\n  }\n}\nconst cy = ({\n  fid: t,\n  viewerFid: e,\n  containerStyles: r\n}) => {\n  var T;\n  const {\n    client_id: n\n  } = lr(), [o, i] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null), [c, f] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!0), [v, x] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null), b = (o == null ? void 0 : o.fid) === e;\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    t && (f(!0), x(null), x2({\n      fid: t,\n      viewerFid: e,\n      clientId: n\n    }).then((C) => {\n      i(C);\n    }).catch((C) => {\n      x(C);\n    }).finally(() => {\n      f(!1);\n    }));\n  }, [t, e]);\n  const S = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {\n  }, []);\n  return c ? /* @__PURE__ */ U.jsx(\"div\", {\n    children: \"Loading...\"\n  }) : !o || v ? /* @__PURE__ */ U.jsx(\"div\", {\n    children: \"Error fetching user data\"\n  }) : /* @__PURE__ */ U.jsx(w2, {\n    fid: t,\n    username: o.username,\n    displayName: o.display_name,\n    avatarImgUrl: o.pfp_url,\n    bio: o.profile.bio.text,\n    followers: o.follower_count,\n    following: o.following_count,\n    hasPowerBadge: o.power_badge,\n    isOwnProfile: b,\n    isFollowing: (T = o.viewer_context) == null ? void 0 : T.followed_by,\n    onCast: S,\n    containerStyles: r\n  });\n}, b2 = /* @__PURE__ */ (0,_pigment_css_react__WEBPACK_IMPORTED_MODULE_2__.styled)(\"ul\")({\n  classes: [\"d12rx4om\"]\n}), _2 = /* @__PURE__ */ (0,_pigment_css_react__WEBPACK_IMPORTED_MODULE_2__.styled)(\"li\")({\n  classes: [\"lrpm6lp\"]\n}), E2 = /* @__PURE__ */ (0,_pigment_css_react__WEBPACK_IMPORTED_MODULE_2__.styled)(\"img\")({\n  classes: [\"a1e9hg3b\"]\n}), M2 = /* @__PURE__ */ (0,_pigment_css_react__WEBPACK_IMPORTED_MODULE_2__.styled)(\"div\")({\n  classes: [\"u1aqay1i\"]\n}), C2 = /* @__PURE__ */ (0,_pigment_css_react__WEBPACK_IMPORTED_MODULE_2__.styled)(\"div\")({\n  classes: [\"d1m0njq\"]\n}), S2 = /* @__PURE__ */ (0,_pigment_css_react__WEBPACK_IMPORTED_MODULE_2__.styled)(\"div\")({\n  classes: [\"u1lvlbuo\"]\n}), A2 = ({\n  users: t,\n  onSelect: e,\n  customStyles: r = {}\n}) => /* @__PURE__ */ U.jsx(b2, {\n  style: {\n    ...r == null ? void 0 : r.dropdown\n  },\n  children: t.map((n) => /* @__PURE__ */ U.jsxs(_2, {\n    style: {\n      ...r == null ? void 0 : r.listItem\n    },\n    onClick: () => e(n),\n    children: [/* @__PURE__ */ U.jsx(E2, {\n      style: {\n        ...r == null ? void 0 : r.avatar\n      },\n      src: n.pfp_url,\n      alt: n.username\n    }), /* @__PURE__ */ U.jsxs(M2, {\n      style: {\n        ...r.userInfo\n      },\n      children: [/* @__PURE__ */ U.jsx(C2, {\n        children: n.display_name\n      }), /* @__PURE__ */ U.jsxs(S2, {\n        children: [\"@\", n.username]\n      })]\n    })]\n  }, n.fid))\n}), k2 = /* @__PURE__ */ (0,_pigment_css_react__WEBPACK_IMPORTED_MODULE_2__.styled)(\"div\")({\n  classes: [\"c9hm20t\"]\n}), I2 = /* @__PURE__ */ (0,_pigment_css_react__WEBPACK_IMPORTED_MODULE_2__.styled)(\"input\")({\n  classes: [\"i80sd8h\"]\n});\nasync function B2({\n  q: t,\n  viewerFid: e,\n  client_id: r\n}) {\n  var n;\n  try {\n    let o = `${gn}/v2/farcaster/user/search?q=${t}&limit=5${e ? `&viewer_fid=${e}` : \"\"}&client_id=${r}`;\n    const c = await (await yn(o)).json();\n    return ((n = c == null ? void 0 : c.result) == null ? void 0 : n.users) || [];\n  } catch (o) {\n    return console.log(\"Error fetching users by query\", o), null;\n  }\n}\nconst ly = ({\n  value: t,\n  onChange: e,\n  style: r = {},\n  placeholder: n = \"Enter username\",\n  disabled: o = !1,\n  viewerFid: i,\n  customStyles: c = {},\n  limit: f = null\n}) => {\n  const {\n    client_id: v\n  } = lr(), [x, b] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"\"), [S, T] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1), [C, P] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]), B = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    const j = (t == null ? void 0 : t.split(\",\")) || [];\n    if (!j[j.length - 1]) {\n      b(\"\");\n      return;\n    }\n    b(j[j.length - 1].trim());\n  }, [t]), (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    x !== \"\" && !/^\\d+$/.test(x) ? R(x) : T(!1);\n  }, [x]);\n  const R = async (j) => {\n    const V = await B2({\n      q: j,\n      viewerFid: i,\n      client_id: v\n    });\n    V && (P(V), T(!0));\n  }, z = (j) => {\n    const V = j.target.value;\n    e(V);\n  }, K = (j) => {\n    let V = t.split(\",\");\n    f !== null && V.length >= f ? V[V.length - 1] = j.fid.toString() : V.push(j.fid.toString());\n    const ee = V.join(\",\");\n    e(ee), b(\"\"), T(!1);\n  }, Z = () => {\n    x && isNaN(Number(x)) && T(!0);\n  }, Q = () => {\n    setTimeout(() => T(!1), 200);\n  };\n  return /* @__PURE__ */ U.jsxs(k2, {\n    style: r,\n    children: [/* @__PURE__ */ U.jsx(I2, {\n      ref: B,\n      type: \"text\",\n      value: t,\n      onChange: z,\n      onFocus: Z,\n      onBlur: Q,\n      placeholder: n,\n      disabled: o\n    }), S && /* @__PURE__ */ U.jsx(A2, {\n      users: C,\n      onSelect: K,\n      customStyles: c\n    })]\n  });\n}, R2 = ({\n  color: t = \"#855DCD\"\n}) => /* @__PURE__ */ U.jsxs(\"svg\", {\n  xmlns: \"http://www.w3.org/2000/svg\",\n  width: \"24\",\n  height: \"24\",\n  viewBox: \"0 0 24 24\",\n  fill: \"none\",\n  stroke: t,\n  \"stroke-width\": \"2\",\n  \"stroke-linecap\": \"round\",\n  \"stroke-linejoin\": \"round\",\n  className: \"lucide lucide-search\",\n  children: [/* @__PURE__ */ U.jsx(\"circle\", {\n    cx: \"11\",\n    cy: \"11\",\n    r: \"8\"\n  }), /* @__PURE__ */ U.jsx(\"path\", {\n    d: \"m21 21-4.3-4.3\"\n  })]\n}), T2 = ({\n  color: t = \"#855DCD\"\n}) => /* @__PURE__ */ U.jsx(\"svg\", {\n  xmlns: \"http://www.w3.org/2000/svg\",\n  width: \"24\",\n  height: \"24\",\n  viewBox: \"0 0 24 24\",\n  fill: \"none\",\n  stroke: t,\n  \"stroke-width\": \"2\",\n  \"stroke-linecap\": \"round\",\n  \"stroke-linejoin\": \"round\",\n  className: \"lucide lucide-loader-circle\",\n  children: /* @__PURE__ */ U.jsx(\"path\", {\n    d: \"M21 12a9 9 0 1 1-6.219-8.56\"\n  })\n}), L2 = /* @__PURE__ */ (0,_pigment_css_react__WEBPACK_IMPORTED_MODULE_2__.styled)(\"div\")({\n  classes: [\"ig7kcuc\"]\n}), O2 = /* @__PURE__ */ (0,_pigment_css_react__WEBPACK_IMPORTED_MODULE_2__.styled)(\"input\")({\n  classes: [\"sh7z7k6\"]\n}), N2 = /* @__PURE__ */ (0,_pigment_css_react__WEBPACK_IMPORTED_MODULE_2__.styled)(\"div\")({\n  classes: [\"s14ai203\"]\n}), j2 = /* @__PURE__ */ (0,_pigment_css_react__WEBPACK_IMPORTED_MODULE_2__.styled)(\"div\")({\n  classes: [\"if18nd6\"]\n}), U2 = /* @__PURE__ */ (0,_pigment_css_react__WEBPACK_IMPORTED_MODULE_2__.styled)(\"div\")({\n  classes: [\"sd833lb\"]\n}), F2 = /* @__PURE__ */ (0,_pigment_css_react__WEBPACK_IMPORTED_MODULE_2__.styled)(\"div\")({\n  classes: [\"ugo586m\"]\n}), P2 = /* @__PURE__ */ (0,_pigment_css_react__WEBPACK_IMPORTED_MODULE_2__.styled)(\"div\")({\n  classes: [\"ukwty1d\"]\n}), D2 = /* @__PURE__ */ (0,_pigment_css_react__WEBPACK_IMPORTED_MODULE_2__.styled)(\"div\")({\n  classes: [\"u77olmy\"]\n}), $2 = /* @__PURE__ */ (0,_pigment_css_react__WEBPACK_IMPORTED_MODULE_2__.styled)(\"div\")({\n  classes: [\"s1xvkxww\"]\n}), z2 = /* @__PURE__ */ (0,_pigment_css_react__WEBPACK_IMPORTED_MODULE_2__.styled)(\"div\")({\n  classes: [\"s1f6b1ja\"]\n}), q2 = /* @__PURE__ */ (0,_pigment_css_react__WEBPACK_IMPORTED_MODULE_2__.styled)(\"div\")({\n  classes: [\"udiufd8\"]\n}), Z2 = /* @__PURE__ */ (0,_pigment_css_react__WEBPACK_IMPORTED_MODULE_2__.styled)(\"div\")({\n  classes: [\"f1b8a2h0\"]\n}), V2 = /* @__PURE__ */ (0,_pigment_css_react__WEBPACK_IMPORTED_MODULE_2__.styled)(\"div\")({\n  classes: [\"l1yq26j0\"]\n}), H2 = /* @__PURE__ */ (0,_pigment_css_react__WEBPACK_IMPORTED_MODULE_2__.styled)(\"li\")({\n  classes: [\"s18mk47k\"]\n}), fy = ({\n  width: t,\n  height: e,\n  selectedUsers: r,\n  onSelectUsers: n,\n  ...o\n}) => {\n  const {\n    client_id: i\n  } = lr(), {\n    user: c,\n    isAuthenticated: f\n  } = kl(), [v, x] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"\"), [b, S] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]), [T, C] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1), P = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    function j(V) {\n      P.current && !P.current.contains(V.target) && (S([]), x(\"\"));\n    }\n    return document.addEventListener(\"mousedown\", j), () => {\n      document.removeEventListener(\"mousedown\", j);\n    };\n  }, []);\n  const z = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(((j, V) => {\n    let ee;\n    return (...G) => {\n      clearTimeout(ee), ee = setTimeout(() => j(...G), V);\n    };\n  })(async (j, V) => {\n    var ee;\n    if (!j) {\n      S([]);\n      return;\n    }\n    C(!0);\n    try {\n      const N = await (await yn(V)).json();\n      S(((ee = N == null ? void 0 : N.result) == null ? void 0 : ee.users) || []);\n    } catch (G) {\n      console.error(\"Error fetching data:\", G);\n    } finally {\n      C(!1);\n    }\n  }, 500), []), K = (j) => {\n    const V = `${gn}/v2/farcaster/user/search?q=${j.target.value}&client_id=${i}${f ? `&viewer_fid=${c == null ? void 0 : c.fid}` : \"\"})`;\n    x(j.target.value), z(j.target.value, V);\n  }, Z = (j) => {\n    r.some((V) => V.username === j.username) || (n([...r, j]), x(\"\"), S([]));\n  }, Q = (j) => {\n    n(r.filter((V) => V.username !== j));\n  };\n  return /* @__PURE__ */ U.jsxs(L2, {\n    ref: P,\n    style: {\n      width: t\n    },\n    children: [/* @__PURE__ */ U.jsxs(j2, {\n      children: [r.map((j) => /* @__PURE__ */ U.jsxs(U2, {\n        children: [/* @__PURE__ */ U.jsx(Bs, {\n          src: j.pfp_url ?? Li,\n          alt: `${j.username} Avatar`,\n          style: {\n            width: \"24px\",\n            height: \"24px\",\n            borderRadius: \"50%\"\n          }\n        }), /* @__PURE__ */ U.jsx(\"span\", {\n          style: {\n            marginLeft: \"8px\"\n          },\n          children: j.display_name\n        }), /* @__PURE__ */ U.jsx(Ul, {\n          size: 20,\n          onClick: () => Q(j.username)\n        })]\n      }, j.username)), /* @__PURE__ */ U.jsxs($2, {\n        children: [/* @__PURE__ */ U.jsx(z2, {\n          children: /* @__PURE__ */ U.jsx(R2, {\n            color: \"#855DCD\"\n          })\n        }), /* @__PURE__ */ U.jsx(O2, {\n          ...o,\n          value: v,\n          onChange: K,\n          placeholder: \"Type to search users\",\n          style: {\n            width: t || \"100%\",\n            height: e || \"40px\"\n          }\n        })]\n      })]\n    }), T ? /* @__PURE__ */ U.jsx(V2, {\n      children: /* @__PURE__ */ U.jsx(T2, {\n        color: \"#855DCD\"\n      })\n    }) : b.length !== 0 && /* @__PURE__ */ U.jsx(N2, {\n      children: b.map((j) => /* @__PURE__ */ U.jsxs(H2, {\n        onClick: () => Z(j),\n        children: [/* @__PURE__ */ U.jsx(Bs, {\n          src: j.pfp_url ?? Li,\n          alt: `${j.username} Avatar`,\n          style: {\n            width: \"40px\",\n            height: \"40px\",\n            borderRadius: \"50%\"\n          }\n        }), /* @__PURE__ */ U.jsxs(F2, {\n          children: [/* @__PURE__ */ U.jsx(P2, {\n            children: j.display_name\n          }), /* @__PURE__ */ U.jsxs(q2, {\n            children: [/* @__PURE__ */ U.jsxs(D2, {\n              children: [\"@\", j.username]\n            }), j.viewer_context && (j.viewer_context.following || j.viewer_context.followed_by) && /* @__PURE__ */ U.jsx(Z2, {\n              children: j.viewer_context.following && j.viewer_context.followed_by ? \"Following each other\" : j.viewer_context.following ? \"Following\" : j.viewer_context.followed_by ? \"Follows you\" : null\n            })]\n          })]\n        })]\n      }, j.username))\n    })]\n  });\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@neynar/react/dist/bundle.es.js\n");

/***/ })

};
;